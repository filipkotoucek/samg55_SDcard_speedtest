
SD_MMC_EXAMPLE21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008db4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408db4  00408db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a70  20000000  00408dbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d8  20000a70  0040982c  00020a70  2**2
                  ALLOC
  4 .stack        00003000  20000b48  00409904  00020a70  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020a9e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020cc5  00000000  00000000  00020af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b5e  00000000  00000000  000417bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e5dc  00000000  00000000  0004631a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e48  00000000  00000000  000548f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000fb8  00000000  00000000  0005573e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b31e  00000000  00000000  000566f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013267  00000000  00000000  00071a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005a43d  00000000  00000000  00084c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003060  00000000  00000000  000df0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 3b 00 20 91 1d 40 00 8d 1d 40 00 8d 1d 40 00     H;. ..@...@...@.
  400010:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	8d 1d 40 00 8d 1d 40 00 00 00 00 00 8d 1d 40 00     ..@...@.......@.
  40003c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
  40004c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
  40005c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 00 00 00 00     ..@...@...@.....
  40006c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
  40007c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
  40008c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
  40009c:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
  4000ac:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 8d 1d 40 00     ..@...@...@...@.
	...
  4000fc:	8d 1d 40 00 8d 1d 40 00 8d 1d 40 00 00 00 00 00     ..@...@...@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000a70 	.word	0x20000a70
  400164:	00000000 	.word	0x00000000
  400168:	00408dbc 	.word	0x00408dbc

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	00408dbc 	.word	0x00408dbc
  4001a8:	20000a74 	.word	0x20000a74
  4001ac:	00408dbc 	.word	0x00408dbc
  4001b0:	00000000 	.word	0x00000000

004001b4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001b4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001b6:	4b07      	ldr	r3, [pc, #28]	; (4001d4 <sd_mmc_configure_slot+0x20>)
  4001b8:	6819      	ldr	r1, [r3, #0]
  4001ba:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001be:	3300      	adds	r3, #0
  4001c0:	bf18      	it	ne
  4001c2:	2301      	movne	r3, #1
  4001c4:	7c4a      	ldrb	r2, [r1, #17]
  4001c6:	6809      	ldr	r1, [r1, #0]
  4001c8:	4803      	ldr	r0, [pc, #12]	; (4001d8 <sd_mmc_configure_slot+0x24>)
  4001ca:	7800      	ldrb	r0, [r0, #0]
  4001cc:	4c03      	ldr	r4, [pc, #12]	; (4001dc <sd_mmc_configure_slot+0x28>)
  4001ce:	47a0      	blx	r4
  4001d0:	bd10      	pop	{r4, pc}
  4001d2:	bf00      	nop
  4001d4:	20000a8c 	.word	0x20000a8c
  4001d8:	20000a95 	.word	0x20000a95
  4001dc:	00400edd 	.word	0x00400edd

004001e0 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001e0:	b108      	cbz	r0, 4001e6 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001e2:	2004      	movs	r0, #4
  4001e4:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001e6:	4b33      	ldr	r3, [pc, #204]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  4001e8:	689a      	ldr	r2, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4001ea:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4001f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4001f4:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001f8:	f002 021f 	and.w	r2, r2, #31
  4001fc:	2301      	movs	r3, #1
  4001fe:	fa03 f202 	lsl.w	r2, r3, r2
  400202:	420a      	tst	r2, r1
  400204:	d010      	beq.n	400228 <sd_mmc_select_slot+0x48>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400206:	4b2b      	ldr	r3, [pc, #172]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  400208:	7b9b      	ldrb	r3, [r3, #14]
  40020a:	2b01      	cmp	r3, #1
  40020c:	d004      	beq.n	400218 <sd_mmc_select_slot+0x38>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40020e:	2204      	movs	r2, #4
  400210:	4b28      	ldr	r3, [pc, #160]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  400212:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400214:	2002      	movs	r0, #2
  400216:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  400218:	4b27      	ldr	r3, [pc, #156]	; (4002b8 <sd_mmc_select_slot+0xd8>)
  40021a:	781b      	ldrb	r3, [r3, #0]
  40021c:	2b00      	cmp	r3, #0
  40021e:	d0f6      	beq.n	40020e <sd_mmc_select_slot+0x2e>
		SysTick->CTRL = 0;
  400220:	2200      	movs	r2, #0
  400222:	4b26      	ldr	r3, [pc, #152]	; (4002bc <sd_mmc_select_slot+0xdc>)
  400224:	601a      	str	r2, [r3, #0]
  400226:	e7f2      	b.n	40020e <sd_mmc_select_slot+0x2e>
{
  400228:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40022a:	4b22      	ldr	r3, [pc, #136]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  40022c:	7b9b      	ldrb	r3, [r3, #14]
  40022e:	2b04      	cmp	r3, #4
  400230:	d005      	beq.n	40023e <sd_mmc_select_slot+0x5e>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400232:	2b01      	cmp	r3, #1
  400234:	d019      	beq.n	40026a <sd_mmc_select_slot+0x8a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400236:	2b03      	cmp	r3, #3
  400238:	d12c      	bne.n	400294 <sd_mmc_select_slot+0xb4>
		return SD_MMC_ERR_UNUSABLE;
  40023a:	2003      	movs	r0, #3
  40023c:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  40023e:	2201      	movs	r2, #1
  400240:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  400242:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400244:	4b1d      	ldr	r3, [pc, #116]	; (4002bc <sd_mmc_select_slot+0xdc>)
  400246:	681b      	ldr	r3, [r3, #0]
  400248:	b93b      	cbnz	r3, 40025a <sd_mmc_select_slot+0x7a>
		sd_mmc_sam_systick_used = true;
  40024a:	4b1b      	ldr	r3, [pc, #108]	; (4002b8 <sd_mmc_select_slot+0xd8>)
  40024c:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  40024e:	4b1b      	ldr	r3, [pc, #108]	; (4002bc <sd_mmc_select_slot+0xdc>)
  400250:	491b      	ldr	r1, [pc, #108]	; (4002c0 <sd_mmc_select_slot+0xe0>)
  400252:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400254:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  400256:	2002      	movs	r0, #2
  400258:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40025a:	2200      	movs	r2, #0
  40025c:	4b16      	ldr	r3, [pc, #88]	; (4002b8 <sd_mmc_select_slot+0xd8>)
  40025e:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400260:	4818      	ldr	r0, [pc, #96]	; (4002c4 <sd_mmc_select_slot+0xe4>)
  400262:	4b19      	ldr	r3, [pc, #100]	; (4002c8 <sd_mmc_select_slot+0xe8>)
  400264:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  400266:	2002      	movs	r0, #2
  400268:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40026a:	4b13      	ldr	r3, [pc, #76]	; (4002b8 <sd_mmc_select_slot+0xd8>)
  40026c:	781b      	ldrb	r3, [r3, #0]
  40026e:	b13b      	cbz	r3, 400280 <sd_mmc_select_slot+0xa0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400270:	4b12      	ldr	r3, [pc, #72]	; (4002bc <sd_mmc_select_slot+0xdc>)
  400272:	681b      	ldr	r3, [r3, #0]
  400274:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400278:	d01a      	beq.n	4002b0 <sd_mmc_select_slot+0xd0>
		SysTick->CTRL = 0;
  40027a:	2200      	movs	r2, #0
  40027c:	4b0f      	ldr	r3, [pc, #60]	; (4002bc <sd_mmc_select_slot+0xdc>)
  40027e:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400280:	4b0c      	ldr	r3, [pc, #48]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  400282:	2202      	movs	r2, #2
  400284:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  400286:	4a11      	ldr	r2, [pc, #68]	; (4002cc <sd_mmc_select_slot+0xec>)
  400288:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40028a:	2201      	movs	r2, #1
  40028c:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  40028e:	2200      	movs	r2, #0
  400290:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400294:	2200      	movs	r2, #0
  400296:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf0>)
  400298:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40029a:	4c06      	ldr	r4, [pc, #24]	; (4002b4 <sd_mmc_select_slot+0xd4>)
  40029c:	4b0d      	ldr	r3, [pc, #52]	; (4002d4 <sd_mmc_select_slot+0xf4>)
  40029e:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4002a0:	4b0d      	ldr	r3, [pc, #52]	; (4002d8 <sd_mmc_select_slot+0xf8>)
  4002a2:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4002a4:	7ba0      	ldrb	r0, [r4, #14]
  4002a6:	2802      	cmp	r0, #2
  4002a8:	bf14      	ite	ne
  4002aa:	2000      	movne	r0, #0
  4002ac:	2001      	moveq	r0, #1
  4002ae:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002b0:	2002      	movs	r0, #2
  4002b2:	bd10      	pop	{r4, pc}
  4002b4:	20000094 	.word	0x20000094
  4002b8:	20000a94 	.word	0x20000a94
  4002bc:	e000e010 	.word	0xe000e010
  4002c0:	00e4ddd8 	.word	0x00e4ddd8
  4002c4:	0082c925 	.word	0x0082c925
  4002c8:	20000001 	.word	0x20000001
  4002cc:	00061a80 	.word	0x00061a80
  4002d0:	20000a95 	.word	0x20000a95
  4002d4:	20000a8c 	.word	0x20000a8c
  4002d8:	004001b5 	.word	0x004001b5

004002dc <sdio_cmd52>:
{
  4002dc:	b538      	push	{r3, r4, r5, lr}
  4002de:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002e0:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e2:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002e6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002ea:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002ee:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002f0:	4311      	orrs	r1, r2
  4002f2:	f241 3034 	movw	r0, #4916	; 0x1334
  4002f6:	4b05      	ldr	r3, [pc, #20]	; (40030c <sdio_cmd52+0x30>)
  4002f8:	4798      	blx	r3
  4002fa:	4605      	mov	r5, r0
  4002fc:	b908      	cbnz	r0, 400302 <sdio_cmd52+0x26>
}
  4002fe:	4628      	mov	r0, r5
  400300:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  400302:	4b03      	ldr	r3, [pc, #12]	; (400310 <sdio_cmd52+0x34>)
  400304:	4798      	blx	r3
  400306:	7020      	strb	r0, [r4, #0]
	return true;
  400308:	e7f9      	b.n	4002fe <sdio_cmd52+0x22>
  40030a:	bf00      	nop
  40030c:	00401105 	.word	0x00401105
  400310:	0040111d 	.word	0x0040111d

00400314 <sd_mmc_cmd13>:
{
  400314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400318:	4c09      	ldr	r4, [pc, #36]	; (400340 <sd_mmc_cmd13+0x2c>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  40031a:	2700      	movs	r7, #0
  40031c:	4e09      	ldr	r6, [pc, #36]	; (400344 <sd_mmc_cmd13+0x30>)
			if (!(driver_get_response() & 0xFF)) {
  40031e:	4d0a      	ldr	r5, [pc, #40]	; (400348 <sd_mmc_cmd13+0x34>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  400320:	4639      	mov	r1, r7
  400322:	f641 300d 	movw	r0, #6925	; 0x1b0d
  400326:	47b0      	blx	r6
  400328:	4680      	mov	r8, r0
  40032a:	b130      	cbz	r0, 40033a <sd_mmc_cmd13+0x26>
			if (!(driver_get_response() & 0xFF)) {
  40032c:	47a8      	blx	r5
  40032e:	b2c0      	uxtb	r0, r0
  400330:	b118      	cbz	r0, 40033a <sd_mmc_cmd13+0x26>
		if (nec_timeout-- == 0) {
  400332:	3c01      	subs	r4, #1
  400334:	d1f4      	bne.n	400320 <sd_mmc_cmd13+0xc>
			return false;
  400336:	f04f 0800 	mov.w	r8, #0
}
  40033a:	4640      	mov	r0, r8
  40033c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400340:	00030d41 	.word	0x00030d41
  400344:	00401105 	.word	0x00401105
  400348:	0040111d 	.word	0x0040111d

0040034c <sd_mmc_cmd9_spi>:
{
  40034c:	b510      	push	{r4, lr}
  40034e:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  400350:	4b0d      	ldr	r3, [pc, #52]	; (400388 <sd_mmc_cmd9_spi+0x3c>)
  400352:	681b      	ldr	r3, [r3, #0]
  400354:	8999      	ldrh	r1, [r3, #12]
  400356:	2301      	movs	r3, #1
  400358:	9300      	str	r3, [sp, #0]
  40035a:	2210      	movs	r2, #16
  40035c:	4091      	lsls	r1, r2
  40035e:	480b      	ldr	r0, [pc, #44]	; (40038c <sd_mmc_cmd9_spi+0x40>)
  400360:	4c0b      	ldr	r4, [pc, #44]	; (400390 <sd_mmc_cmd9_spi+0x44>)
  400362:	47a0      	blx	r4
  400364:	4603      	mov	r3, r0
  400366:	b910      	cbnz	r0, 40036e <sd_mmc_cmd9_spi+0x22>
}
  400368:	4618      	mov	r0, r3
  40036a:	b002      	add	sp, #8
  40036c:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  40036e:	4b06      	ldr	r3, [pc, #24]	; (400388 <sd_mmc_cmd9_spi+0x3c>)
  400370:	6818      	ldr	r0, [r3, #0]
  400372:	2101      	movs	r1, #1
  400374:	3012      	adds	r0, #18
  400376:	4b07      	ldr	r3, [pc, #28]	; (400394 <sd_mmc_cmd9_spi+0x48>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	2800      	cmp	r0, #0
  40037e:	d0f3      	beq.n	400368 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
  400380:	4b05      	ldr	r3, [pc, #20]	; (400398 <sd_mmc_cmd9_spi+0x4c>)
  400382:	4798      	blx	r3
  400384:	4603      	mov	r3, r0
  400386:	e7ef      	b.n	400368 <sd_mmc_cmd9_spi+0x1c>
  400388:	20000a8c 	.word	0x20000a8c
  40038c:	00081109 	.word	0x00081109
  400390:	00400f7d 	.word	0x00400f7d
  400394:	0040119d 	.word	0x0040119d
  400398:	00401219 	.word	0x00401219

0040039c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40039c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40039e:	4b04      	ldr	r3, [pc, #16]	; (4003b0 <sd_mmc_deselect_slot+0x14>)
  4003a0:	781b      	ldrb	r3, [r3, #0]
  4003a2:	b103      	cbz	r3, 4003a6 <sd_mmc_deselect_slot+0xa>
  4003a4:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  4003a6:	2000      	movs	r0, #0
  4003a8:	4b02      	ldr	r3, [pc, #8]	; (4003b4 <sd_mmc_deselect_slot+0x18>)
  4003aa:	4798      	blx	r3
	}
}
  4003ac:	e7fa      	b.n	4003a4 <sd_mmc_deselect_slot+0x8>
  4003ae:	bf00      	nop
  4003b0:	20000a95 	.word	0x20000a95
  4003b4:	00400f1d 	.word	0x00400f1d

004003b8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4003b8:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  4003ba:	200b      	movs	r0, #11
  4003bc:	4b05      	ldr	r3, [pc, #20]	; (4003d4 <sd_mmc_init+0x1c>)
  4003be:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4003c0:	2204      	movs	r2, #4
  4003c2:	4b05      	ldr	r3, [pc, #20]	; (4003d8 <sd_mmc_init+0x20>)
  4003c4:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4003c6:	22ff      	movs	r2, #255	; 0xff
  4003c8:	4b04      	ldr	r3, [pc, #16]	; (4003dc <sd_mmc_init+0x24>)
  4003ca:	701a      	strb	r2, [r3, #0]
	driver_init();
  4003cc:	4b04      	ldr	r3, [pc, #16]	; (4003e0 <sd_mmc_init+0x28>)
  4003ce:	4798      	blx	r3
  4003d0:	bd08      	pop	{r3, pc}
  4003d2:	bf00      	nop
  4003d4:	004019c5 	.word	0x004019c5
  4003d8:	20000094 	.word	0x20000094
  4003dc:	20000a95 	.word	0x20000a95
  4003e0:	00400ead 	.word	0x00400ead

004003e4 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4003e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4003e8:	b087      	sub	sp, #28
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4003ea:	4ba6      	ldr	r3, [pc, #664]	; (400684 <sd_mmc_check+0x2a0>)
  4003ec:	4798      	blx	r3
  4003ee:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4003f0:	2801      	cmp	r0, #1
  4003f2:	d005      	beq.n	400400 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4003f4:	4ba4      	ldr	r3, [pc, #656]	; (400688 <sd_mmc_check+0x2a4>)
  4003f6:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4003f8:	4620      	mov	r0, r4
  4003fa:	b007      	add	sp, #28
  4003fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  400400:	4ba2      	ldr	r3, [pc, #648]	; (40068c <sd_mmc_check+0x2a8>)
  400402:	681b      	ldr	r3, [r3, #0]
  400404:	2201      	movs	r2, #1
  400406:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  400408:	2500      	movs	r5, #0
  40040a:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  40040c:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  40040e:	4ba0      	ldr	r3, [pc, #640]	; (400690 <sd_mmc_check+0x2ac>)
  400410:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  400412:	4629      	mov	r1, r5
  400414:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  400418:	4b9e      	ldr	r3, [pc, #632]	; (400694 <sd_mmc_check+0x2b0>)
  40041a:	4798      	blx	r3
  40041c:	b930      	cbnz	r0, 40042c <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40041e:	4b9b      	ldr	r3, [pc, #620]	; (40068c <sd_mmc_check+0x2a8>)
  400420:	681b      	ldr	r3, [r3, #0]
  400422:	2403      	movs	r4, #3
  400424:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  400426:	4b98      	ldr	r3, [pc, #608]	; (400688 <sd_mmc_check+0x2a4>)
  400428:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  40042a:	e7e5      	b.n	4003f8 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40042c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400430:	f245 5008 	movw	r0, #21768	; 0x5508
  400434:	4b97      	ldr	r3, [pc, #604]	; (400694 <sd_mmc_check+0x2b0>)
  400436:	4798      	blx	r3
  400438:	2800      	cmp	r0, #0
  40043a:	d12f      	bne.n	40049c <sd_mmc_check+0xb8>
	*v2 = 0;
  40043c:	2700      	movs	r7, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  40043e:	2100      	movs	r1, #0
  400440:	f244 5005 	movw	r0, #17669	; 0x4505
  400444:	4b93      	ldr	r3, [pc, #588]	; (400694 <sd_mmc_check+0x2b0>)
  400446:	4798      	blx	r3
  400448:	2800      	cmp	r0, #0
  40044a:	d134      	bne.n	4004b6 <sd_mmc_check+0xd2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40044c:	4b8f      	ldr	r3, [pc, #572]	; (40068c <sd_mmc_check+0x2a8>)
  40044e:	681b      	ldr	r3, [r3, #0]
  400450:	7bdb      	ldrb	r3, [r3, #15]
  400452:	f013 0f01 	tst.w	r3, #1
  400456:	d152      	bne.n	4004fe <sd_mmc_check+0x11a>
	if (IS_SDIO()) {
  400458:	4b8c      	ldr	r3, [pc, #560]	; (40068c <sd_mmc_check+0x2a8>)
  40045a:	681b      	ldr	r3, [r3, #0]
  40045c:	7bdb      	ldrb	r3, [r3, #15]
  40045e:	f013 0f04 	tst.w	r3, #4
  400462:	f040 820f 	bne.w	400884 <sd_mmc_check+0x4a0>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  400466:	4b89      	ldr	r3, [pc, #548]	; (40068c <sd_mmc_check+0x2a8>)
  400468:	681b      	ldr	r3, [r3, #0]
  40046a:	7bdb      	ldrb	r3, [r3, #15]
  40046c:	f003 0309 	and.w	r3, r3, #9
  400470:	2b01      	cmp	r3, #1
  400472:	f000 8276 	beq.w	400962 <sd_mmc_check+0x57e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400476:	4b85      	ldr	r3, [pc, #532]	; (40068c <sd_mmc_check+0x2a8>)
  400478:	681b      	ldr	r3, [r3, #0]
  40047a:	7bdb      	ldrb	r3, [r3, #15]
  40047c:	f013 0f01 	tst.w	r3, #1
  400480:	d003      	beq.n	40048a <sd_mmc_check+0xa6>
		if (!sd_mmc_cmd13()) {
  400482:	4b85      	ldr	r3, [pc, #532]	; (400698 <sd_mmc_check+0x2b4>)
  400484:	4798      	blx	r3
  400486:	2800      	cmp	r0, #0
  400488:	d0c9      	beq.n	40041e <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  40048a:	4b84      	ldr	r3, [pc, #528]	; (40069c <sd_mmc_check+0x2b8>)
  40048c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  40048e:	4b7f      	ldr	r3, [pc, #508]	; (40068c <sd_mmc_check+0x2a8>)
  400490:	681b      	ldr	r3, [r3, #0]
  400492:	2200      	movs	r2, #0
  400494:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400496:	4b7c      	ldr	r3, [pc, #496]	; (400688 <sd_mmc_check+0x2a4>)
  400498:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  40049a:	e7ad      	b.n	4003f8 <sd_mmc_check+0x14>
	resp = driver_get_response();
  40049c:	4b80      	ldr	r3, [pc, #512]	; (4006a0 <sd_mmc_check+0x2bc>)
  40049e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4004a0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4004a4:	f000 8267 	beq.w	400976 <sd_mmc_check+0x592>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4004a8:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4004ac:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  4004b0:	d1b5      	bne.n	40041e <sd_mmc_check+0x3a>
	*v2 = 1;
  4004b2:	2701      	movs	r7, #1
  4004b4:	e7c3      	b.n	40043e <sd_mmc_check+0x5a>
	resp = driver_get_response();
  4004b6:	4b7a      	ldr	r3, [pc, #488]	; (4006a0 <sd_mmc_check+0x2bc>)
  4004b8:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  4004ba:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  4004be:	d0c5      	beq.n	40044c <sd_mmc_check+0x68>
  4004c0:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  4004c4:	f244 5805 	movw	r8, #17669	; 0x4505
  4004c8:	4e72      	ldr	r6, [pc, #456]	; (400694 <sd_mmc_check+0x2b0>)
		resp = driver_get_response();
  4004ca:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 4006a0 <sd_mmc_check+0x2bc>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  4004ce:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  4004d2:	4640      	mov	r0, r8
  4004d4:	47b0      	blx	r6
  4004d6:	2800      	cmp	r0, #0
  4004d8:	d0a1      	beq.n	40041e <sd_mmc_check+0x3a>
		resp = driver_get_response();
  4004da:	47c8      	blx	r9
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  4004dc:	2800      	cmp	r0, #0
  4004de:	db02      	blt.n	4004e6 <sd_mmc_check+0x102>
		if (cmd5_retry-- == 0) {
  4004e0:	3d01      	subs	r5, #1
  4004e2:	d1f4      	bne.n	4004ce <sd_mmc_check+0xea>
  4004e4:	e79b      	b.n	40041e <sd_mmc_check+0x3a>
	if ((resp & OCR_SDIO_MP) > 0) {
  4004e6:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  4004ea:	d104      	bne.n	4004f6 <sd_mmc_check+0x112>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4004ec:	4b67      	ldr	r3, [pc, #412]	; (40068c <sd_mmc_check+0x2a8>)
  4004ee:	681b      	ldr	r3, [r3, #0]
  4004f0:	2204      	movs	r2, #4
  4004f2:	73da      	strb	r2, [r3, #15]
  4004f4:	e7b0      	b.n	400458 <sd_mmc_check+0x74>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  4004f6:	4b65      	ldr	r3, [pc, #404]	; (40068c <sd_mmc_check+0x2a8>)
  4004f8:	681b      	ldr	r3, [r3, #0]
  4004fa:	2205      	movs	r2, #5
  4004fc:	73da      	strb	r2, [r3, #15]
  4004fe:	ea4f 7987 	mov.w	r9, r7, lsl #30
	if ((resp & OCR_SDIO_NF) == 0) {
  400502:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400506:	f04f 0800 	mov.w	r8, #0
  40050a:	4e62      	ldr	r6, [pc, #392]	; (400694 <sd_mmc_check+0x2b0>)
		resp = driver_get_response();
  40050c:	4f64      	ldr	r7, [pc, #400]	; (4006a0 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40050e:	4641      	mov	r1, r8
  400510:	f241 1037 	movw	r0, #4407	; 0x1137
  400514:	47b0      	blx	r6
  400516:	b188      	cbz	r0, 40053c <sd_mmc_check+0x158>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  400518:	4649      	mov	r1, r9
  40051a:	f241 1029 	movw	r0, #4393	; 0x1129
  40051e:	47b0      	blx	r6
  400520:	b160      	cbz	r0, 40053c <sd_mmc_check+0x158>
		resp = driver_get_response();
  400522:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  400524:	f010 0f01 	tst.w	r0, #1
  400528:	d002      	beq.n	400530 <sd_mmc_check+0x14c>
		if (retry-- == 0) {
  40052a:	3d01      	subs	r5, #1
  40052c:	d1ef      	bne.n	40050e <sd_mmc_check+0x12a>
  40052e:	e005      	b.n	40053c <sd_mmc_check+0x158>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  400530:	2100      	movs	r1, #0
  400532:	f240 503a 	movw	r0, #1338	; 0x53a
  400536:	4b57      	ldr	r3, [pc, #348]	; (400694 <sd_mmc_check+0x2b0>)
  400538:	4798      	blx	r3
  40053a:	bb00      	cbnz	r0, 40057e <sd_mmc_check+0x19a>
			sd_mmc_card->type = CARD_TYPE_MMC;
  40053c:	4b53      	ldr	r3, [pc, #332]	; (40068c <sd_mmc_check+0x2a8>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	2202      	movs	r2, #2
  400542:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  400544:	2100      	movs	r1, #0
  400546:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  40054a:	4b52      	ldr	r3, [pc, #328]	; (400694 <sd_mmc_check+0x2b0>)
  40054c:	4798      	blx	r3
  40054e:	2800      	cmp	r0, #0
  400550:	f43f af65 	beq.w	40041e <sd_mmc_check+0x3a>
  400554:	f641 35ef 	movw	r5, #7151	; 0x1bef
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  400558:	f04f 0800 	mov.w	r8, #0
  40055c:	4e4d      	ldr	r6, [pc, #308]	; (400694 <sd_mmc_check+0x2b0>)
		resp = driver_get_response();
  40055e:	4f50      	ldr	r7, [pc, #320]	; (4006a0 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  400560:	4641      	mov	r1, r8
  400562:	f241 1001 	movw	r0, #4353	; 0x1101
  400566:	47b0      	blx	r6
  400568:	2800      	cmp	r0, #0
  40056a:	f43f af58 	beq.w	40041e <sd_mmc_check+0x3a>
		resp = driver_get_response();
  40056e:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
  400570:	f010 0f01 	tst.w	r0, #1
  400574:	f000 80a4 	beq.w	4006c0 <sd_mmc_check+0x2dc>
		if (retry-- == 0) {
  400578:	3d01      	subs	r5, #1
  40057a:	d1f1      	bne.n	400560 <sd_mmc_check+0x17c>
  40057c:	e74f      	b.n	40041e <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_CCS) != 0) {
  40057e:	4b48      	ldr	r3, [pc, #288]	; (4006a0 <sd_mmc_check+0x2bc>)
  400580:	4798      	blx	r3
  400582:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400586:	d005      	beq.n	400594 <sd_mmc_check+0x1b0>
		sd_mmc_card->type |= CARD_TYPE_HC;
  400588:	4b40      	ldr	r3, [pc, #256]	; (40068c <sd_mmc_check+0x2a8>)
  40058a:	681a      	ldr	r2, [r3, #0]
  40058c:	7bd3      	ldrb	r3, [r2, #15]
  40058e:	f043 0308 	orr.w	r3, r3, #8
  400592:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  400594:	2100      	movs	r1, #0
  400596:	f241 103b 	movw	r0, #4411	; 0x113b
  40059a:	4b3e      	ldr	r3, [pc, #248]	; (400694 <sd_mmc_check+0x2b0>)
  40059c:	4798      	blx	r3
  40059e:	2800      	cmp	r0, #0
  4005a0:	f43f af3d 	beq.w	40041e <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005a4:	4b39      	ldr	r3, [pc, #228]	; (40068c <sd_mmc_check+0x2a8>)
  4005a6:	681b      	ldr	r3, [r3, #0]
  4005a8:	7bdb      	ldrb	r3, [r3, #15]
  4005aa:	f013 0f01 	tst.w	r3, #1
  4005ae:	f43f af53 	beq.w	400458 <sd_mmc_check+0x74>
		if (!sd_mmc_cmd9_spi()) {
  4005b2:	4b3c      	ldr	r3, [pc, #240]	; (4006a4 <sd_mmc_check+0x2c0>)
  4005b4:	4798      	blx	r3
  4005b6:	2800      	cmp	r0, #0
  4005b8:	f43f af31 	beq.w	40041e <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  4005bc:	4b33      	ldr	r3, [pc, #204]	; (40068c <sd_mmc_check+0x2a8>)
  4005be:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c0:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4005c2:	f003 0007 	and.w	r0, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4005c6:	4938      	ldr	r1, [pc, #224]	; (4006a8 <sd_mmc_check+0x2c4>)
  4005c8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  4005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4005d0:	fb01 f100 	mul.w	r1, r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  4005d4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  4005d8:	4834      	ldr	r0, [pc, #208]	; (4006ac <sd_mmc_check+0x2c8>)
  4005da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  4005de:	fb03 f301 	mul.w	r3, r3, r1
  4005e2:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4005e4:	7c93      	ldrb	r3, [r2, #18]
  4005e6:	099b      	lsrs	r3, r3, #6
  4005e8:	f040 812b 	bne.w	400842 <sd_mmc_check+0x45e>
  4005ec:	7e91      	ldrb	r1, [r2, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ee:	7e50      	ldrb	r0, [r2, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005f0:	7e13      	ldrb	r3, [r2, #24]
  4005f2:	029b      	lsls	r3, r3, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005f4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4005f8:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005fc:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005fe:	7ed1      	ldrb	r1, [r2, #27]
  400600:	0049      	lsls	r1, r1, #1
  400602:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  400606:	f3c3 030b 	ubfx	r3, r3, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40060a:	3301      	adds	r3, #1
  40060c:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400610:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400612:	408b      	lsls	r3, r1
  400614:	7dd1      	ldrb	r1, [r2, #23]
  400616:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40061a:	408b      	lsls	r3, r1
				/ 1024;
  40061c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40061e:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400620:	8991      	ldrh	r1, [r2, #12]
  400622:	0409      	lsls	r1, r1, #16
  400624:	f241 1037 	movw	r0, #4407	; 0x1137
  400628:	4b1a      	ldr	r3, [pc, #104]	; (400694 <sd_mmc_check+0x2b0>)
  40062a:	4798      	blx	r3
  40062c:	2800      	cmp	r0, #0
  40062e:	f43f aef6 	beq.w	40041e <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  400632:	2301      	movs	r3, #1
  400634:	9300      	str	r3, [sp, #0]
  400636:	2208      	movs	r2, #8
  400638:	2100      	movs	r1, #0
  40063a:	481d      	ldr	r0, [pc, #116]	; (4006b0 <sd_mmc_check+0x2cc>)
  40063c:	4d1d      	ldr	r5, [pc, #116]	; (4006b4 <sd_mmc_check+0x2d0>)
  40063e:	47a8      	blx	r5
  400640:	2800      	cmp	r0, #0
  400642:	f43f aeec 	beq.w	40041e <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  400646:	2101      	movs	r1, #1
  400648:	a804      	add	r0, sp, #16
  40064a:	4b1b      	ldr	r3, [pc, #108]	; (4006b8 <sd_mmc_check+0x2d4>)
  40064c:	4798      	blx	r3
  40064e:	2800      	cmp	r0, #0
  400650:	f43f aee5 	beq.w	40041e <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  400654:	4b19      	ldr	r3, [pc, #100]	; (4006bc <sd_mmc_check+0x2d8>)
  400656:	4798      	blx	r3
  400658:	2800      	cmp	r0, #0
  40065a:	f43f aee0 	beq.w	40041e <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  40065e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400662:	f003 030f 	and.w	r3, r3, #15
  400666:	2b01      	cmp	r3, #1
  400668:	f000 80fd 	beq.w	400866 <sd_mmc_check+0x482>
  40066c:	2b00      	cmp	r3, #0
  40066e:	f000 80f5 	beq.w	40085c <sd_mmc_check+0x478>
  400672:	2b02      	cmp	r3, #2
  400674:	f000 80fc 	beq.w	400870 <sd_mmc_check+0x48c>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400678:	4b04      	ldr	r3, [pc, #16]	; (40068c <sd_mmc_check+0x2a8>)
  40067a:	681b      	ldr	r3, [r3, #0]
  40067c:	2210      	movs	r2, #16
  40067e:	741a      	strb	r2, [r3, #16]
  400680:	e6ea      	b.n	400458 <sd_mmc_check+0x74>
  400682:	bf00      	nop
  400684:	004001e1 	.word	0x004001e1
  400688:	0040039d 	.word	0x0040039d
  40068c:	20000a8c 	.word	0x20000a8c
  400690:	00400f45 	.word	0x00400f45
  400694:	00401105 	.word	0x00401105
  400698:	00400315 	.word	0x00400315
  40069c:	004001b5 	.word	0x004001b5
  4006a0:	0040111d 	.word	0x0040111d
  4006a4:	0040034d 	.word	0x0040034d
  4006a8:	00407048 	.word	0x00407048
  4006ac:	00407064 	.word	0x00407064
  4006b0:	00081133 	.word	0x00081133
  4006b4:	00400f7d 	.word	0x00400f7d
  4006b8:	0040119d 	.word	0x0040119d
  4006bc:	00401219 	.word	0x00401219
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  4006c0:	2100      	movs	r1, #0
  4006c2:	f240 503a 	movw	r0, #1338	; 0x53a
  4006c6:	4bad      	ldr	r3, [pc, #692]	; (40097c <sd_mmc_check+0x598>)
  4006c8:	4798      	blx	r3
  4006ca:	2800      	cmp	r0, #0
  4006cc:	f43f aea7 	beq.w	40041e <sd_mmc_check+0x3a>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  4006d0:	4bab      	ldr	r3, [pc, #684]	; (400980 <sd_mmc_check+0x59c>)
  4006d2:	4798      	blx	r3
  4006d4:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4006d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4006dc:	d018      	beq.n	400710 <sd_mmc_check+0x32c>
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  4006de:	2100      	movs	r1, #0
  4006e0:	f241 103b 	movw	r0, #4411	; 0x113b
  4006e4:	4ba5      	ldr	r3, [pc, #660]	; (40097c <sd_mmc_check+0x598>)
  4006e6:	4798      	blx	r3
  4006e8:	2800      	cmp	r0, #0
  4006ea:	f43f ae98 	beq.w	40041e <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_spi()) {
  4006ee:	4ba5      	ldr	r3, [pc, #660]	; (400984 <sd_mmc_check+0x5a0>)
  4006f0:	4798      	blx	r3
  4006f2:	2800      	cmp	r0, #0
  4006f4:	f43f ae93 	beq.w	40041e <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4006f8:	4ba3      	ldr	r3, [pc, #652]	; (400988 <sd_mmc_check+0x5a4>)
  4006fa:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006fc:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  4006fe:	f3c3 0383 	ubfx	r3, r3, #2, #4
  400702:	3b01      	subs	r3, #1
  400704:	2b03      	cmp	r3, #3
  400706:	d80a      	bhi.n	40071e <sd_mmc_check+0x33a>
  400708:	e8df f003 	tbb	[pc, r3]
  40070c:	7e7b7875 	.word	0x7e7b7875
		sd_mmc_card->type |= CARD_TYPE_HC;
  400710:	4b9d      	ldr	r3, [pc, #628]	; (400988 <sd_mmc_check+0x5a4>)
  400712:	681a      	ldr	r2, [r3, #0]
  400714:	7bd3      	ldrb	r3, [r2, #15]
  400716:	f043 0308 	orr.w	r3, r3, #8
  40071a:	73d3      	strb	r3, [r2, #15]
  40071c:	e7df      	b.n	4006de <sd_mmc_check+0x2fa>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  40071e:	2312      	movs	r3, #18
  400720:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400722:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400724:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400728:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40072c:	4997      	ldr	r1, [pc, #604]	; (40098c <sd_mmc_check+0x5a8>)
  40072e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400736:	fb03 f301 	mul.w	r3, r3, r1
  40073a:	4995      	ldr	r1, [pc, #596]	; (400990 <sd_mmc_check+0x5ac>)
  40073c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400740:	fb03 f301 	mul.w	r3, r3, r1
  400744:	6013      	str	r3, [r2, #0]
  400746:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400748:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40074a:	7e13      	ldrb	r3, [r2, #24]
  40074c:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40074e:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400752:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400756:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40075a:	f640 71ff 	movw	r1, #4095	; 0xfff
  40075e:	428b      	cmp	r3, r1
  400760:	d00f      	beq.n	400782 <sd_mmc_check+0x39e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400762:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400764:	7ed1      	ldrb	r1, [r2, #27]
  400766:	0049      	lsls	r1, r1, #1
  400768:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40076c:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  40076e:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400772:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400774:	408b      	lsls	r3, r1
  400776:	7dd1      	ldrb	r1, [r2, #23]
  400778:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40077c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  40077e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400780:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400782:	7c13      	ldrb	r3, [r2, #16]
  400784:	2b3f      	cmp	r3, #63	; 0x3f
  400786:	d94b      	bls.n	400820 <sd_mmc_check+0x43c>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400788:	2100      	movs	r1, #0
  40078a:	9100      	str	r1, [sp, #0]
  40078c:	2301      	movs	r3, #1
  40078e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400792:	4880      	ldr	r0, [pc, #512]	; (400994 <sd_mmc_check+0x5b0>)
  400794:	4d80      	ldr	r5, [pc, #512]	; (400998 <sd_mmc_check+0x5b4>)
  400796:	47a8      	blx	r5
  400798:	2800      	cmp	r0, #0
  40079a:	f43f ae40 	beq.w	40041e <sd_mmc_check+0x3a>
  40079e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  4007a0:	4e7e      	ldr	r6, [pc, #504]	; (40099c <sd_mmc_check+0x5b8>)
  4007a2:	a803      	add	r0, sp, #12
  4007a4:	47b0      	blx	r6
  4007a6:	2800      	cmp	r0, #0
  4007a8:	f43f ae39 	beq.w	40041e <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4007ac:	3501      	adds	r5, #1
  4007ae:	b2ad      	uxth	r5, r5
  4007b0:	2d32      	cmp	r5, #50	; 0x32
  4007b2:	d1f6      	bne.n	4007a2 <sd_mmc_check+0x3be>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4007b4:	4b74      	ldr	r3, [pc, #464]	; (400988 <sd_mmc_check+0x5a4>)
  4007b6:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007b8:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007ba:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007bc:	7e1b      	ldrb	r3, [r3, #24]
  4007be:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007c0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4007c4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4007c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4007cc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4007d0:	4293      	cmp	r3, r2
  4007d2:	d10e      	bne.n	4007f2 <sd_mmc_check+0x40e>
			if (!driver_read_word(&sec_count)) {
  4007d4:	4e71      	ldr	r6, [pc, #452]	; (40099c <sd_mmc_check+0x5b8>)
  4007d6:	a804      	add	r0, sp, #16
  4007d8:	47b0      	blx	r6
  4007da:	2800      	cmp	r0, #0
  4007dc:	f43f ae1f 	beq.w	40041e <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007e0:	3501      	adds	r5, #1
  4007e2:	b2ad      	uxth	r5, r5
  4007e4:	2d35      	cmp	r5, #53	; 0x35
  4007e6:	d9f6      	bls.n	4007d6 <sd_mmc_check+0x3f2>
		sd_mmc_card->capacity = sec_count / 2;
  4007e8:	4b67      	ldr	r3, [pc, #412]	; (400988 <sd_mmc_check+0x5a4>)
  4007ea:	681a      	ldr	r2, [r3, #0]
  4007ec:	9b04      	ldr	r3, [sp, #16]
  4007ee:	085b      	lsrs	r3, r3, #1
  4007f0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007f2:	4e6a      	ldr	r6, [pc, #424]	; (40099c <sd_mmc_check+0x5b8>)
  4007f4:	e012      	b.n	40081c <sd_mmc_check+0x438>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4007f6:	2314      	movs	r3, #20
  4007f8:	7413      	strb	r3, [r2, #16]
  4007fa:	e792      	b.n	400722 <sd_mmc_check+0x33e>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  4007fc:	2322      	movs	r3, #34	; 0x22
  4007fe:	7413      	strb	r3, [r2, #16]
  400800:	e78f      	b.n	400722 <sd_mmc_check+0x33e>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400802:	2330      	movs	r3, #48	; 0x30
  400804:	7413      	strb	r3, [r2, #16]
  400806:	e78c      	b.n	400722 <sd_mmc_check+0x33e>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400808:	2340      	movs	r3, #64	; 0x40
  40080a:	7413      	strb	r3, [r2, #16]
  40080c:	e789      	b.n	400722 <sd_mmc_check+0x33e>
		if (!driver_read_word(&sec_count)) {
  40080e:	a804      	add	r0, sp, #16
  400810:	47b0      	blx	r6
  400812:	2800      	cmp	r0, #0
  400814:	f43f ae03 	beq.w	40041e <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400818:	3501      	adds	r5, #1
  40081a:	b2ad      	uxth	r5, r5
  40081c:	2d7f      	cmp	r5, #127	; 0x7f
  40081e:	d9f6      	bls.n	40080e <sd_mmc_check+0x42a>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400820:	f44f 7100 	mov.w	r1, #512	; 0x200
  400824:	f241 1010 	movw	r0, #4368	; 0x1110
  400828:	4b54      	ldr	r3, [pc, #336]	; (40097c <sd_mmc_check+0x598>)
  40082a:	4798      	blx	r3
  40082c:	2800      	cmp	r0, #0
  40082e:	f43f adf6 	beq.w	40041e <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd13()) {
  400832:	4b5b      	ldr	r3, [pc, #364]	; (4009a0 <sd_mmc_check+0x5bc>)
  400834:	4798      	blx	r3
  400836:	2800      	cmp	r0, #0
  400838:	f43f adf1 	beq.w	40041e <sd_mmc_check+0x3a>
	sd_mmc_configure_slot();
  40083c:	4b59      	ldr	r3, [pc, #356]	; (4009a4 <sd_mmc_check+0x5c0>)
  40083e:	4798      	blx	r3
  400840:	e625      	b.n	40048e <sd_mmc_check+0xaa>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400842:	7ed1      	ldrb	r1, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400844:	7e90      	ldrb	r0, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400846:	7e53      	ldrb	r3, [r2, #25]
  400848:	041b      	lsls	r3, r3, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40084a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  40084e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
  400850:	f3c3 0315 	ubfx	r3, r3, #0, #22
				* 512;
  400854:	3301      	adds	r3, #1
  400856:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
  400858:	6053      	str	r3, [r2, #4]
  40085a:	e6e1      	b.n	400620 <sd_mmc_check+0x23c>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40085c:	4b4a      	ldr	r3, [pc, #296]	; (400988 <sd_mmc_check+0x5a4>)
  40085e:	681b      	ldr	r3, [r3, #0]
  400860:	2210      	movs	r2, #16
  400862:	741a      	strb	r2, [r3, #16]
  400864:	e5f8      	b.n	400458 <sd_mmc_check+0x74>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400866:	4b48      	ldr	r3, [pc, #288]	; (400988 <sd_mmc_check+0x5a4>)
  400868:	681b      	ldr	r3, [r3, #0]
  40086a:	221a      	movs	r2, #26
  40086c:	741a      	strb	r2, [r3, #16]
  40086e:	e5f3      	b.n	400458 <sd_mmc_check+0x74>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400870:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400874:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400876:	4b44      	ldr	r3, [pc, #272]	; (400988 <sd_mmc_check+0x5a4>)
  400878:	681b      	ldr	r3, [r3, #0]
  40087a:	bf14      	ite	ne
  40087c:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40087e:	2220      	moveq	r2, #32
  400880:	741a      	strb	r2, [r3, #16]
  400882:	e5e9      	b.n	400458 <sd_mmc_check+0x74>
	if (IS_SDIO()) {
  400884:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  400886:	2700      	movs	r7, #0
  400888:	4e47      	ldr	r6, [pc, #284]	; (4009a8 <sd_mmc_check+0x5c4>)
  40088a:	f1a5 0309 	sub.w	r3, r5, #9
  40088e:	aa03      	add	r2, sp, #12
  400890:	4413      	add	r3, r2
  400892:	9300      	str	r3, [sp, #0]
  400894:	463b      	mov	r3, r7
  400896:	462a      	mov	r2, r5
  400898:	4639      	mov	r1, r7
  40089a:	4638      	mov	r0, r7
  40089c:	47b0      	blx	r6
		addr_old++;
  40089e:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4008a0:	2d0d      	cmp	r5, #13
  4008a2:	d1f2      	bne.n	40088a <sd_mmc_check+0x4a6>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4008a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4008a8:	f89d 900c 	ldrb.w	r9, [sp, #12]
  4008ac:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  4008b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4008b4:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  4008b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
  4008bc:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  4008c0:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4008c2:	f04f 0800 	mov.w	r8, #0
  4008c6:	4f38      	ldr	r7, [pc, #224]	; (4009a8 <sd_mmc_check+0x5c4>)
  4008c8:	e00b      	b.n	4008e2 <sd_mmc_check+0x4fe>
		if (buf[1] == 0) {
  4008ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	f43f ada5 	beq.w	40041e <sd_mmc_check+0x3a>
		addr_new += buf[1]-1;
  4008d4:	3302      	adds	r3, #2
  4008d6:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  4008d8:	f509 7380 	add.w	r3, r9, #256	; 0x100
  4008dc:	429e      	cmp	r6, r3
  4008de:	f63f ad9e 	bhi.w	40041e <sd_mmc_check+0x3a>
	addr_new = addr_old;
  4008e2:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4008e4:	ab04      	add	r3, sp, #16
  4008e6:	442b      	add	r3, r5
  4008e8:	9300      	str	r3, [sp, #0]
  4008ea:	4643      	mov	r3, r8
  4008ec:	1972      	adds	r2, r6, r5
  4008ee:	4641      	mov	r1, r8
  4008f0:	4640      	mov	r0, r8
  4008f2:	47b8      	blx	r7
  4008f4:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4008f6:	2d03      	cmp	r5, #3
  4008f8:	d1f4      	bne.n	4008e4 <sd_mmc_check+0x500>
		if (buf[0] == SDIO_CISTPL_END) {
  4008fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008fe:	2bff      	cmp	r3, #255	; 0xff
  400900:	f43f ad8d 	beq.w	40041e <sd_mmc_check+0x3a>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400904:	2b22      	cmp	r3, #34	; 0x22
  400906:	d1e0      	bne.n	4008ca <sd_mmc_check+0x4e6>
  400908:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40090c:	2b00      	cmp	r3, #0
  40090e:	d1dc      	bne.n	4008ca <sd_mmc_check+0x4e6>
  400910:	ad04      	add	r5, sp, #16
  400912:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400916:	f04f 0800 	mov.w	r8, #0
  40091a:	4f23      	ldr	r7, [pc, #140]	; (4009a8 <sd_mmc_check+0x5c4>)
  40091c:	9500      	str	r5, [sp, #0]
  40091e:	4643      	mov	r3, r8
  400920:	4632      	mov	r2, r6
  400922:	4641      	mov	r1, r8
  400924:	4640      	mov	r0, r8
  400926:	47b8      	blx	r7
		addr_new++;
  400928:	3601      	adds	r6, #1
  40092a:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  40092c:	454e      	cmp	r6, r9
  40092e:	d1f5      	bne.n	40091c <sd_mmc_check+0x538>
	tplfe_max_tran_speed = buf[5];
  400930:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400934:	2b32      	cmp	r3, #50	; 0x32
  400936:	bf28      	it	cs
  400938:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  40093a:	4a13      	ldr	r2, [pc, #76]	; (400988 <sd_mmc_check+0x5a4>)
  40093c:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  40093e:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400942:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400946:	4911      	ldr	r1, [pc, #68]	; (40098c <sd_mmc_check+0x5a8>)
  400948:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40094c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400950:	fb03 f301 	mul.w	r3, r3, r1
  400954:	4915      	ldr	r1, [pc, #84]	; (4009ac <sd_mmc_check+0x5c8>)
  400956:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40095a:	fb03 f301 	mul.w	r3, r3, r1
  40095e:	6013      	str	r3, [r2, #0]
  400960:	e581      	b.n	400466 <sd_mmc_check+0x82>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400962:	f44f 7100 	mov.w	r1, #512	; 0x200
  400966:	f241 1010 	movw	r0, #4368	; 0x1110
  40096a:	4b04      	ldr	r3, [pc, #16]	; (40097c <sd_mmc_check+0x598>)
  40096c:	4798      	blx	r3
  40096e:	2800      	cmp	r0, #0
  400970:	f47f ad81 	bne.w	400476 <sd_mmc_check+0x92>
  400974:	e553      	b.n	40041e <sd_mmc_check+0x3a>
	*v2 = 0;
  400976:	2700      	movs	r7, #0
  400978:	e561      	b.n	40043e <sd_mmc_check+0x5a>
  40097a:	bf00      	nop
  40097c:	00401105 	.word	0x00401105
  400980:	0040111d 	.word	0x0040111d
  400984:	0040034d 	.word	0x0040034d
  400988:	20000a8c 	.word	0x20000a8c
  40098c:	00407048 	.word	0x00407048
  400990:	00407008 	.word	0x00407008
  400994:	00081108 	.word	0x00081108
  400998:	00400f7d 	.word	0x00400f7d
  40099c:	00401129 	.word	0x00401129
  4009a0:	00400315 	.word	0x00400315
  4009a4:	004001b5 	.word	0x004001b5
  4009a8:	004002dd 	.word	0x004002dd
  4009ac:	00407064 	.word	0x00407064

004009b0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4009b0:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4009b2:	4b05      	ldr	r3, [pc, #20]	; (4009c8 <sd_mmc_get_type+0x18>)
  4009b4:	4798      	blx	r3
  4009b6:	b108      	cbz	r0, 4009bc <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  4009b8:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  4009ba:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  4009bc:	4b03      	ldr	r3, [pc, #12]	; (4009cc <sd_mmc_get_type+0x1c>)
  4009be:	4798      	blx	r3
	return sd_mmc_card->type;
  4009c0:	4b03      	ldr	r3, [pc, #12]	; (4009d0 <sd_mmc_get_type+0x20>)
  4009c2:	681b      	ldr	r3, [r3, #0]
  4009c4:	7bd8      	ldrb	r0, [r3, #15]
  4009c6:	bd08      	pop	{r3, pc}
  4009c8:	004001e1 	.word	0x004001e1
  4009cc:	0040039d 	.word	0x0040039d
  4009d0:	20000a8c 	.word	0x20000a8c

004009d4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  4009d4:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4009d6:	4b05      	ldr	r3, [pc, #20]	; (4009ec <sd_mmc_get_capacity+0x18>)
  4009d8:	4798      	blx	r3
  4009da:	b108      	cbz	r0, 4009e0 <sd_mmc_get_capacity+0xc>
		return 0;
  4009dc:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  4009de:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  4009e0:	4b03      	ldr	r3, [pc, #12]	; (4009f0 <sd_mmc_get_capacity+0x1c>)
  4009e2:	4798      	blx	r3
	return sd_mmc_card->capacity;
  4009e4:	4b03      	ldr	r3, [pc, #12]	; (4009f4 <sd_mmc_get_capacity+0x20>)
  4009e6:	681b      	ldr	r3, [r3, #0]
  4009e8:	6858      	ldr	r0, [r3, #4]
  4009ea:	bd08      	pop	{r3, pc}
  4009ec:	004001e1 	.word	0x004001e1
  4009f0:	0040039d 	.word	0x0040039d
  4009f4:	20000a8c 	.word	0x20000a8c

004009f8 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  4009f8:	2000      	movs	r0, #0
  4009fa:	4770      	bx	lr

004009fc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  4009fc:	b570      	push	{r4, r5, r6, lr}
  4009fe:	b082      	sub	sp, #8
  400a00:	460e      	mov	r6, r1
  400a02:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400a04:	4b15      	ldr	r3, [pc, #84]	; (400a5c <sd_mmc_init_read_blocks+0x60>)
  400a06:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400a08:	4604      	mov	r4, r0
  400a0a:	b110      	cbz	r0, 400a12 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400a0c:	4620      	mov	r0, r4
  400a0e:	b002      	add	sp, #8
  400a10:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
  400a12:	4b13      	ldr	r3, [pc, #76]	; (400a60 <sd_mmc_init_read_blocks+0x64>)
  400a14:	4798      	blx	r3
  400a16:	b1c8      	cbz	r0, 400a4c <sd_mmc_init_read_blocks+0x50>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400a18:	4b12      	ldr	r3, [pc, #72]	; (400a64 <sd_mmc_init_read_blocks+0x68>)
  400a1a:	4813      	ldr	r0, [pc, #76]	; (400a68 <sd_mmc_init_read_blocks+0x6c>)
  400a1c:	2d01      	cmp	r5, #1
  400a1e:	bf98      	it	ls
  400a20:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400a22:	4b12      	ldr	r3, [pc, #72]	; (400a6c <sd_mmc_init_read_blocks+0x70>)
  400a24:	681b      	ldr	r3, [r3, #0]
  400a26:	7bdb      	ldrb	r3, [r3, #15]
  400a28:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
  400a2c:	bf08      	it	eq
  400a2e:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400a30:	2301      	movs	r3, #1
  400a32:	9300      	str	r3, [sp, #0]
  400a34:	462b      	mov	r3, r5
  400a36:	f44f 7200 	mov.w	r2, #512	; 0x200
  400a3a:	4631      	mov	r1, r6
  400a3c:	4e0c      	ldr	r6, [pc, #48]	; (400a70 <sd_mmc_init_read_blocks+0x74>)
  400a3e:	47b0      	blx	r6
  400a40:	b140      	cbz	r0, 400a54 <sd_mmc_init_read_blocks+0x58>
	sd_mmc_nb_block_remaining = nb_block;
  400a42:	4b0c      	ldr	r3, [pc, #48]	; (400a74 <sd_mmc_init_read_blocks+0x78>)
  400a44:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400a46:	4b0c      	ldr	r3, [pc, #48]	; (400a78 <sd_mmc_init_read_blocks+0x7c>)
  400a48:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400a4a:	e7df      	b.n	400a0c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
  400a4c:	4b0b      	ldr	r3, [pc, #44]	; (400a7c <sd_mmc_init_read_blocks+0x80>)
  400a4e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400a50:	2405      	movs	r4, #5
  400a52:	e7db      	b.n	400a0c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
  400a54:	4b09      	ldr	r3, [pc, #36]	; (400a7c <sd_mmc_init_read_blocks+0x80>)
  400a56:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400a58:	2405      	movs	r4, #5
  400a5a:	e7d7      	b.n	400a0c <sd_mmc_init_read_blocks+0x10>
  400a5c:	004001e1 	.word	0x004001e1
  400a60:	00400315 	.word	0x00400315
  400a64:	00081111 	.word	0x00081111
  400a68:	00101112 	.word	0x00101112
  400a6c:	20000a8c 	.word	0x20000a8c
  400a70:	00400f7d 	.word	0x00400f7d
  400a74:	20000a90 	.word	0x20000a90
  400a78:	20000a92 	.word	0x20000a92
  400a7c:	0040039d 	.word	0x0040039d

00400a80 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400a80:	b510      	push	{r4, lr}
  400a82:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400a84:	4b06      	ldr	r3, [pc, #24]	; (400aa0 <sd_mmc_start_read_blocks+0x20>)
  400a86:	4798      	blx	r3
  400a88:	b920      	cbnz	r0, 400a94 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400a8a:	2200      	movs	r2, #0
  400a8c:	4b05      	ldr	r3, [pc, #20]	; (400aa4 <sd_mmc_start_read_blocks+0x24>)
  400a8e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400a90:	2005      	movs	r0, #5
  400a92:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400a94:	4a03      	ldr	r2, [pc, #12]	; (400aa4 <sd_mmc_start_read_blocks+0x24>)
  400a96:	8813      	ldrh	r3, [r2, #0]
  400a98:	1b1c      	subs	r4, r3, r4
  400a9a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400a9c:	2000      	movs	r0, #0
}
  400a9e:	bd10      	pop	{r4, pc}
  400aa0:	0040119d 	.word	0x0040119d
  400aa4:	20000a90 	.word	0x20000a90

00400aa8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400aa8:	b510      	push	{r4, lr}
  400aaa:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400aac:	4b13      	ldr	r3, [pc, #76]	; (400afc <sd_mmc_wait_end_of_read_blocks+0x54>)
  400aae:	4798      	blx	r3
  400ab0:	b908      	cbnz	r0, 400ab6 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400ab2:	2005      	movs	r0, #5
  400ab4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400ab6:	b184      	cbz	r4, 400ada <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400ab8:	2200      	movs	r2, #0
  400aba:	4b11      	ldr	r3, [pc, #68]	; (400b00 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400abc:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400abe:	4b11      	ldr	r3, [pc, #68]	; (400b04 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400ac0:	881b      	ldrh	r3, [r3, #0]
  400ac2:	2b01      	cmp	r3, #1
  400ac4:	d00f      	beq.n	400ae6 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400ac6:	2100      	movs	r1, #0
  400ac8:	f243 100c 	movw	r0, #12556	; 0x310c
  400acc:	4b0e      	ldr	r3, [pc, #56]	; (400b08 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400ace:	4798      	blx	r3
  400ad0:	b168      	cbz	r0, 400aee <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400ad2:	4b0e      	ldr	r3, [pc, #56]	; (400b0c <sd_mmc_wait_end_of_read_blocks+0x64>)
  400ad4:	4798      	blx	r3
	return SD_MMC_OK;
  400ad6:	2000      	movs	r0, #0
  400ad8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ada:	4b09      	ldr	r3, [pc, #36]	; (400b00 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400adc:	881b      	ldrh	r3, [r3, #0]
  400ade:	2b00      	cmp	r3, #0
  400ae0:	d0ed      	beq.n	400abe <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400ae2:	2000      	movs	r0, #0
}
  400ae4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400ae6:	4b09      	ldr	r3, [pc, #36]	; (400b0c <sd_mmc_wait_end_of_read_blocks+0x64>)
  400ae8:	4798      	blx	r3
		return SD_MMC_OK;
  400aea:	2000      	movs	r0, #0
  400aec:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400aee:	2100      	movs	r1, #0
  400af0:	f243 100c 	movw	r0, #12556	; 0x310c
  400af4:	4b04      	ldr	r3, [pc, #16]	; (400b08 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400af6:	4798      	blx	r3
  400af8:	e7eb      	b.n	400ad2 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400afa:	bf00      	nop
  400afc:	00401219 	.word	0x00401219
  400b00:	20000a90 	.word	0x20000a90
  400b04:	20000a92 	.word	0x20000a92
  400b08:	00401105 	.word	0x00401105
  400b0c:	0040039d 	.word	0x0040039d

00400b10 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400b10:	b570      	push	{r4, r5, r6, lr}
  400b12:	b082      	sub	sp, #8
  400b14:	460e      	mov	r6, r1
  400b16:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400b18:	4b11      	ldr	r3, [pc, #68]	; (400b60 <sd_mmc_init_write_blocks+0x50>)
  400b1a:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400b1c:	4604      	mov	r4, r0
  400b1e:	b9c0      	cbnz	r0, 400b52 <sd_mmc_init_write_blocks+0x42>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400b20:	4b10      	ldr	r3, [pc, #64]	; (400b64 <sd_mmc_init_write_blocks+0x54>)
  400b22:	4811      	ldr	r0, [pc, #68]	; (400b68 <sd_mmc_init_write_blocks+0x58>)
  400b24:	2d01      	cmp	r5, #1
  400b26:	bf98      	it	ls
  400b28:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400b2a:	4b10      	ldr	r3, [pc, #64]	; (400b6c <sd_mmc_init_write_blocks+0x5c>)
  400b2c:	681b      	ldr	r3, [r3, #0]
  400b2e:	7bdb      	ldrb	r3, [r3, #15]
  400b30:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400b34:	bf08      	it	eq
  400b36:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400b38:	2301      	movs	r3, #1
  400b3a:	9300      	str	r3, [sp, #0]
  400b3c:	462b      	mov	r3, r5
  400b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400b42:	4631      	mov	r1, r6
  400b44:	4e0a      	ldr	r6, [pc, #40]	; (400b70 <sd_mmc_init_write_blocks+0x60>)
  400b46:	47b0      	blx	r6
  400b48:	b130      	cbz	r0, 400b58 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400b4a:	4b0a      	ldr	r3, [pc, #40]	; (400b74 <sd_mmc_init_write_blocks+0x64>)
  400b4c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400b4e:	4b0a      	ldr	r3, [pc, #40]	; (400b78 <sd_mmc_init_write_blocks+0x68>)
  400b50:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
  400b52:	4620      	mov	r0, r4
  400b54:	b002      	add	sp, #8
  400b56:	bd70      	pop	{r4, r5, r6, pc}
		sd_mmc_deselect_slot();
  400b58:	4b08      	ldr	r3, [pc, #32]	; (400b7c <sd_mmc_init_write_blocks+0x6c>)
  400b5a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400b5c:	2405      	movs	r4, #5
  400b5e:	e7f8      	b.n	400b52 <sd_mmc_init_write_blocks+0x42>
  400b60:	004001e1 	.word	0x004001e1
  400b64:	00089118 	.word	0x00089118
  400b68:	00109119 	.word	0x00109119
  400b6c:	20000a8c 	.word	0x20000a8c
  400b70:	00400f7d 	.word	0x00400f7d
  400b74:	20000a90 	.word	0x20000a90
  400b78:	20000a92 	.word	0x20000a92
  400b7c:	0040039d 	.word	0x0040039d

00400b80 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400b80:	b510      	push	{r4, lr}
  400b82:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400b84:	4b06      	ldr	r3, [pc, #24]	; (400ba0 <sd_mmc_start_write_blocks+0x20>)
  400b86:	4798      	blx	r3
  400b88:	b920      	cbnz	r0, 400b94 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b8a:	2200      	movs	r2, #0
  400b8c:	4b05      	ldr	r3, [pc, #20]	; (400ba4 <sd_mmc_start_write_blocks+0x24>)
  400b8e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400b90:	2005      	movs	r0, #5
  400b92:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400b94:	4a03      	ldr	r2, [pc, #12]	; (400ba4 <sd_mmc_start_write_blocks+0x24>)
  400b96:	8813      	ldrh	r3, [r2, #0]
  400b98:	1b1c      	subs	r4, r3, r4
  400b9a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400b9c:	2000      	movs	r0, #0
}
  400b9e:	bd10      	pop	{r4, pc}
  400ba0:	0040121d 	.word	0x0040121d
  400ba4:	20000a90 	.word	0x20000a90

00400ba8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400ba8:	b510      	push	{r4, lr}
  400baa:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400bac:	4b09      	ldr	r3, [pc, #36]	; (400bd4 <sd_mmc_wait_end_of_write_blocks+0x2c>)
  400bae:	4798      	blx	r3
  400bb0:	b908      	cbnz	r0, 400bb6 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400bb2:	2005      	movs	r0, #5
  400bb4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400bb6:	b134      	cbz	r4, 400bc6 <sd_mmc_wait_end_of_write_blocks+0x1e>
		sd_mmc_nb_block_remaining = 0;
  400bb8:	2200      	movs	r2, #0
  400bba:	4b07      	ldr	r3, [pc, #28]	; (400bd8 <sd_mmc_wait_end_of_write_blocks+0x30>)
  400bbc:	801a      	strh	r2, [r3, #0]
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
  400bbe:	4b07      	ldr	r3, [pc, #28]	; (400bdc <sd_mmc_wait_end_of_write_blocks+0x34>)
  400bc0:	4798      	blx	r3
	return SD_MMC_OK;
  400bc2:	2000      	movs	r0, #0
  400bc4:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400bc6:	4b04      	ldr	r3, [pc, #16]	; (400bd8 <sd_mmc_wait_end_of_write_blocks+0x30>)
  400bc8:	881b      	ldrh	r3, [r3, #0]
  400bca:	2b00      	cmp	r3, #0
  400bcc:	d0f7      	beq.n	400bbe <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400bce:	2000      	movs	r0, #0
}
  400bd0:	bd10      	pop	{r4, pc}
  400bd2:	bf00      	nop
  400bd4:	0040129d 	.word	0x0040129d
  400bd8:	20000a90 	.word	0x20000a90
  400bdc:	0040039d 	.word	0x0040039d

00400be0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400be0:	b510      	push	{r4, lr}
  400be2:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400be4:	4b0f      	ldr	r3, [pc, #60]	; (400c24 <sd_mmc_test_unit_ready+0x44>)
  400be6:	4798      	blx	r3
  400be8:	2801      	cmp	r0, #1
  400bea:	d018      	beq.n	400c1e <sd_mmc_test_unit_ready+0x3e>
  400bec:	b118      	cbz	r0, 400bf6 <sd_mmc_test_unit_ready+0x16>
  400bee:	2802      	cmp	r0, #2
  400bf0:	d010      	beq.n	400c14 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400bf2:	2001      	movs	r0, #1
  400bf4:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400bf6:	4b0c      	ldr	r3, [pc, #48]	; (400c28 <sd_mmc_test_unit_ready+0x48>)
  400bf8:	5d1b      	ldrb	r3, [r3, r4]
  400bfa:	b10b      	cbz	r3, 400c00 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400bfc:	2002      	movs	r0, #2
	}
}
  400bfe:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400c00:	4620      	mov	r0, r4
  400c02:	4b0a      	ldr	r3, [pc, #40]	; (400c2c <sd_mmc_test_unit_ready+0x4c>)
  400c04:	4798      	blx	r3
  400c06:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400c0a:	2800      	cmp	r0, #0
  400c0c:	bf14      	ite	ne
  400c0e:	2000      	movne	r0, #0
  400c10:	2002      	moveq	r0, #2
  400c12:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400c14:	2200      	movs	r2, #0
  400c16:	4b04      	ldr	r3, [pc, #16]	; (400c28 <sd_mmc_test_unit_ready+0x48>)
  400c18:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400c1a:	2002      	movs	r0, #2
  400c1c:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400c1e:	2003      	movs	r0, #3
  400c20:	bd10      	pop	{r4, pc}
  400c22:	bf00      	nop
  400c24:	004003e5 	.word	0x004003e5
  400c28:	20000a98 	.word	0x20000a98
  400c2c:	004009b1 	.word	0x004009b1

00400c30 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400c30:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400c32:	2000      	movs	r0, #0
  400c34:	4b01      	ldr	r3, [pc, #4]	; (400c3c <sd_mmc_test_unit_ready_0+0xc>)
  400c36:	4798      	blx	r3
}
  400c38:	bd08      	pop	{r3, pc}
  400c3a:	bf00      	nop
  400c3c:	00400be1 	.word	0x00400be1

00400c40 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400c40:	b538      	push	{r3, r4, r5, lr}
  400c42:	4604      	mov	r4, r0
  400c44:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400c46:	4b04      	ldr	r3, [pc, #16]	; (400c58 <sd_mmc_read_capacity+0x18>)
  400c48:	4798      	blx	r3
  400c4a:	0040      	lsls	r0, r0, #1
  400c4c:	3801      	subs	r0, #1
  400c4e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400c50:	4620      	mov	r0, r4
  400c52:	4b02      	ldr	r3, [pc, #8]	; (400c5c <sd_mmc_read_capacity+0x1c>)
  400c54:	4798      	blx	r3
}
  400c56:	bd38      	pop	{r3, r4, r5, pc}
  400c58:	004009d5 	.word	0x004009d5
  400c5c:	00400be1 	.word	0x00400be1

00400c60 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400c60:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400c62:	4601      	mov	r1, r0
  400c64:	2000      	movs	r0, #0
  400c66:	4b01      	ldr	r3, [pc, #4]	; (400c6c <sd_mmc_read_capacity_0+0xc>)
  400c68:	4798      	blx	r3
}
  400c6a:	bd08      	pop	{r3, pc}
  400c6c:	00400c41 	.word	0x00400c41

00400c70 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400c70:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400c72:	2000      	movs	r0, #0
  400c74:	4b01      	ldr	r3, [pc, #4]	; (400c7c <sd_mmc_wr_protect_0+0xc>)
  400c76:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400c78:	bd08      	pop	{r3, pc}
  400c7a:	bf00      	nop
  400c7c:	004009f9 	.word	0x004009f9

00400c80 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400c80:	b510      	push	{r4, lr}
  400c82:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400c84:	2201      	movs	r2, #1
  400c86:	4b0a      	ldr	r3, [pc, #40]	; (400cb0 <sd_mmc_mem_2_ram+0x30>)
  400c88:	4798      	blx	r3
  400c8a:	b120      	cbz	r0, 400c96 <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400c8c:	2802      	cmp	r0, #2
  400c8e:	bf0c      	ite	eq
  400c90:	2002      	moveq	r0, #2
  400c92:	2001      	movne	r0, #1
  400c94:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400c96:	2101      	movs	r1, #1
  400c98:	4620      	mov	r0, r4
  400c9a:	4b06      	ldr	r3, [pc, #24]	; (400cb4 <sd_mmc_mem_2_ram+0x34>)
  400c9c:	4798      	blx	r3
  400c9e:	b108      	cbz	r0, 400ca4 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400ca0:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400ca2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400ca4:	4b04      	ldr	r3, [pc, #16]	; (400cb8 <sd_mmc_mem_2_ram+0x38>)
  400ca6:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400ca8:	3000      	adds	r0, #0
  400caa:	bf18      	it	ne
  400cac:	2001      	movne	r0, #1
  400cae:	bd10      	pop	{r4, pc}
  400cb0:	004009fd 	.word	0x004009fd
  400cb4:	00400a81 	.word	0x00400a81
  400cb8:	00400aa9 	.word	0x00400aa9

00400cbc <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400cbc:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400cbe:	460a      	mov	r2, r1
  400cc0:	4601      	mov	r1, r0
  400cc2:	2000      	movs	r0, #0
  400cc4:	4b01      	ldr	r3, [pc, #4]	; (400ccc <sd_mmc_mem_2_ram_0+0x10>)
  400cc6:	4798      	blx	r3
}
  400cc8:	bd08      	pop	{r3, pc}
  400cca:	bf00      	nop
  400ccc:	00400c81 	.word	0x00400c81

00400cd0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
  400cd0:	b500      	push	{lr}
  400cd2:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
  400cd4:	a902      	add	r1, sp, #8
  400cd6:	23ff      	movs	r3, #255	; 0xff
  400cd8:	f801 3d01 	strb.w	r3, [r1, #-1]!
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  400cdc:	2201      	movs	r2, #1
  400cde:	480a      	ldr	r0, [pc, #40]	; (400d08 <sd_mmc_spi_start_write_block+0x38>)
  400ce0:	4b0a      	ldr	r3, [pc, #40]	; (400d0c <sd_mmc_spi_start_write_block+0x3c>)
  400ce2:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
  400ce4:	4b0a      	ldr	r3, [pc, #40]	; (400d10 <sd_mmc_spi_start_write_block+0x40>)
  400ce6:	881b      	ldrh	r3, [r3, #0]
  400ce8:	2b01      	cmp	r3, #1
		token = SPI_TOKEN_SINGLE_WRITE;
  400cea:	bf0c      	ite	eq
  400cec:	23fe      	moveq	r3, #254	; 0xfe
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
  400cee:	23fc      	movne	r3, #252	; 0xfc
  400cf0:	f88d 3006 	strb.w	r3, [sp, #6]
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
  400cf4:	2201      	movs	r2, #1
  400cf6:	f10d 0106 	add.w	r1, sp, #6
  400cfa:	4803      	ldr	r0, [pc, #12]	; (400d08 <sd_mmc_spi_start_write_block+0x38>)
  400cfc:	4b03      	ldr	r3, [pc, #12]	; (400d0c <sd_mmc_spi_start_write_block+0x3c>)
  400cfe:	4798      	blx	r3
}
  400d00:	b003      	add	sp, #12
  400d02:	f85d fb04 	ldr.w	pc, [sp], #4
  400d06:	bf00      	nop
  400d08:	40008400 	.word	0x40008400
  400d0c:	004014ad 	.word	0x004014ad
  400d10:	20000aa2 	.word	0x20000aa2

00400d14 <sd_mmc_spi_wait_busy>:
{
  400d14:	b570      	push	{r4, r5, r6, lr}
  400d16:	b082      	sub	sp, #8
	uint8_t line = 0xFF;
  400d18:	ac02      	add	r4, sp, #8
  400d1a:	23ff      	movs	r3, #255	; 0xff
  400d1c:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400d20:	4e0f      	ldr	r6, [pc, #60]	; (400d60 <sd_mmc_spi_wait_busy+0x4c>)
  400d22:	2201      	movs	r2, #1
  400d24:	4621      	mov	r1, r4
  400d26:	4630      	mov	r0, r6
  400d28:	4d0e      	ldr	r5, [pc, #56]	; (400d64 <sd_mmc_spi_wait_busy+0x50>)
  400d2a:	47a8      	blx	r5
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400d2c:	2201      	movs	r2, #1
  400d2e:	4621      	mov	r1, r4
  400d30:	4630      	mov	r0, r6
  400d32:	47a8      	blx	r5
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400d34:	2201      	movs	r2, #1
  400d36:	4621      	mov	r1, r4
  400d38:	4630      	mov	r0, r6
  400d3a:	47a8      	blx	r5
  400d3c:	4c0a      	ldr	r4, [pc, #40]	; (400d68 <sd_mmc_spi_wait_busy+0x54>)
	} while (line != 0xFF);
  400d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400d42:	2bff      	cmp	r3, #255	; 0xff
  400d44:	d008      	beq.n	400d58 <sd_mmc_spi_wait_busy+0x44>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  400d46:	2201      	movs	r2, #1
  400d48:	f10d 0107 	add.w	r1, sp, #7
  400d4c:	4630      	mov	r0, r6
  400d4e:	47a8      	blx	r5
		if (!(nec_timeout--)) {
  400d50:	3c01      	subs	r4, #1
  400d52:	d1f4      	bne.n	400d3e <sd_mmc_spi_wait_busy+0x2a>
			return false;
  400d54:	2000      	movs	r0, #0
  400d56:	e000      	b.n	400d5a <sd_mmc_spi_wait_busy+0x46>
	return true;
  400d58:	2001      	movs	r0, #1
}
  400d5a:	b002      	add	sp, #8
  400d5c:	bd70      	pop	{r4, r5, r6, pc}
  400d5e:	bf00      	nop
  400d60:	40008400 	.word	0x40008400
  400d64:	004014e3 	.word	0x004014e3
  400d68:	00030d40 	.word	0x00030d40

00400d6c <sd_mmc_spi_stop_multiwrite_block>:
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
  400d6c:	4b16      	ldr	r3, [pc, #88]	; (400dc8 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
  400d6e:	881a      	ldrh	r2, [r3, #0]
  400d70:	2a01      	cmp	r2, #1
  400d72:	d027      	beq.n	400dc4 <sd_mmc_spi_stop_multiwrite_block+0x58>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
  400d74:	4b15      	ldr	r3, [pc, #84]	; (400dcc <sd_mmc_spi_stop_multiwrite_block+0x60>)
  400d76:	8819      	ldrh	r1, [r3, #0]
  400d78:	4b15      	ldr	r3, [pc, #84]	; (400dd0 <sd_mmc_spi_stop_multiwrite_block+0x64>)
  400d7a:	681b      	ldr	r3, [r3, #0]
  400d7c:	fbb3 f3f1 	udiv	r3, r3, r1
	if (sd_mmc_spi_nb_block >
  400d80:	429a      	cmp	r2, r3
  400d82:	d902      	bls.n	400d8a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // It is not the End of multi write
  400d84:	2301      	movs	r3, #1
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
  400d86:	4618      	mov	r0, r3
  400d88:	4770      	bx	lr
{
  400d8a:	b570      	push	{r4, r5, r6, lr}
  400d8c:	b082      	sub	sp, #8
	value = 0xFF;
  400d8e:	ac02      	add	r4, sp, #8
  400d90:	23ff      	movs	r3, #255	; 0xff
  400d92:	f804 3d01 	strb.w	r3, [r4, #-1]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  400d96:	4e0f      	ldr	r6, [pc, #60]	; (400dd4 <sd_mmc_spi_stop_multiwrite_block+0x68>)
  400d98:	2201      	movs	r2, #1
  400d9a:	4621      	mov	r1, r4
  400d9c:	4630      	mov	r0, r6
  400d9e:	4d0e      	ldr	r5, [pc, #56]	; (400dd8 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
  400da0:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
  400da2:	23fd      	movs	r3, #253	; 0xfd
  400da4:	f88d 3007 	strb.w	r3, [sp, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  400da8:	2201      	movs	r2, #1
  400daa:	4621      	mov	r1, r4
  400dac:	4630      	mov	r0, r6
  400dae:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
  400db0:	4b0a      	ldr	r3, [pc, #40]	; (400ddc <sd_mmc_spi_stop_multiwrite_block+0x70>)
  400db2:	4798      	blx	r3
  400db4:	4603      	mov	r3, r0
  400db6:	b910      	cbnz	r0, 400dbe <sd_mmc_spi_stop_multiwrite_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  400db8:	2105      	movs	r1, #5
  400dba:	4a09      	ldr	r2, [pc, #36]	; (400de0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
  400dbc:	7011      	strb	r1, [r2, #0]
}
  400dbe:	4618      	mov	r0, r3
  400dc0:	b002      	add	sp, #8
  400dc2:	bd70      	pop	{r4, r5, r6, pc}
		return true; // Single block write
  400dc4:	2301      	movs	r3, #1
  400dc6:	e7de      	b.n	400d86 <sd_mmc_spi_stop_multiwrite_block+0x1a>
  400dc8:	20000aa2 	.word	0x20000aa2
  400dcc:	20000a9a 	.word	0x20000a9a
  400dd0:	20000aa8 	.word	0x20000aa8
  400dd4:	40008400 	.word	0x40008400
  400dd8:	004014ad 	.word	0x004014ad
  400ddc:	00400d15 	.word	0x00400d15
  400de0:	20000aa0 	.word	0x20000aa0

00400de4 <sd_mmc_spi_start_read_block>:
{
  400de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400de6:	b083      	sub	sp, #12
	token = 0;
  400de8:	ad02      	add	r5, sp, #8
  400dea:	2300      	movs	r3, #0
  400dec:	f805 3d01 	strb.w	r3, [r5, #-1]!
  400df0:	4c10      	ldr	r4, [pc, #64]	; (400e34 <sd_mmc_spi_start_read_block+0x50>)
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  400df2:	4f11      	ldr	r7, [pc, #68]	; (400e38 <sd_mmc_spi_start_read_block+0x54>)
  400df4:	4e11      	ldr	r6, [pc, #68]	; (400e3c <sd_mmc_spi_start_read_block+0x58>)
  400df6:	2201      	movs	r2, #1
  400df8:	4629      	mov	r1, r5
  400dfa:	4638      	mov	r0, r7
  400dfc:	47b0      	blx	r6
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  400dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400e02:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  400e06:	d008      	beq.n	400e1a <sd_mmc_spi_start_read_block+0x36>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  400e08:	2bfe      	cmp	r3, #254	; 0xfe
  400e0a:	d010      	beq.n	400e2e <sd_mmc_spi_start_read_block+0x4a>
		if (i-- == 0) {
  400e0c:	3c01      	subs	r4, #1
  400e0e:	d1f2      	bne.n	400df6 <sd_mmc_spi_start_read_block+0x12>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  400e10:	2204      	movs	r2, #4
  400e12:	4b0b      	ldr	r3, [pc, #44]	; (400e40 <sd_mmc_spi_start_read_block+0x5c>)
  400e14:	701a      	strb	r2, [r3, #0]
			return false;
  400e16:	2000      	movs	r0, #0
  400e18:	e007      	b.n	400e2a <sd_mmc_spi_start_read_block+0x46>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  400e1a:	f013 0f07 	tst.w	r3, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  400e1e:	bf14      	ite	ne
  400e20:	2207      	movne	r2, #7
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  400e22:	220b      	moveq	r2, #11
  400e24:	4b06      	ldr	r3, [pc, #24]	; (400e40 <sd_mmc_spi_start_read_block+0x5c>)
  400e26:	701a      	strb	r2, [r3, #0]
			return false;
  400e28:	2000      	movs	r0, #0
}
  400e2a:	b003      	add	sp, #12
  400e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
  400e2e:	2001      	movs	r0, #1
  400e30:	e7fb      	b.n	400e2a <sd_mmc_spi_start_read_block+0x46>
  400e32:	bf00      	nop
  400e34:	0007a120 	.word	0x0007a120
  400e38:	40008400 	.word	0x40008400
  400e3c:	004014e3 	.word	0x004014e3
  400e40:	20000aa0 	.word	0x20000aa0

00400e44 <sd_mmc_spi_stop_write_block>:
{
  400e44:	b510      	push	{r4, lr}
  400e46:	b082      	sub	sp, #8
	crc = 0xFFFF; /// CRC is disabled in SPI mode
  400e48:	a902      	add	r1, sp, #8
  400e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400e4e:	f821 3d04 	strh.w	r3, [r1, #-4]!
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
  400e52:	4c12      	ldr	r4, [pc, #72]	; (400e9c <sd_mmc_spi_stop_write_block+0x58>)
  400e54:	2202      	movs	r2, #2
  400e56:	4620      	mov	r0, r4
  400e58:	4b11      	ldr	r3, [pc, #68]	; (400ea0 <sd_mmc_spi_stop_write_block+0x5c>)
  400e5a:	4798      	blx	r3
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
  400e5c:	2201      	movs	r2, #1
  400e5e:	f10d 0107 	add.w	r1, sp, #7
  400e62:	4620      	mov	r0, r4
  400e64:	4b0f      	ldr	r3, [pc, #60]	; (400ea4 <sd_mmc_spi_stop_write_block+0x60>)
  400e66:	4798      	blx	r3
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
  400e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400e6c:	f003 0211 	and.w	r2, r3, #17
  400e70:	2a01      	cmp	r2, #1
  400e72:	d005      	beq.n	400e80 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  400e74:	2201      	movs	r2, #1
  400e76:	4b0c      	ldr	r3, [pc, #48]	; (400ea8 <sd_mmc_spi_stop_write_block+0x64>)
  400e78:	701a      	strb	r2, [r3, #0]
		return false;
  400e7a:	2000      	movs	r0, #0
}
  400e7c:	b002      	add	sp, #8
  400e7e:	bd10      	pop	{r4, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
  400e80:	f003 031e 	and.w	r3, r3, #30
  400e84:	2b04      	cmp	r3, #4
  400e86:	d007      	beq.n	400e98 <sd_mmc_spi_stop_write_block+0x54>
  400e88:	2b0a      	cmp	r3, #10
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
  400e8a:	bf0c      	ite	eq
  400e8c:	2208      	moveq	r2, #8
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
  400e8e:	220a      	movne	r2, #10
  400e90:	4b05      	ldr	r3, [pc, #20]	; (400ea8 <sd_mmc_spi_stop_write_block+0x64>)
  400e92:	701a      	strb	r2, [r3, #0]
		return false;
  400e94:	2000      	movs	r0, #0
  400e96:	e7f1      	b.n	400e7c <sd_mmc_spi_stop_write_block+0x38>
	return true;
  400e98:	2001      	movs	r0, #1
  400e9a:	e7ef      	b.n	400e7c <sd_mmc_spi_stop_write_block+0x38>
  400e9c:	40008400 	.word	0x40008400
  400ea0:	004014ad 	.word	0x004014ad
  400ea4:	004014e3 	.word	0x004014e3
  400ea8:	20000aa0 	.word	0x20000aa0

00400eac <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  400eac:	2200      	movs	r2, #0
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_spi_init+0x24>)
  400eb0:	701a      	strb	r2, [r3, #0]
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  400eb2:	4b08      	ldr	r3, [pc, #32]	; (400ed4 <sd_mmc_spi_init+0x28>)
  400eb4:	691b      	ldr	r3, [r3, #16]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  400eb6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400eba:	d000      	beq.n	400ebe <sd_mmc_spi_init+0x12>
  400ebc:	4770      	bx	lr
{
  400ebe:	b510      	push	{r4, lr}
		spi_master_init(SD_MMC_SPI);
  400ec0:	4c04      	ldr	r4, [pc, #16]	; (400ed4 <sd_mmc_spi_init+0x28>)
  400ec2:	4620      	mov	r0, r4
  400ec4:	4b04      	ldr	r3, [pc, #16]	; (400ed8 <sd_mmc_spi_init+0x2c>)
  400ec6:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400ec8:	2301      	movs	r3, #1
  400eca:	6023      	str	r3, [r4, #0]
  400ecc:	bd10      	pop	{r4, pc}
  400ece:	bf00      	nop
  400ed0:	20000aa0 	.word	0x20000aa0
  400ed4:	40008400 	.word	0x40008400
  400ed8:	00401375 	.word	0x00401375

00400edc <sd_mmc_spi_select_device>:
#endif
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  400edc:	b570      	push	{r4, r5, r6, lr}
  400ede:	b082      	sub	sp, #8
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  400ee0:	2200      	movs	r2, #0
  400ee2:	4b09      	ldr	r3, [pc, #36]	; (400f08 <sd_mmc_spi_select_device+0x2c>)
  400ee4:	701a      	strb	r2, [r3, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  400ee6:	4c09      	ldr	r4, [pc, #36]	; (400f0c <sd_mmc_spi_select_device+0x30>)
  400ee8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  400eec:	4d08      	ldr	r5, [pc, #32]	; (400f10 <sd_mmc_spi_select_device+0x34>)
  400eee:	9200      	str	r2, [sp, #0]
  400ef0:	460b      	mov	r3, r1
  400ef2:	4621      	mov	r1, r4
  400ef4:	4628      	mov	r0, r5
  400ef6:	4e07      	ldr	r6, [pc, #28]	; (400f14 <sd_mmc_spi_select_device+0x38>)
  400ef8:	47b0      	blx	r6
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  400efa:	4621      	mov	r1, r4
  400efc:	4628      	mov	r0, r5
  400efe:	4b06      	ldr	r3, [pc, #24]	; (400f18 <sd_mmc_spi_select_device+0x3c>)
  400f00:	4798      	blx	r3
}
  400f02:	b002      	add	sp, #8
  400f04:	bd70      	pop	{r4, r5, r6, pc}
  400f06:	bf00      	nop
  400f08:	20000aa0 	.word	0x20000aa0
  400f0c:	20000a9c 	.word	0x20000a9c
  400f10:	40008400 	.word	0x40008400
  400f14:	004013dd 	.word	0x004013dd
  400f18:	0040145d 	.word	0x0040145d

00400f1c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  400f1c:	b508      	push	{r3, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  400f1e:	2200      	movs	r2, #0
  400f20:	4b04      	ldr	r3, [pc, #16]	; (400f34 <sd_mmc_spi_deselect_device+0x18>)
  400f22:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  400f24:	4904      	ldr	r1, [pc, #16]	; (400f38 <sd_mmc_spi_deselect_device+0x1c>)
  400f26:	eb01 0180 	add.w	r1, r1, r0, lsl #2
  400f2a:	4804      	ldr	r0, [pc, #16]	; (400f3c <sd_mmc_spi_deselect_device+0x20>)
  400f2c:	4b04      	ldr	r3, [pc, #16]	; (400f40 <sd_mmc_spi_deselect_device+0x24>)
  400f2e:	4798      	blx	r3
  400f30:	bd08      	pop	{r3, pc}
  400f32:	bf00      	nop
  400f34:	20000aa0 	.word	0x20000aa0
  400f38:	20000a9c 	.word	0x20000a9c
  400f3c:	40008400 	.word	0x40008400
  400f40:	0040148d 	.word	0x0040148d

00400f44 <sd_mmc_spi_send_clock>:
}

void sd_mmc_spi_send_clock(void)
{
  400f44:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f46:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
  400f48:	ad02      	add	r5, sp, #8
  400f4a:	23ff      	movs	r3, #255	; 0xff
  400f4c:	f805 3d01 	strb.w	r3, [r5, #-1]!

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  400f50:	2200      	movs	r2, #0
  400f52:	4b07      	ldr	r3, [pc, #28]	; (400f70 <sd_mmc_spi_send_clock+0x2c>)
  400f54:	701a      	strb	r2, [r3, #0]
  400f56:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  400f58:	4f06      	ldr	r7, [pc, #24]	; (400f74 <sd_mmc_spi_send_clock+0x30>)
  400f5a:	4e07      	ldr	r6, [pc, #28]	; (400f78 <sd_mmc_spi_send_clock+0x34>)
  400f5c:	2201      	movs	r2, #1
  400f5e:	4629      	mov	r1, r5
  400f60:	4638      	mov	r0, r7
  400f62:	47b0      	blx	r6
  400f64:	1e63      	subs	r3, r4, #1
	for (i = 0; i < 10; i++) {
  400f66:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  400f6a:	d1f7      	bne.n	400f5c <sd_mmc_spi_send_clock+0x18>
	}
}
  400f6c:	b003      	add	sp, #12
  400f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f70:	20000aa0 	.word	0x20000aa0
  400f74:	40008400 	.word	0x40008400
  400f78:	004014ad 	.word	0x004014ad

00400f7c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400f80:	b085      	sub	sp, #20
  400f82:	4604      	mov	r4, r0
  400f84:	4691      	mov	r9, r2
  400f86:	4698      	mov	r8, r3
	uint8_t dummy = 0xFF;
  400f88:	23ff      	movs	r3, #255	; 0xff
  400f8a:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  400f8e:	2300      	movs	r3, #0
  400f90:	4a53      	ldr	r2, [pc, #332]	; (4010e0 <sd_mmc_spi_adtc_start+0x164>)
  400f92:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  400f94:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  400f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  400f9c:	f88d 2008 	strb.w	r2, [sp, #8]
	cmd_token[1] = arg >> 24;
  400fa0:	0e0a      	lsrs	r2, r1, #24
  400fa2:	f88d 2009 	strb.w	r2, [sp, #9]
	cmd_token[2] = arg >> 16;
  400fa6:	0c0a      	lsrs	r2, r1, #16
  400fa8:	f88d 200a 	strb.w	r2, [sp, #10]
	cmd_token[3] = arg >> 8;
  400fac:	0a0a      	lsrs	r2, r1, #8
  400fae:	f88d 200b 	strb.w	r2, [sp, #11]
	cmd_token[4] = arg;
  400fb2:	f88d 100c 	strb.w	r1, [sp, #12]
  400fb6:	af02      	add	r7, sp, #8
		value = *buf++;
  400fb8:	f04f 0c08 	mov.w	ip, #8
	while (size--) {
  400fbc:	f10d 0e0d 	add.w	lr, sp, #13
  400fc0:	e001      	b.n	400fc6 <sd_mmc_spi_adtc_start+0x4a>
  400fc2:	4577      	cmp	r7, lr
  400fc4:	d012      	beq.n	400fec <sd_mmc_spi_adtc_start+0x70>
		value = *buf++;
  400fc6:	f817 1b01 	ldrb.w	r1, [r7], #1
  400fca:	4662      	mov	r2, ip
			crc <<= 1;
  400fcc:	005b      	lsls	r3, r3, #1
  400fce:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
  400fd0:	ea83 0001 	eor.w	r0, r3, r1
  400fd4:	f010 0f80 	tst.w	r0, #128	; 0x80
				crc ^= 0x09;
  400fd8:	bf18      	it	ne
  400fda:	f083 0309 	eorne.w	r3, r3, #9
			value <<= 1;
  400fde:	0049      	lsls	r1, r1, #1
  400fe0:	b2c9      	uxtb	r1, r1
  400fe2:	3a01      	subs	r2, #1
		for (i = 0; i < 8; i++) {
  400fe4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  400fe8:	d1f0      	bne.n	400fcc <sd_mmc_spi_adtc_start+0x50>
  400fea:	e7ea      	b.n	400fc2 <sd_mmc_spi_adtc_start+0x46>
	crc = (crc << 1) | 1;
  400fec:	005b      	lsls	r3, r3, #1
  400fee:	f043 0301 	orr.w	r3, r3, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  400ff2:	f88d 300d 	strb.w	r3, [sp, #13]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  400ff6:	4f3b      	ldr	r7, [pc, #236]	; (4010e4 <sd_mmc_spi_adtc_start+0x168>)
  400ff8:	2201      	movs	r2, #1
  400ffa:	f10d 010f 	add.w	r1, sp, #15
  400ffe:	4638      	mov	r0, r7
  401000:	4d39      	ldr	r5, [pc, #228]	; (4010e8 <sd_mmc_spi_adtc_start+0x16c>)
  401002:	47a8      	blx	r5
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  401004:	2206      	movs	r2, #6
  401006:	a902      	add	r1, sp, #8
  401008:	4638      	mov	r0, r7
  40100a:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  40100c:	a904      	add	r1, sp, #16
  40100e:	23ff      	movs	r3, #255	; 0xff
  401010:	f801 3d09 	strb.w	r3, [r1, #-9]!
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  401014:	2201      	movs	r2, #1
  401016:	4638      	mov	r0, r7
  401018:	4b34      	ldr	r3, [pc, #208]	; (4010ec <sd_mmc_spi_adtc_start+0x170>)
  40101a:	4798      	blx	r3
  40101c:	2707      	movs	r7, #7
	ncr_timeout = 7;
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  40101e:	4e31      	ldr	r6, [pc, #196]	; (4010e4 <sd_mmc_spi_adtc_start+0x168>)
  401020:	4d32      	ldr	r5, [pc, #200]	; (4010ec <sd_mmc_spi_adtc_start+0x170>)
  401022:	2201      	movs	r2, #1
  401024:	f10d 0107 	add.w	r1, sp, #7
  401028:	4630      	mov	r0, r6
  40102a:	47a8      	blx	r5
		if ((r1 & R1_SPI_ERROR) == 0) {
  40102c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401030:	f013 0f80 	tst.w	r3, #128	; 0x80
  401034:	d00b      	beq.n	40104e <sd_mmc_spi_adtc_start+0xd2>
  401036:	1e7b      	subs	r3, r7, #1
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  401038:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  40103c:	d1f1      	bne.n	401022 <sd_mmc_spi_adtc_start+0xa6>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  40103e:	2202      	movs	r2, #2
  401040:	4b27      	ldr	r3, [pc, #156]	; (4010e0 <sd_mmc_spi_adtc_start+0x164>)
  401042:	701a      	strb	r2, [r3, #0]
			return false;
  401044:	2300      	movs	r3, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
  401046:	4618      	mov	r0, r3
  401048:	b005      	add	sp, #20
  40104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_spi_response_32 = r1;
  40104e:	4a28      	ldr	r2, [pc, #160]	; (4010f0 <sd_mmc_spi_adtc_start+0x174>)
  401050:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
  401052:	f013 0f08 	tst.w	r3, #8
  401056:	d119      	bne.n	40108c <sd_mmc_spi_adtc_start+0x110>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  401058:	f013 0f04 	tst.w	r3, #4
  40105c:	d11b      	bne.n	401096 <sd_mmc_spi_adtc_start+0x11a>
	if (r1 & ~R1_SPI_IDLE) {
  40105e:	f033 0301 	bics.w	r3, r3, #1
  401062:	d11d      	bne.n	4010a0 <sd_mmc_spi_adtc_start+0x124>
	if (cmd & SDMMC_RESP_BUSY) {
  401064:	f414 5f00 	tst.w	r4, #8192	; 0x2000
  401068:	d11f      	bne.n	4010aa <sd_mmc_spi_adtc_start+0x12e>
	if (cmd & SDMMC_RESP_8) {
  40106a:	f414 7f00 	tst.w	r4, #512	; 0x200
  40106e:	d125      	bne.n	4010bc <sd_mmc_spi_adtc_start+0x140>
	if (cmd & SDMMC_RESP_32) {
  401070:	f414 6f80 	tst.w	r4, #1024	; 0x400
  401074:	d12a      	bne.n	4010cc <sd_mmc_spi_adtc_start+0x150>
	sd_mmc_spi_block_size = block_size;
  401076:	4b1f      	ldr	r3, [pc, #124]	; (4010f4 <sd_mmc_spi_adtc_start+0x178>)
  401078:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_spi_nb_block = nb_block;
  40107c:	4b1e      	ldr	r3, [pc, #120]	; (4010f8 <sd_mmc_spi_adtc_start+0x17c>)
  40107e:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_spi_transfert_pos = 0;
  401082:	2200      	movs	r2, #0
  401084:	4b1d      	ldr	r3, [pc, #116]	; (4010fc <sd_mmc_spi_adtc_start+0x180>)
  401086:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  401088:	2301      	movs	r3, #1
  40108a:	e7dc      	b.n	401046 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  40108c:	2206      	movs	r2, #6
  40108e:	4b14      	ldr	r3, [pc, #80]	; (4010e0 <sd_mmc_spi_adtc_start+0x164>)
  401090:	701a      	strb	r2, [r3, #0]
		return false;
  401092:	2300      	movs	r3, #0
  401094:	e7d7      	b.n	401046 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  401096:	2209      	movs	r2, #9
  401098:	4b11      	ldr	r3, [pc, #68]	; (4010e0 <sd_mmc_spi_adtc_start+0x164>)
  40109a:	701a      	strb	r2, [r3, #0]
		return false;
  40109c:	2300      	movs	r3, #0
  40109e:	e7d2      	b.n	401046 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  4010a0:	2201      	movs	r2, #1
  4010a2:	4b0f      	ldr	r3, [pc, #60]	; (4010e0 <sd_mmc_spi_adtc_start+0x164>)
  4010a4:	701a      	strb	r2, [r3, #0]
		return false;
  4010a6:	2300      	movs	r3, #0
  4010a8:	e7cd      	b.n	401046 <sd_mmc_spi_adtc_start+0xca>
		if (!sd_mmc_spi_wait_busy()) {
  4010aa:	4b15      	ldr	r3, [pc, #84]	; (401100 <sd_mmc_spi_adtc_start+0x184>)
  4010ac:	4798      	blx	r3
  4010ae:	4603      	mov	r3, r0
  4010b0:	2800      	cmp	r0, #0
  4010b2:	d1da      	bne.n	40106a <sd_mmc_spi_adtc_start+0xee>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  4010b4:	2103      	movs	r1, #3
  4010b6:	4a0a      	ldr	r2, [pc, #40]	; (4010e0 <sd_mmc_spi_adtc_start+0x164>)
  4010b8:	7011      	strb	r1, [r2, #0]
			return false;
  4010ba:	e7c4      	b.n	401046 <sd_mmc_spi_adtc_start+0xca>
		sd_mmc_spi_response_32 = 0;
  4010bc:	490c      	ldr	r1, [pc, #48]	; (4010f0 <sd_mmc_spi_adtc_start+0x174>)
  4010be:	2300      	movs	r3, #0
  4010c0:	600b      	str	r3, [r1, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  4010c2:	2201      	movs	r2, #1
  4010c4:	4807      	ldr	r0, [pc, #28]	; (4010e4 <sd_mmc_spi_adtc_start+0x168>)
  4010c6:	4b09      	ldr	r3, [pc, #36]	; (4010ec <sd_mmc_spi_adtc_start+0x170>)
  4010c8:	4798      	blx	r3
  4010ca:	e7d1      	b.n	401070 <sd_mmc_spi_adtc_start+0xf4>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  4010cc:	4c08      	ldr	r4, [pc, #32]	; (4010f0 <sd_mmc_spi_adtc_start+0x174>)
  4010ce:	2204      	movs	r2, #4
  4010d0:	4621      	mov	r1, r4
  4010d2:	4804      	ldr	r0, [pc, #16]	; (4010e4 <sd_mmc_spi_adtc_start+0x168>)
  4010d4:	4b05      	ldr	r3, [pc, #20]	; (4010ec <sd_mmc_spi_adtc_start+0x170>)
  4010d6:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  4010d8:	6823      	ldr	r3, [r4, #0]
  4010da:	ba1b      	rev	r3, r3
  4010dc:	6023      	str	r3, [r4, #0]
  4010de:	e7ca      	b.n	401076 <sd_mmc_spi_adtc_start+0xfa>
  4010e0:	20000aa0 	.word	0x20000aa0
  4010e4:	40008400 	.word	0x40008400
  4010e8:	004014ad 	.word	0x004014ad
  4010ec:	004014e3 	.word	0x004014e3
  4010f0:	20000aa4 	.word	0x20000aa4
  4010f4:	20000a9a 	.word	0x20000a9a
  4010f8:	20000aa2 	.word	0x20000aa2
  4010fc:	20000aa8 	.word	0x20000aa8
  401100:	00400d15 	.word	0x00400d15

00401104 <sd_mmc_spi_send_cmd>:
{
  401104:	b510      	push	{r4, lr}
  401106:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  401108:	2200      	movs	r2, #0
  40110a:	9200      	str	r2, [sp, #0]
  40110c:	4613      	mov	r3, r2
  40110e:	4c02      	ldr	r4, [pc, #8]	; (401118 <sd_mmc_spi_send_cmd+0x14>)
  401110:	47a0      	blx	r4
}
  401112:	b002      	add	sp, #8
  401114:	bd10      	pop	{r4, pc}
  401116:	bf00      	nop
  401118:	00400f7d 	.word	0x00400f7d

0040111c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
}
  40111c:	4b01      	ldr	r3, [pc, #4]	; (401124 <sd_mmc_spi_get_response+0x8>)
  40111e:	6818      	ldr	r0, [r3, #0]
  401120:	4770      	bx	lr
  401122:	bf00      	nop
  401124:	20000aa4 	.word	0x20000aa4

00401128 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  401128:	b510      	push	{r4, lr}
  40112a:	b082      	sub	sp, #8
  40112c:	4604      	mov	r4, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40112e:	2200      	movs	r2, #0
  401130:	4b14      	ldr	r3, [pc, #80]	; (401184 <sd_mmc_spi_read_word+0x5c>)
  401132:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401134:	4b14      	ldr	r3, [pc, #80]	; (401188 <sd_mmc_spi_read_word+0x60>)
  401136:	881a      	ldrh	r2, [r3, #0]
  401138:	4b14      	ldr	r3, [pc, #80]	; (40118c <sd_mmc_spi_read_word+0x64>)
  40113a:	6819      	ldr	r1, [r3, #0]
  40113c:	fbb1 f3f2 	udiv	r3, r1, r2
  401140:	fb02 1313 	mls	r3, r2, r3, r1
  401144:	b91b      	cbnz	r3, 40114e <sd_mmc_spi_read_word+0x26>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  401146:	4b12      	ldr	r3, [pc, #72]	; (401190 <sd_mmc_spi_read_word+0x68>)
  401148:	4798      	blx	r3
  40114a:	4603      	mov	r3, r0
  40114c:	b180      	cbz	r0, 401170 <sd_mmc_spi_read_word+0x48>
			return false;
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  40114e:	2204      	movs	r2, #4
  401150:	4621      	mov	r1, r4
  401152:	4810      	ldr	r0, [pc, #64]	; (401194 <sd_mmc_spi_read_word+0x6c>)
  401154:	4b10      	ldr	r3, [pc, #64]	; (401198 <sd_mmc_spi_read_word+0x70>)
  401156:	4798      	blx	r3
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
  401158:	4a0c      	ldr	r2, [pc, #48]	; (40118c <sd_mmc_spi_read_word+0x64>)
  40115a:	6813      	ldr	r3, [r2, #0]
  40115c:	3304      	adds	r3, #4
  40115e:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  401160:	4a09      	ldr	r2, [pc, #36]	; (401188 <sd_mmc_spi_read_word+0x60>)
  401162:	8811      	ldrh	r1, [r2, #0]
  401164:	fbb3 f2f1 	udiv	r2, r3, r1
  401168:	fb01 3312 	mls	r3, r1, r2, r3
  40116c:	b11b      	cbz	r3, 401176 <sd_mmc_spi_read_word+0x4e>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
  40116e:	2301      	movs	r3, #1
}
  401170:	4618      	mov	r0, r3
  401172:	b002      	add	sp, #8
  401174:	bd10      	pop	{r4, pc}
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401176:	2202      	movs	r2, #2
  401178:	a901      	add	r1, sp, #4
  40117a:	4806      	ldr	r0, [pc, #24]	; (401194 <sd_mmc_spi_read_word+0x6c>)
  40117c:	4b06      	ldr	r3, [pc, #24]	; (401198 <sd_mmc_spi_read_word+0x70>)
  40117e:	4798      	blx	r3
	return true;
  401180:	2301      	movs	r3, #1
  401182:	e7f5      	b.n	401170 <sd_mmc_spi_read_word+0x48>
  401184:	20000aa0 	.word	0x20000aa0
  401188:	20000a9a 	.word	0x20000a9a
  40118c:	20000aa8 	.word	0x20000aa8
  401190:	00400de5 	.word	0x00400de5
  401194:	40008400 	.word	0x40008400
  401198:	004014e3 	.word	0x004014e3

0040119c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  40119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011a0:	b083      	sub	sp, #12
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4011a2:	2200      	movs	r2, #0
  4011a4:	4b16      	ldr	r3, [pc, #88]	; (401200 <sd_mmc_spi_start_read_blocks+0x64>)
  4011a6:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
  4011a8:	b339      	cbz	r1, 4011fa <sd_mmc_spi_start_read_blocks+0x5e>
  4011aa:	1e4c      	subs	r4, r1, #1
  4011ac:	b2a4      	uxth	r4, r4
  4011ae:	4681      	mov	r9, r0
  4011b0:	4615      	mov	r5, r2
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  4011b2:	f8df b05c 	ldr.w	fp, [pc, #92]	; 401210 <sd_mmc_spi_start_read_blocks+0x74>
			return false;
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  4011b6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 401214 <sd_mmc_spi_start_read_blocks+0x78>
  4011ba:	4f12      	ldr	r7, [pc, #72]	; (401204 <sd_mmc_spi_start_read_blocks+0x68>)
		if (!sd_mmc_spi_start_read_block()) {
  4011bc:	47d8      	blx	fp
  4011be:	4682      	mov	sl, r0
  4011c0:	b1b8      	cbz	r0, 4011f2 <sd_mmc_spi_start_read_blocks+0x56>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  4011c2:	f8b8 2000 	ldrh.w	r2, [r8]
  4011c6:	eb09 0105 	add.w	r1, r9, r5
  4011ca:	4638      	mov	r0, r7
  4011cc:	4e0e      	ldr	r6, [pc, #56]	; (401208 <sd_mmc_spi_start_read_blocks+0x6c>)
  4011ce:	47b0      	blx	r6
		pos += sd_mmc_spi_block_size;
  4011d0:	f8b8 1000 	ldrh.w	r1, [r8]
  4011d4:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  4011d6:	4a0d      	ldr	r2, [pc, #52]	; (40120c <sd_mmc_spi_start_read_blocks+0x70>)
  4011d8:	6813      	ldr	r3, [r2, #0]
  4011da:	440b      	add	r3, r1
  4011dc:	6013      	str	r3, [r2, #0]
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  4011de:	2202      	movs	r2, #2
  4011e0:	a901      	add	r1, sp, #4
  4011e2:	4638      	mov	r0, r7
  4011e4:	47b0      	blx	r6
	while (nb_block--) {
  4011e6:	3c01      	subs	r4, #1
  4011e8:	b2a4      	uxth	r4, r4
  4011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4011ee:	429c      	cmp	r4, r3
  4011f0:	d1e4      	bne.n	4011bc <sd_mmc_spi_start_read_blocks+0x20>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
  4011f2:	4650      	mov	r0, sl
  4011f4:	b003      	add	sp, #12
  4011f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
  4011fa:	f04f 0a01 	mov.w	sl, #1
  4011fe:	e7f8      	b.n	4011f2 <sd_mmc_spi_start_read_blocks+0x56>
  401200:	20000aa0 	.word	0x20000aa0
  401204:	40008400 	.word	0x40008400
  401208:	004014e3 	.word	0x004014e3
  40120c:	20000aa8 	.word	0x20000aa8
  401210:	00400de5 	.word	0x00400de5
  401214:	20000a9a 	.word	0x20000a9a

00401218 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
  401218:	2001      	movs	r0, #1
  40121a:	4770      	bx	lr

0040121c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
  40121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401220:	4681      	mov	r9, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401222:	2500      	movs	r5, #0
  401224:	4b15      	ldr	r3, [pc, #84]	; (40127c <sd_mmc_spi_start_write_blocks+0x60>)
  401226:	701d      	strb	r5, [r3, #0]
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
  401228:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401298 <sd_mmc_spi_start_write_blocks+0x7c>

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  40122c:	4e14      	ldr	r6, [pc, #80]	; (401280 <sd_mmc_spi_start_write_blocks+0x64>)
  40122e:	4f15      	ldr	r7, [pc, #84]	; (401284 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
  401230:	e000      	b.n	401234 <sd_mmc_spi_start_write_blocks+0x18>
{
  401232:	4621      	mov	r1, r4
	while (nb_block--) {
  401234:	1e4c      	subs	r4, r1, #1
  401236:	b2a4      	uxth	r4, r4
  401238:	b1d9      	cbz	r1, 401272 <sd_mmc_spi_start_write_blocks+0x56>
		sd_mmc_spi_start_write_block();
  40123a:	47c0      	blx	r8
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  40123c:	8832      	ldrh	r2, [r6, #0]
  40123e:	eb09 0105 	add.w	r1, r9, r5
  401242:	4638      	mov	r0, r7
  401244:	4b10      	ldr	r3, [pc, #64]	; (401288 <sd_mmc_spi_start_write_blocks+0x6c>)
  401246:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
  401248:	8831      	ldrh	r1, [r6, #0]
  40124a:	440d      	add	r5, r1
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  40124c:	4a0f      	ldr	r2, [pc, #60]	; (40128c <sd_mmc_spi_start_write_blocks+0x70>)
  40124e:	6813      	ldr	r3, [r2, #0]
  401250:	440b      	add	r3, r1
  401252:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
  401254:	4b0e      	ldr	r3, [pc, #56]	; (401290 <sd_mmc_spi_start_write_blocks+0x74>)
  401256:	4798      	blx	r3
  401258:	4603      	mov	r3, r0
  40125a:	b158      	cbz	r0, 401274 <sd_mmc_spi_start_write_blocks+0x58>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
  40125c:	2c00      	cmp	r4, #0
  40125e:	d0e8      	beq.n	401232 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
  401260:	4b0c      	ldr	r3, [pc, #48]	; (401294 <sd_mmc_spi_start_write_blocks+0x78>)
  401262:	4798      	blx	r3
  401264:	4603      	mov	r3, r0
  401266:	2800      	cmp	r0, #0
  401268:	d1e3      	bne.n	401232 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  40126a:	2105      	movs	r1, #5
  40126c:	4a03      	ldr	r2, [pc, #12]	; (40127c <sd_mmc_spi_start_write_blocks+0x60>)
  40126e:	7011      	strb	r1, [r2, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
  401270:	e000      	b.n	401274 <sd_mmc_spi_start_write_blocks+0x58>
			}
		}
	}
	return true;
  401272:	2301      	movs	r3, #1
}
  401274:	4618      	mov	r0, r3
  401276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40127a:	bf00      	nop
  40127c:	20000aa0 	.word	0x20000aa0
  401280:	20000a9a 	.word	0x20000a9a
  401284:	40008400 	.word	0x40008400
  401288:	004014ad 	.word	0x004014ad
  40128c:	20000aa8 	.word	0x20000aa8
  401290:	00400e45 	.word	0x00400e45
  401294:	00400d15 	.word	0x00400d15
  401298:	00400cd1 	.word	0x00400cd1

0040129c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
  40129c:	b508      	push	{r3, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
  40129e:	4b06      	ldr	r3, [pc, #24]	; (4012b8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
  4012a0:	4798      	blx	r3
  4012a2:	b928      	cbnz	r0, 4012b0 <sd_mmc_spi_wait_end_of_write_blocks+0x14>
  4012a4:	4603      	mov	r3, r0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  4012a6:	2105      	movs	r1, #5
  4012a8:	4a04      	ldr	r2, [pc, #16]	; (4012bc <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
  4012aa:	7011      	strb	r1, [r2, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
  4012ac:	4618      	mov	r0, r3
  4012ae:	bd08      	pop	{r3, pc}
	return sd_mmc_spi_stop_multiwrite_block();
  4012b0:	4b03      	ldr	r3, [pc, #12]	; (4012c0 <sd_mmc_spi_wait_end_of_write_blocks+0x24>)
  4012b2:	4798      	blx	r3
  4012b4:	4603      	mov	r3, r0
  4012b6:	e7f9      	b.n	4012ac <sd_mmc_spi_wait_end_of_write_blocks+0x10>
  4012b8:	00400d15 	.word	0x00400d15
  4012bc:	20000aa0 	.word	0x20000aa0
  4012c0:	00400d6d 	.word	0x00400d6d

004012c4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4012c4:	b510      	push	{r4, lr}
  4012c6:	b0a2      	sub	sp, #136	; 0x88
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4012c8:	4818      	ldr	r0, [pc, #96]	; (40132c <sysclk_init+0x68>)
  4012ca:	4b19      	ldr	r3, [pc, #100]	; (401330 <sysclk_init+0x6c>)
  4012cc:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4012ce:	2000      	movs	r0, #0
  4012d0:	4b18      	ldr	r3, [pc, #96]	; (401334 <sysclk_init+0x70>)
  4012d2:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4012d4:	4c18      	ldr	r4, [pc, #96]	; (401338 <sysclk_init+0x74>)
  4012d6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4012d8:	2800      	cmp	r0, #0
  4012da:	d0fc      	beq.n	4012d6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4012dc:	4b17      	ldr	r3, [pc, #92]	; (40133c <sysclk_init+0x78>)
  4012de:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4012e0:	4a17      	ldr	r2, [pc, #92]	; (401340 <sysclk_init+0x7c>)
  4012e2:	4b18      	ldr	r3, [pc, #96]	; (401344 <sysclk_init+0x80>)
  4012e4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4012e6:	4c18      	ldr	r4, [pc, #96]	; (401348 <sysclk_init+0x84>)
  4012e8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4012ea:	2800      	cmp	r0, #0
  4012ec:	d0fc      	beq.n	4012e8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4012ee:	2000      	movs	r0, #0
  4012f0:	4b16      	ldr	r3, [pc, #88]	; (40134c <sysclk_init+0x88>)
  4012f2:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4012f4:	4b16      	ldr	r3, [pc, #88]	; (401350 <sysclk_init+0x8c>)
  4012f6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4012f8:	4816      	ldr	r0, [pc, #88]	; (401354 <sysclk_init+0x90>)
  4012fa:	4b0d      	ldr	r3, [pc, #52]	; (401330 <sysclk_init+0x6c>)
  4012fc:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4012fe:	4b16      	ldr	r3, [pc, #88]	; (401358 <sysclk_init+0x94>)
  401300:	681a      	ldr	r2, [r3, #0]
  401302:	4b16      	ldr	r3, [pc, #88]	; (40135c <sysclk_init+0x98>)
  401304:	4413      	add	r3, r2
  401306:	4a16      	ldr	r2, [pc, #88]	; (401360 <sysclk_init+0x9c>)
  401308:	4293      	cmp	r3, r2
  40130a:	d901      	bls.n	401310 <sysclk_init+0x4c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40130c:	b022      	add	sp, #136	; 0x88
  40130e:	bd10      	pop	{r4, pc}
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  401310:	2320      	movs	r3, #32
  401312:	9300      	str	r3, [sp, #0]
  401314:	ab02      	add	r3, sp, #8
  401316:	220f      	movs	r2, #15
  401318:	210e      	movs	r1, #14
  40131a:	4812      	ldr	r0, [pc, #72]	; (401364 <sysclk_init+0xa0>)
  40131c:	4c12      	ldr	r4, [pc, #72]	; (401368 <sysclk_init+0xa4>)
  40131e:	47a0      	blx	r4
		supc_set_regulator_trim_user(SUPC, trim_value);
  401320:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
  401324:	4811      	ldr	r0, [pc, #68]	; (40136c <sysclk_init+0xa8>)
  401326:	4b12      	ldr	r3, [pc, #72]	; (401370 <sysclk_init+0xac>)
  401328:	4798      	blx	r3
}
  40132a:	e7ef      	b.n	40130c <sysclk_init+0x48>
  40132c:	07270e00 	.word	0x07270e00
  401330:	00401f55 	.word	0x00401f55
  401334:	00401965 	.word	0x00401965
  401338:	00401989 	.word	0x00401989
  40133c:	004019a9 	.word	0x004019a9
  401340:	0e4d3f01 	.word	0x0e4d3f01
  401344:	400e0400 	.word	0x400e0400
  401348:	004019b5 	.word	0x004019b5
  40134c:	00401901 	.word	0x00401901
  401350:	00401e6d 	.word	0x00401e6d
  401354:	07270000 	.word	0x07270000
  401358:	200000bc 	.word	0x200000bc
  40135c:	f9bdd3c0 	.word	0xf9bdd3c0
  401360:	01c9c380 	.word	0x01c9c380
  401364:	400e0a00 	.word	0x400e0a00
  401368:	2000000d 	.word	0x2000000d
  40136c:	400e1410 	.word	0x400e1410
  401370:	00401c63 	.word	0x00401c63

00401374 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  401374:	b538      	push	{r3, r4, r5, lr}
  401376:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
  401378:	4d13      	ldr	r5, [pc, #76]	; (4013c8 <spi_master_init+0x54>)
  40137a:	4628      	mov	r0, r5
  40137c:	4b13      	ldr	r3, [pc, #76]	; (4013cc <spi_master_init+0x58>)
  40137e:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  401380:	2102      	movs	r1, #2
  401382:	4628      	mov	r0, r5
  401384:	4b12      	ldr	r3, [pc, #72]	; (4013d0 <spi_master_init+0x5c>)
  401386:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  401388:	2380      	movs	r3, #128	; 0x80
  40138a:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40138c:	6863      	ldr	r3, [r4, #4]
  40138e:	f043 0301 	orr.w	r3, r3, #1
  401392:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401394:	6863      	ldr	r3, [r4, #4]
  401396:	f043 0310 	orr.w	r3, r3, #16
  40139a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40139c:	6863      	ldr	r3, [r4, #4]
  40139e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4013a2:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4013a4:	2100      	movs	r1, #0
  4013a6:	4620      	mov	r0, r4
  4013a8:	4b0a      	ldr	r3, [pc, #40]	; (4013d4 <spi_master_init+0x60>)
  4013aa:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4013ac:	6863      	ldr	r3, [r4, #4]
  4013ae:	f023 0302 	bic.w	r3, r3, #2
  4013b2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4013b4:	6863      	ldr	r3, [r4, #4]
  4013b6:	f023 0304 	bic.w	r3, r3, #4
  4013ba:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4013bc:	2100      	movs	r1, #0
  4013be:	4620      	mov	r0, r4
  4013c0:	4b05      	ldr	r3, [pc, #20]	; (4013d8 <spi_master_init+0x64>)
  4013c2:	4798      	blx	r3
  4013c4:	bd38      	pop	{r3, r4, r5, pc}
  4013c6:	bf00      	nop
  4013c8:	40008000 	.word	0x40008000
  4013cc:	00401771 	.word	0x00401771
  4013d0:	004018fd 	.word	0x004018fd
  4013d4:	00401b49 	.word	0x00401b49
  4013d8:	00401b5f 	.word	0x00401b5f

004013dc <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013e0:	4604      	mov	r4, r0
  4013e2:	460d      	mov	r5, r1
  4013e4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4013e6:	4915      	ldr	r1, [pc, #84]	; (40143c <spi_master_setup_device+0x60>)
  4013e8:	4618      	mov	r0, r3
  4013ea:	4b15      	ldr	r3, [pc, #84]	; (401440 <spi_master_setup_device+0x64>)
  4013ec:	4798      	blx	r3
  4013ee:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4013f0:	2300      	movs	r3, #0
  4013f2:	461a      	mov	r2, r3
  4013f4:	6829      	ldr	r1, [r5, #0]
  4013f6:	4620      	mov	r0, r4
  4013f8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 401458 <spi_master_setup_device+0x7c>
  4013fc:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4013fe:	2208      	movs	r2, #8
  401400:	6829      	ldr	r1, [r5, #0]
  401402:	4620      	mov	r0, r4
  401404:	4b0f      	ldr	r3, [pc, #60]	; (401444 <spi_master_setup_device+0x68>)
  401406:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  401408:	b2fa      	uxtb	r2, r7
  40140a:	6829      	ldr	r1, [r5, #0]
  40140c:	4620      	mov	r0, r4
  40140e:	4b0e      	ldr	r3, [pc, #56]	; (401448 <spi_master_setup_device+0x6c>)
  401410:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  401412:	2208      	movs	r2, #8
  401414:	6829      	ldr	r1, [r5, #0]
  401416:	4620      	mov	r0, r4
  401418:	4b0c      	ldr	r3, [pc, #48]	; (40144c <spi_master_setup_device+0x70>)
  40141a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40141c:	0872      	lsrs	r2, r6, #1
  40141e:	6829      	ldr	r1, [r5, #0]
  401420:	4620      	mov	r0, r4
  401422:	4b0b      	ldr	r3, [pc, #44]	; (401450 <spi_master_setup_device+0x74>)
  401424:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  401426:	f086 0201 	eor.w	r2, r6, #1
  40142a:	f002 0201 	and.w	r2, r2, #1
  40142e:	6829      	ldr	r1, [r5, #0]
  401430:	4620      	mov	r0, r4
  401432:	4b08      	ldr	r3, [pc, #32]	; (401454 <spi_master_setup_device+0x78>)
  401434:	4798      	blx	r3
  401436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40143a:	bf00      	nop
  40143c:	07270000 	.word	0x07270000
  401440:	00401c07 	.word	0x00401c07
  401444:	00401bf3 	.word	0x00401bf3
  401448:	00401c1d 	.word	0x00401c1d
  40144c:	00401bad 	.word	0x00401bad
  401450:	00401b71 	.word	0x00401b71
  401454:	00401b8f 	.word	0x00401b8f
  401458:	00401c45 	.word	0x00401c45

0040145c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40145c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40145e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  401460:	f013 0f04 	tst.w	r3, #4
  401464:	d006      	beq.n	401474 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  401466:	6809      	ldr	r1, [r1, #0]
  401468:	290f      	cmp	r1, #15
  40146a:	d900      	bls.n	40146e <spi_select_device+0x12>
  40146c:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40146e:	4b06      	ldr	r3, [pc, #24]	; (401488 <spi_select_device+0x2c>)
  401470:	4798      	blx	r3
  401472:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  401474:	6809      	ldr	r1, [r1, #0]
  401476:	2903      	cmp	r1, #3
  401478:	d8f8      	bhi.n	40146c <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40147a:	2301      	movs	r3, #1
  40147c:	fa03 f101 	lsl.w	r1, r3, r1
  401480:	43c9      	mvns	r1, r1
  401482:	4b01      	ldr	r3, [pc, #4]	; (401488 <spi_select_device+0x2c>)
  401484:	4798      	blx	r3
		}
	}
}
  401486:	e7f1      	b.n	40146c <spi_select_device+0x10>
  401488:	00401b49 	.word	0x00401b49

0040148c <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  40148c:	b510      	push	{r4, lr}
  40148e:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401490:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  401492:	f413 7f00 	tst.w	r3, #512	; 0x200
  401496:	d0fb      	beq.n	401490 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  401498:	210f      	movs	r1, #15
  40149a:	4620      	mov	r0, r4
  40149c:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <spi_deselect_device+0x1c>)
  40149e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4014a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4014a4:	6023      	str	r3, [r4, #0]
  4014a6:	bd10      	pop	{r4, pc}
  4014a8:	00401b49 	.word	0x00401b49

004014ac <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4014ac:	b11a      	cbz	r2, 4014b6 <spi_write_packet+0xa>
{
  4014ae:	b410      	push	{r4}
  4014b0:	460c      	mov	r4, r1
  4014b2:	4411      	add	r1, r2
  4014b4:	e006      	b.n	4014c4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4014b6:	2000      	movs	r0, #0
  4014b8:	4770      	bx	lr
		val = data[i];
  4014ba:	f814 3b01 	ldrb.w	r3, [r4], #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4014be:	60c3      	str	r3, [r0, #12]
	while (len) {
  4014c0:	42a1      	cmp	r1, r4
  4014c2:	d00c      	beq.n	4014de <spi_write_packet+0x32>
{
  4014c4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4014c8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4014ca:	f012 0f02 	tst.w	r2, #2
  4014ce:	d1f4      	bne.n	4014ba <spi_write_packet+0xe>
			if (!timeout--) {
  4014d0:	3b01      	subs	r3, #1
  4014d2:	d1f9      	bne.n	4014c8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4014d4:	f06f 0002 	mvn.w	r0, #2
}
  4014d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014dc:	4770      	bx	lr
	return STATUS_OK;
  4014de:	2000      	movs	r0, #0
  4014e0:	e7fa      	b.n	4014d8 <spi_write_packet+0x2c>

004014e2 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4014e2:	b13a      	cbz	r2, 4014f4 <spi_read_packet+0x12>
{
  4014e4:	b470      	push	{r4, r5, r6}
  4014e6:	4615      	mov	r5, r2
  4014e8:	460c      	mov	r4, r1
  4014ea:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4014ec:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4014ee:	f240 2101 	movw	r1, #513	; 0x201
  4014f2:	e012      	b.n	40151a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4014f4:	2000      	movs	r0, #0
  4014f6:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4014f8:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  4014fa:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4014fe:	6902      	ldr	r2, [r0, #16]
  401500:	ea31 0202 	bics.w	r2, r1, r2
  401504:	d004      	beq.n	401510 <spi_read_packet+0x2e>
			if (!timeout--) {
  401506:	3b01      	subs	r3, #1
  401508:	d1f9      	bne.n	4014fe <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  40150a:	f06f 0002 	mvn.w	r0, #2
  40150e:	e00e      	b.n	40152e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  401510:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  401512:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  401516:	42a5      	cmp	r5, r4
  401518:	d00b      	beq.n	401532 <spi_read_packet+0x50>
{
  40151a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  40151e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  401520:	f012 0f02 	tst.w	r2, #2
  401524:	d1e8      	bne.n	4014f8 <spi_read_packet+0x16>
			if (!timeout--) {
  401526:	3b01      	subs	r3, #1
  401528:	d1f9      	bne.n	40151e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  40152a:	f06f 0002 	mvn.w	r0, #2
}
  40152e:	bc70      	pop	{r4, r5, r6}
  401530:	4770      	bx	lr
	return STATUS_OK;
  401532:	2000      	movs	r0, #0
  401534:	e7fb      	b.n	40152e <spi_read_packet+0x4c>
	...

00401538 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401538:	b108      	cbz	r0, 40153e <mem_test_unit_ready+0x6>
  40153a:	2001      	movs	r0, #1
  40153c:	4770      	bx	lr
{
  40153e:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401540:	4b01      	ldr	r3, [pc, #4]	; (401548 <mem_test_unit_ready+0x10>)
  401542:	4798      	blx	r3
  401544:	bd08      	pop	{r3, pc}
  401546:	bf00      	nop
  401548:	00400c31 	.word	0x00400c31

0040154c <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  40154c:	b108      	cbz	r0, 401552 <mem_read_capacity+0x6>
  40154e:	2001      	movs	r0, #1
  401550:	4770      	bx	lr
{
  401552:	b508      	push	{r3, lr}
  401554:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401556:	4b01      	ldr	r3, [pc, #4]	; (40155c <mem_read_capacity+0x10>)
  401558:	4798      	blx	r3
  40155a:	bd08      	pop	{r3, pc}
  40155c:	00400c61 	.word	0x00400c61

00401560 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  401560:	fab0 f080 	clz	r0, r0
  401564:	0940      	lsrs	r0, r0, #5
  401566:	4770      	bx	lr

00401568 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401568:	b108      	cbz	r0, 40156e <mem_wr_protect+0x6>
  40156a:	2001      	movs	r0, #1
  40156c:	4770      	bx	lr
{
  40156e:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401570:	4b01      	ldr	r3, [pc, #4]	; (401578 <mem_wr_protect+0x10>)
  401572:	4798      	blx	r3
  401574:	bd08      	pop	{r3, pc}
  401576:	bf00      	nop
  401578:	00400c71 	.word	0x00400c71

0040157c <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  40157c:	b108      	cbz	r0, 401582 <memory_2_ram+0x6>
  40157e:	2001      	movs	r0, #1
  401580:	4770      	bx	lr
{
  401582:	b508      	push	{r3, lr}
  401584:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401586:	4611      	mov	r1, r2
  401588:	4b01      	ldr	r3, [pc, #4]	; (401590 <memory_2_ram+0x14>)
  40158a:	4798      	blx	r3
  40158c:	bd08      	pop	{r3, pc}
  40158e:	bf00      	nop
  401590:	00400cbd 	.word	0x00400cbd

00401594 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401598:	b980      	cbnz	r0, 4015bc <_read+0x28>
  40159a:	460c      	mov	r4, r1
  40159c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40159e:	2a00      	cmp	r2, #0
  4015a0:	dd0f      	ble.n	4015c2 <_read+0x2e>
  4015a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4015a4:	4e08      	ldr	r6, [pc, #32]	; (4015c8 <_read+0x34>)
  4015a6:	4d09      	ldr	r5, [pc, #36]	; (4015cc <_read+0x38>)
  4015a8:	6830      	ldr	r0, [r6, #0]
  4015aa:	4621      	mov	r1, r4
  4015ac:	682b      	ldr	r3, [r5, #0]
  4015ae:	4798      	blx	r3
		ptr++;
  4015b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4015b2:	42bc      	cmp	r4, r7
  4015b4:	d1f8      	bne.n	4015a8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4015b6:	4640      	mov	r0, r8
  4015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4015bc:	f04f 38ff 	mov.w	r8, #4294967295
  4015c0:	e7f9      	b.n	4015b6 <_read+0x22>
	for (; len > 0; --len) {
  4015c2:	4680      	mov	r8, r0
  4015c4:	e7f7      	b.n	4015b6 <_read+0x22>
  4015c6:	bf00      	nop
  4015c8:	20000b1c 	.word	0x20000b1c
  4015cc:	20000b14 	.word	0x20000b14

004015d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4015d0:	3801      	subs	r0, #1
  4015d2:	2802      	cmp	r0, #2
  4015d4:	d815      	bhi.n	401602 <_write+0x32>
{
  4015d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4015da:	460e      	mov	r6, r1
  4015dc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4015de:	b19a      	cbz	r2, 401608 <_write+0x38>
  4015e0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4015e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40161c <_write+0x4c>
  4015e6:	4f0c      	ldr	r7, [pc, #48]	; (401618 <_write+0x48>)
  4015e8:	f8d8 0000 	ldr.w	r0, [r8]
  4015ec:	f815 1b01 	ldrb.w	r1, [r5], #1
  4015f0:	683b      	ldr	r3, [r7, #0]
  4015f2:	4798      	blx	r3
  4015f4:	2800      	cmp	r0, #0
  4015f6:	db0a      	blt.n	40160e <_write+0x3e>
  4015f8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4015fa:	3c01      	subs	r4, #1
  4015fc:	d1f4      	bne.n	4015e8 <_write+0x18>
  4015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401602:	f04f 30ff 	mov.w	r0, #4294967295
  401606:	4770      	bx	lr
	for (; len != 0; --len) {
  401608:	4610      	mov	r0, r2
  40160a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40160e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401616:	bf00      	nop
  401618:	20000b18 	.word	0x20000b18
  40161c:	20000b1c 	.word	0x20000b1c

00401620 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
  401620:	b538      	push	{r3, r4, r5, lr}

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  401622:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  401626:	4b4e      	ldr	r3, [pc, #312]	; (401760 <system_board_init+0x140>)
  401628:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40162a:	200b      	movs	r0, #11
  40162c:	4d4d      	ldr	r5, [pc, #308]	; (401764 <system_board_init+0x144>)
  40162e:	47a8      	blx	r5
  401630:	200c      	movs	r0, #12
  401632:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401634:	4b4c      	ldr	r3, [pc, #304]	; (401768 <system_board_init+0x148>)
  401636:	2240      	movs	r2, #64	; 0x40
  401638:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40163a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40163e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401640:	2204      	movs	r2, #4
  401642:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401644:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401648:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40164a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40164e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401650:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401658:	f022 0204 	bic.w	r2, r2, #4
  40165c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40165e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401660:	f022 0204 	bic.w	r2, r2, #4
  401664:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401666:	2202      	movs	r2, #2
  401668:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40166a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40166c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401670:	493e      	ldr	r1, [pc, #248]	; (40176c <system_board_init+0x14c>)
  401672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401676:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401678:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40167a:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40167e:	630c      	str	r4, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401680:	610c      	str	r4, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401682:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401686:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40168a:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40168c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401690:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401692:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401694:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401698:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40169a:	4308      	orrs	r0, r1
  40169c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40169e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4016a0:	f020 50c0 	bic.w	r0, r0, #402653184	; 0x18000000
  4016a4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016a6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4016ac:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016ae:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016b2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016b4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016b6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016ba:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4016bc:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  4016c0:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4016c2:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4016c4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  4016c8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016ca:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4016cc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016d2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016d4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016da:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4016dc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4016e0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4016e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4016e4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4016e8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016ea:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4016ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4016f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401700:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  401704:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401706:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401708:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40170c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40170e:	605a      	str	r2, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401710:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401714:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401716:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40171a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40171c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401720:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401722:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40172a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  40172e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401730:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401732:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401736:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_PUDR = mask;
  401738:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40173c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40173e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401742:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401744:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40174a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40174c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401750:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401752:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401754:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401758:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40175a:	605a      	str	r2, [r3, #4]
  40175c:	bd38      	pop	{r3, r4, r5, pc}
  40175e:	bf00      	nop
  401760:	400e1450 	.word	0x400e1450
  401764:	004019c5 	.word	0x004019c5
  401768:	400e0e00 	.word	0x400e0e00
  40176c:	400e1000 	.word	0x400e1000

00401770 <flexcom_enable>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401770:	4b54      	ldr	r3, [pc, #336]	; (4018c4 <flexcom_enable+0x154>)
  401772:	781b      	ldrb	r3, [r3, #0]
  401774:	2bff      	cmp	r3, #255	; 0xff
  401776:	d034      	beq.n	4017e2 <flexcom_enable+0x72>
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  401778:	b500      	push	{lr}
  40177a:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40177c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401780:	fab3 f383 	clz	r3, r3
  401784:	095b      	lsrs	r3, r3, #5
  401786:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401788:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40178a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40178e:	2200      	movs	r2, #0
  401790:	4b4d      	ldr	r3, [pc, #308]	; (4018c8 <flexcom_enable+0x158>)
  401792:	701a      	strb	r2, [r3, #0]
	return flags;
  401794:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401796:	4a4b      	ldr	r2, [pc, #300]	; (4018c4 <flexcom_enable+0x154>)
  401798:	7813      	ldrb	r3, [r2, #0]
  40179a:	3301      	adds	r3, #1
  40179c:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40179e:	b129      	cbz	r1, 4017ac <flexcom_enable+0x3c>
		cpu_irq_enable();
  4017a0:	2201      	movs	r2, #1
  4017a2:	4b49      	ldr	r3, [pc, #292]	; (4018c8 <flexcom_enable+0x158>)
  4017a4:	701a      	strb	r2, [r3, #0]
  4017a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017aa:	b662      	cpsie	i
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  4017ac:	4a47      	ldr	r2, [pc, #284]	; (4018cc <flexcom_enable+0x15c>)
  4017ae:	4290      	cmp	r0, r2
  4017b0:	d018      	beq.n	4017e4 <flexcom_enable+0x74>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  4017b2:	4a47      	ldr	r2, [pc, #284]	; (4018d0 <flexcom_enable+0x160>)
  4017b4:	4290      	cmp	r0, r2
  4017b6:	d023      	beq.n	401800 <flexcom_enable+0x90>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  4017b8:	4a46      	ldr	r2, [pc, #280]	; (4018d4 <flexcom_enable+0x164>)
  4017ba:	4290      	cmp	r0, r2
  4017bc:	d02e      	beq.n	40181c <flexcom_enable+0xac>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  4017be:	4a46      	ldr	r2, [pc, #280]	; (4018d8 <flexcom_enable+0x168>)
  4017c0:	4290      	cmp	r0, r2
  4017c2:	d039      	beq.n	401838 <flexcom_enable+0xc8>
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_7);
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  4017c4:	4a45      	ldr	r2, [pc, #276]	; (4018dc <flexcom_enable+0x16c>)
  4017c6:	4290      	cmp	r0, r2
  4017c8:	d044      	beq.n	401854 <flexcom_enable+0xe4>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  4017ca:	4a45      	ldr	r2, [pc, #276]	; (4018e0 <flexcom_enable+0x170>)
  4017cc:	4290      	cmp	r0, r2
  4017ce:	d04f      	beq.n	401870 <flexcom_enable+0x100>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  4017d0:	4a44      	ldr	r2, [pc, #272]	; (4018e4 <flexcom_enable+0x174>)
  4017d2:	4290      	cmp	r0, r2
  4017d4:	d05a      	beq.n	40188c <flexcom_enable+0x11c>
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
		pmc_enable_pck(PMC_PCK_6);
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  4017d6:	4a44      	ldr	r2, [pc, #272]	; (4018e8 <flexcom_enable+0x178>)
  4017d8:	4290      	cmp	r0, r2
  4017da:	d065      	beq.n	4018a8 <flexcom_enable+0x138>
	} else
#endif
	{
		Assert(false);
	}
}
  4017dc:	b003      	add	sp, #12
  4017de:	f85d fb04 	ldr.w	pc, [sp], #4
  4017e2:	e7fe      	b.n	4017e2 <flexcom_enable+0x72>
  4017e4:	2007      	movs	r0, #7
  4017e6:	4b41      	ldr	r3, [pc, #260]	; (4018ec <flexcom_enable+0x17c>)
  4017e8:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  4017ea:	2007      	movs	r0, #7
  4017ec:	4b40      	ldr	r3, [pc, #256]	; (4018f0 <flexcom_enable+0x180>)
  4017ee:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  4017f0:	2100      	movs	r1, #0
  4017f2:	2007      	movs	r0, #7
  4017f4:	4b3f      	ldr	r3, [pc, #252]	; (4018f4 <flexcom_enable+0x184>)
  4017f6:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  4017f8:	2007      	movs	r0, #7
  4017fa:	4b3f      	ldr	r3, [pc, #252]	; (4018f8 <flexcom_enable+0x188>)
  4017fc:	4798      	blx	r3
  4017fe:	e7ed      	b.n	4017dc <flexcom_enable+0x6c>
  401800:	2016      	movs	r0, #22
  401802:	4b3a      	ldr	r3, [pc, #232]	; (4018ec <flexcom_enable+0x17c>)
  401804:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  401806:	2007      	movs	r0, #7
  401808:	4b39      	ldr	r3, [pc, #228]	; (4018f0 <flexcom_enable+0x180>)
  40180a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40180c:	2100      	movs	r1, #0
  40180e:	2007      	movs	r0, #7
  401810:	4b38      	ldr	r3, [pc, #224]	; (4018f4 <flexcom_enable+0x184>)
  401812:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  401814:	2007      	movs	r0, #7
  401816:	4b38      	ldr	r3, [pc, #224]	; (4018f8 <flexcom_enable+0x188>)
  401818:	4798      	blx	r3
  40181a:	e7df      	b.n	4017dc <flexcom_enable+0x6c>
  40181c:	2015      	movs	r0, #21
  40181e:	4b33      	ldr	r3, [pc, #204]	; (4018ec <flexcom_enable+0x17c>)
  401820:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  401822:	2007      	movs	r0, #7
  401824:	4b32      	ldr	r3, [pc, #200]	; (4018f0 <flexcom_enable+0x180>)
  401826:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  401828:	2100      	movs	r1, #0
  40182a:	2007      	movs	r0, #7
  40182c:	4b31      	ldr	r3, [pc, #196]	; (4018f4 <flexcom_enable+0x184>)
  40182e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  401830:	2007      	movs	r0, #7
  401832:	4b31      	ldr	r3, [pc, #196]	; (4018f8 <flexcom_enable+0x188>)
  401834:	4798      	blx	r3
  401836:	e7d1      	b.n	4017dc <flexcom_enable+0x6c>
  401838:	2014      	movs	r0, #20
  40183a:	4b2c      	ldr	r3, [pc, #176]	; (4018ec <flexcom_enable+0x17c>)
  40183c:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  40183e:	2007      	movs	r0, #7
  401840:	4b2b      	ldr	r3, [pc, #172]	; (4018f0 <flexcom_enable+0x180>)
  401842:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  401844:	2100      	movs	r1, #0
  401846:	2007      	movs	r0, #7
  401848:	4b2a      	ldr	r3, [pc, #168]	; (4018f4 <flexcom_enable+0x184>)
  40184a:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40184c:	2007      	movs	r0, #7
  40184e:	4b2a      	ldr	r3, [pc, #168]	; (4018f8 <flexcom_enable+0x188>)
  401850:	4798      	blx	r3
  401852:	e7c3      	b.n	4017dc <flexcom_enable+0x6c>
  401854:	2013      	movs	r0, #19
  401856:	4b25      	ldr	r3, [pc, #148]	; (4018ec <flexcom_enable+0x17c>)
  401858:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40185a:	2006      	movs	r0, #6
  40185c:	4b24      	ldr	r3, [pc, #144]	; (4018f0 <flexcom_enable+0x180>)
  40185e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  401860:	2100      	movs	r1, #0
  401862:	2006      	movs	r0, #6
  401864:	4b23      	ldr	r3, [pc, #140]	; (4018f4 <flexcom_enable+0x184>)
  401866:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  401868:	2006      	movs	r0, #6
  40186a:	4b23      	ldr	r3, [pc, #140]	; (4018f8 <flexcom_enable+0x188>)
  40186c:	4798      	blx	r3
  40186e:	e7b5      	b.n	4017dc <flexcom_enable+0x6c>
  401870:	200e      	movs	r0, #14
  401872:	4b1e      	ldr	r3, [pc, #120]	; (4018ec <flexcom_enable+0x17c>)
  401874:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  401876:	2006      	movs	r0, #6
  401878:	4b1d      	ldr	r3, [pc, #116]	; (4018f0 <flexcom_enable+0x180>)
  40187a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40187c:	2100      	movs	r1, #0
  40187e:	2006      	movs	r0, #6
  401880:	4b1c      	ldr	r3, [pc, #112]	; (4018f4 <flexcom_enable+0x184>)
  401882:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  401884:	2006      	movs	r0, #6
  401886:	4b1c      	ldr	r3, [pc, #112]	; (4018f8 <flexcom_enable+0x188>)
  401888:	4798      	blx	r3
  40188a:	e7a7      	b.n	4017dc <flexcom_enable+0x6c>
  40188c:	2009      	movs	r0, #9
  40188e:	4b17      	ldr	r3, [pc, #92]	; (4018ec <flexcom_enable+0x17c>)
  401890:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  401892:	2006      	movs	r0, #6
  401894:	4b16      	ldr	r3, [pc, #88]	; (4018f0 <flexcom_enable+0x180>)
  401896:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  401898:	2100      	movs	r1, #0
  40189a:	2006      	movs	r0, #6
  40189c:	4b15      	ldr	r3, [pc, #84]	; (4018f4 <flexcom_enable+0x184>)
  40189e:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4018a0:	2006      	movs	r0, #6
  4018a2:	4b15      	ldr	r3, [pc, #84]	; (4018f8 <flexcom_enable+0x188>)
  4018a4:	4798      	blx	r3
  4018a6:	e799      	b.n	4017dc <flexcom_enable+0x6c>
  4018a8:	2008      	movs	r0, #8
  4018aa:	4b10      	ldr	r3, [pc, #64]	; (4018ec <flexcom_enable+0x17c>)
  4018ac:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  4018ae:	2006      	movs	r0, #6
  4018b0:	4b0f      	ldr	r3, [pc, #60]	; (4018f0 <flexcom_enable+0x180>)
  4018b2:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4018b4:	2100      	movs	r1, #0
  4018b6:	2006      	movs	r0, #6
  4018b8:	4b0e      	ldr	r3, [pc, #56]	; (4018f4 <flexcom_enable+0x184>)
  4018ba:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4018bc:	2006      	movs	r0, #6
  4018be:	4b0e      	ldr	r3, [pc, #56]	; (4018f8 <flexcom_enable+0x188>)
  4018c0:	4798      	blx	r3
}
  4018c2:	e78b      	b.n	4017dc <flexcom_enable+0x6c>
  4018c4:	20000b0c 	.word	0x20000b0c
  4018c8:	200000b8 	.word	0x200000b8
  4018cc:	40034000 	.word	0x40034000
  4018d0:	40040000 	.word	0x40040000
  4018d4:	40008000 	.word	0x40008000
  4018d8:	4001c000 	.word	0x4001c000
  4018dc:	40018000 	.word	0x40018000
  4018e0:	40024000 	.word	0x40024000
  4018e4:	40020000 	.word	0x40020000
  4018e8:	4000c000 	.word	0x4000c000
  4018ec:	004019c5 	.word	0x004019c5
  4018f0:	00401a69 	.word	0x00401a69
  4018f4:	00401a19 	.word	0x00401a19
  4018f8:	00401a55 	.word	0x00401a55

004018fc <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  4018fc:	6001      	str	r1, [r0, #0]
  4018fe:	4770      	bx	lr

00401900 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401900:	4a17      	ldr	r2, [pc, #92]	; (401960 <pmc_switch_mck_to_pllack+0x60>)
  401902:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401908:	4318      	orrs	r0, r3
  40190a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40190c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40190e:	f013 0f08 	tst.w	r3, #8
  401912:	d10a      	bne.n	40192a <pmc_switch_mck_to_pllack+0x2a>
  401914:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401918:	4911      	ldr	r1, [pc, #68]	; (401960 <pmc_switch_mck_to_pllack+0x60>)
  40191a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40191c:	f012 0f08 	tst.w	r2, #8
  401920:	d103      	bne.n	40192a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401922:	3b01      	subs	r3, #1
  401924:	d1f9      	bne.n	40191a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401926:	2001      	movs	r0, #1
  401928:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40192a:	4a0d      	ldr	r2, [pc, #52]	; (401960 <pmc_switch_mck_to_pllack+0x60>)
  40192c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40192e:	f023 0303 	bic.w	r3, r3, #3
  401932:	f043 0302 	orr.w	r3, r3, #2
  401936:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401938:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40193a:	f013 0f08 	tst.w	r3, #8
  40193e:	d10a      	bne.n	401956 <pmc_switch_mck_to_pllack+0x56>
  401940:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401944:	4906      	ldr	r1, [pc, #24]	; (401960 <pmc_switch_mck_to_pllack+0x60>)
  401946:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401948:	f012 0f08 	tst.w	r2, #8
  40194c:	d105      	bne.n	40195a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40194e:	3b01      	subs	r3, #1
  401950:	d1f9      	bne.n	401946 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401952:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401954:	4770      	bx	lr
	return 0;
  401956:	2000      	movs	r0, #0
  401958:	4770      	bx	lr
  40195a:	2000      	movs	r0, #0
  40195c:	4770      	bx	lr
  40195e:	bf00      	nop
  401960:	400e0400 	.word	0x400e0400

00401964 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401964:	2801      	cmp	r0, #1
  401966:	d003      	beq.n	401970 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401968:	4a05      	ldr	r2, [pc, #20]	; (401980 <pmc_switch_sclk_to_32kxtal+0x1c>)
  40196a:	4b06      	ldr	r3, [pc, #24]	; (401984 <pmc_switch_sclk_to_32kxtal+0x20>)
  40196c:	601a      	str	r2, [r3, #0]
  40196e:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401970:	4a04      	ldr	r2, [pc, #16]	; (401984 <pmc_switch_sclk_to_32kxtal+0x20>)
  401972:	6893      	ldr	r3, [r2, #8]
  401974:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40197c:	6093      	str	r3, [r2, #8]
  40197e:	e7f3      	b.n	401968 <pmc_switch_sclk_to_32kxtal+0x4>
  401980:	a5000008 	.word	0xa5000008
  401984:	400e1410 	.word	0x400e1410

00401988 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401988:	4b05      	ldr	r3, [pc, #20]	; (4019a0 <pmc_osc_is_ready_32kxtal+0x18>)
  40198a:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40198c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401990:	bf1d      	ittte	ne
  401992:	4b04      	ldrne	r3, [pc, #16]	; (4019a4 <pmc_osc_is_ready_32kxtal+0x1c>)
  401994:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  401996:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  40199a:	2000      	moveq	r0, #0
}
  40199c:	4770      	bx	lr
  40199e:	bf00      	nop
  4019a0:	400e1410 	.word	0x400e1410
  4019a4:	400e0400 	.word	0x400e0400

004019a8 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  4019a8:	2200      	movs	r2, #0
  4019aa:	4b01      	ldr	r3, [pc, #4]	; (4019b0 <pmc_disable_pllack+0x8>)
  4019ac:	629a      	str	r2, [r3, #40]	; 0x28
  4019ae:	4770      	bx	lr
  4019b0:	400e0400 	.word	0x400e0400

004019b4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4019b4:	4b02      	ldr	r3, [pc, #8]	; (4019c0 <pmc_is_locked_pllack+0xc>)
  4019b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4019b8:	f000 0002 	and.w	r0, r0, #2
  4019bc:	4770      	bx	lr
  4019be:	bf00      	nop
  4019c0:	400e0400 	.word	0x400e0400

004019c4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4019c4:	2832      	cmp	r0, #50	; 0x32
  4019c6:	d81e      	bhi.n	401a06 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4019c8:	281f      	cmp	r0, #31
  4019ca:	d80c      	bhi.n	4019e6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4019cc:	4b11      	ldr	r3, [pc, #68]	; (401a14 <pmc_enable_periph_clk+0x50>)
  4019ce:	699a      	ldr	r2, [r3, #24]
  4019d0:	2301      	movs	r3, #1
  4019d2:	4083      	lsls	r3, r0
  4019d4:	4393      	bics	r3, r2
  4019d6:	d018      	beq.n	401a0a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4019d8:	2301      	movs	r3, #1
  4019da:	fa03 f000 	lsl.w	r0, r3, r0
  4019de:	4b0d      	ldr	r3, [pc, #52]	; (401a14 <pmc_enable_periph_clk+0x50>)
  4019e0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4019e2:	2000      	movs	r0, #0
  4019e4:	4770      	bx	lr
		ul_id -= 32;
  4019e6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4019e8:	4b0a      	ldr	r3, [pc, #40]	; (401a14 <pmc_enable_periph_clk+0x50>)
  4019ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4019ee:	2301      	movs	r3, #1
  4019f0:	4083      	lsls	r3, r0
  4019f2:	4393      	bics	r3, r2
  4019f4:	d00b      	beq.n	401a0e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4019f6:	2301      	movs	r3, #1
  4019f8:	fa03 f000 	lsl.w	r0, r3, r0
  4019fc:	4b05      	ldr	r3, [pc, #20]	; (401a14 <pmc_enable_periph_clk+0x50>)
  4019fe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401a02:	2000      	movs	r0, #0
  401a04:	4770      	bx	lr
		return 1;
  401a06:	2001      	movs	r0, #1
  401a08:	4770      	bx	lr
	return 0;
  401a0a:	2000      	movs	r0, #0
  401a0c:	4770      	bx	lr
  401a0e:	2000      	movs	r0, #0
}
  401a10:	4770      	bx	lr
  401a12:	bf00      	nop
  401a14:	400e0400 	.word	0x400e0400

00401a18 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  401a18:	f041 0104 	orr.w	r1, r1, #4
  401a1c:	4b0c      	ldr	r3, [pc, #48]	; (401a50 <pmc_switch_pck_to_mck+0x38>)
  401a1e:	f100 0210 	add.w	r2, r0, #16
  401a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401a26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  401a28:	f44f 7380 	mov.w	r3, #256	; 0x100
  401a2c:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  401a30:	4202      	tst	r2, r0
  401a32:	d109      	bne.n	401a48 <pmc_switch_pck_to_mck+0x30>
  401a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  401a38:	4905      	ldr	r1, [pc, #20]	; (401a50 <pmc_switch_pck_to_mck+0x38>)
  401a3a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  401a3c:	4202      	tst	r2, r0
  401a3e:	d105      	bne.n	401a4c <pmc_switch_pck_to_mck+0x34>
		if (ul_timeout == 0) {
  401a40:	3b01      	subs	r3, #1
  401a42:	d1fa      	bne.n	401a3a <pmc_switch_pck_to_mck+0x22>
			return 1;
  401a44:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401a46:	4770      	bx	lr
	return 0;
  401a48:	2000      	movs	r0, #0
  401a4a:	4770      	bx	lr
  401a4c:	2000      	movs	r0, #0
  401a4e:	4770      	bx	lr
  401a50:	400e0400 	.word	0x400e0400

00401a54 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  401a54:	f44f 7380 	mov.w	r3, #256	; 0x100
  401a58:	fa03 f000 	lsl.w	r0, r3, r0
  401a5c:	4b01      	ldr	r3, [pc, #4]	; (401a64 <pmc_enable_pck+0x10>)
  401a5e:	6018      	str	r0, [r3, #0]
  401a60:	4770      	bx	lr
  401a62:	bf00      	nop
  401a64:	400e0400 	.word	0x400e0400

00401a68 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  401a68:	f44f 7380 	mov.w	r3, #256	; 0x100
  401a6c:	fa03 f000 	lsl.w	r0, r3, r0
  401a70:	4b01      	ldr	r3, [pc, #4]	; (401a78 <pmc_disable_pck+0x10>)
  401a72:	6058      	str	r0, [r3, #4]
  401a74:	4770      	bx	lr
  401a76:	bf00      	nop
  401a78:	400e0400 	.word	0x400e0400

00401a7c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401a7c:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401a7e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401a80:	6884      	ldr	r4, [r0, #8]
  401a82:	42a5      	cmp	r5, r4
  401a84:	d003      	beq.n	401a8e <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401a86:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401a88:	6884      	ldr	r4, [r0, #8]
  401a8a:	42ac      	cmp	r4, r5
  401a8c:	d1fb      	bne.n	401a86 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401a8e:	b161      	cbz	r1, 401aaa <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401a90:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401a94:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401a98:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401a9c:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401aa0:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401aa4:	bf18      	it	ne
  401aa6:	300c      	addne	r0, #12
  401aa8:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401aaa:	b142      	cbz	r2, 401abe <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401aac:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401ab0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401ab4:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401ab8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401abc:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401abe:	b143      	cbz	r3, 401ad2 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401ac0:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401ac4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401ac8:	f004 040f 	and.w	r4, r4, #15
  401acc:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401ad0:	601c      	str	r4, [r3, #0]
	}
}
  401ad2:	bc30      	pop	{r4, r5}
  401ad4:	4770      	bx	lr

00401ad6 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401ad6:	b4f0      	push	{r4, r5, r6, r7}
  401ad8:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401ada:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401adc:	68c4      	ldr	r4, [r0, #12]
  401ade:	42a5      	cmp	r5, r4
  401ae0:	d003      	beq.n	401aea <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  401ae2:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401ae4:	68c4      	ldr	r4, [r0, #12]
  401ae6:	42ac      	cmp	r4, r5
  401ae8:	d1fb      	bne.n	401ae2 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  401aea:	b199      	cbz	r1, 401b14 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401aec:	f3c4 3003 	ubfx	r0, r4, #12, #4
  401af0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401af4:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401af8:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401afc:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401b00:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401b04:	f004 000f 	and.w	r0, r4, #15
  401b08:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401b0c:	2564      	movs	r5, #100	; 0x64
  401b0e:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  401b12:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  401b14:	b142      	cbz	r2, 401b28 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401b16:	f3c4 5000 	ubfx	r0, r4, #20, #1
  401b1a:	0081      	lsls	r1, r0, #2
  401b1c:	4408      	add	r0, r1
  401b1e:	f3c4 4103 	ubfx	r1, r4, #16, #4
  401b22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  401b26:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  401b28:	b143      	cbz	r3, 401b3c <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401b2a:	f3c4 7201 	ubfx	r2, r4, #28, #2
  401b2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401b32:	f3c4 6103 	ubfx	r1, r4, #24, #4
  401b36:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  401b3a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  401b3c:	b116      	cbz	r6, 401b44 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  401b3e:	f3c4 5442 	ubfx	r4, r4, #21, #3
  401b42:	6034      	str	r4, [r6, #0]
	}
}
  401b44:	bcf0      	pop	{r4, r5, r6, r7}
  401b46:	4770      	bx	lr

00401b48 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401b48:	6843      	ldr	r3, [r0, #4]
  401b4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  401b4e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401b50:	6843      	ldr	r3, [r0, #4]
  401b52:	0409      	lsls	r1, r1, #16
  401b54:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  401b58:	4319      	orrs	r1, r3
  401b5a:	6041      	str	r1, [r0, #4]
  401b5c:	4770      	bx	lr

00401b5e <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401b5e:	6843      	ldr	r3, [r0, #4]
  401b60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401b64:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401b66:	6843      	ldr	r3, [r0, #4]
  401b68:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401b6c:	6041      	str	r1, [r0, #4]
  401b6e:	4770      	bx	lr

00401b70 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401b70:	b932      	cbnz	r2, 401b80 <spi_set_clock_polarity+0x10>
  401b72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401b76:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b78:	f023 0301 	bic.w	r3, r3, #1
  401b7c:	6303      	str	r3, [r0, #48]	; 0x30
  401b7e:	4770      	bx	lr
  401b80:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401b84:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b86:	f043 0301 	orr.w	r3, r3, #1
  401b8a:	6303      	str	r3, [r0, #48]	; 0x30
  401b8c:	4770      	bx	lr

00401b8e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401b8e:	b932      	cbnz	r2, 401b9e <spi_set_clock_phase+0x10>
  401b90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401b94:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b96:	f023 0302 	bic.w	r3, r3, #2
  401b9a:	6303      	str	r3, [r0, #48]	; 0x30
  401b9c:	4770      	bx	lr
  401b9e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401ba2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ba4:	f043 0302 	orr.w	r3, r3, #2
  401ba8:	6303      	str	r3, [r0, #48]	; 0x30
  401baa:	4770      	bx	lr

00401bac <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401bac:	2a04      	cmp	r2, #4
  401bae:	d003      	beq.n	401bb8 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401bb0:	b16a      	cbz	r2, 401bce <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401bb2:	2a08      	cmp	r2, #8
  401bb4:	d016      	beq.n	401be4 <spi_configure_cs_behavior+0x38>
  401bb6:	4770      	bx	lr
  401bb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401bbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bbe:	f023 0308 	bic.w	r3, r3, #8
  401bc2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401bc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bc6:	f043 0304 	orr.w	r3, r3, #4
  401bca:	6303      	str	r3, [r0, #48]	; 0x30
  401bcc:	4770      	bx	lr
  401bce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401bd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bd4:	f023 0308 	bic.w	r3, r3, #8
  401bd8:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401bda:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bdc:	f023 0304 	bic.w	r3, r3, #4
  401be0:	6303      	str	r3, [r0, #48]	; 0x30
  401be2:	4770      	bx	lr
  401be4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401be8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bea:	f043 0308 	orr.w	r3, r3, #8
  401bee:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401bf0:	e7e1      	b.n	401bb6 <spi_configure_cs_behavior+0xa>

00401bf2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401bf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401bf6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401bfc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401bfe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c00:	431a      	orrs	r2, r3
  401c02:	630a      	str	r2, [r1, #48]	; 0x30
  401c04:	4770      	bx	lr

00401c06 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401c06:	1e43      	subs	r3, r0, #1
  401c08:	4419      	add	r1, r3
  401c0a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401c0e:	1e43      	subs	r3, r0, #1
  401c10:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401c12:	bf94      	ite	ls
  401c14:	b200      	sxthls	r0, r0
		return -1;
  401c16:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401c1a:	4770      	bx	lr

00401c1c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  401c1c:	b17a      	cbz	r2, 401c3e <spi_set_baudrate_div+0x22>
{
  401c1e:	b410      	push	{r4}
  401c20:	4614      	mov	r4, r2
  401c22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401c26:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401c2c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401c2e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401c30:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401c34:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401c36:	2000      	movs	r0, #0
}
  401c38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c3c:	4770      	bx	lr
        return -1;
  401c3e:	f04f 30ff 	mov.w	r0, #4294967295
  401c42:	4770      	bx	lr

00401c44 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401c44:	b410      	push	{r4}
  401c46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401c4a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401c4c:	b280      	uxth	r0, r0
  401c4e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401c50:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401c52:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401c5a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c60:	4770      	bx	lr

00401c62 <supc_set_regulator_trim_user>:
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  401c62:	69c3      	ldr	r3, [r0, #28]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  401c64:	0249      	lsls	r1, r1, #9
  401c66:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00
  401c6a:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
  401c6e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  401c72:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
		| ((value & 0xFu) << 9);
  401c76:	4319      	orrs	r1, r3
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  401c78:	61c1      	str	r1, [r0, #28]
  401c7a:	4770      	bx	lr

00401c7c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401c7c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401c7e:	010b      	lsls	r3, r1, #4
  401c80:	4293      	cmp	r3, r2
  401c82:	d914      	bls.n	401cae <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401c84:	00c9      	lsls	r1, r1, #3
  401c86:	084b      	lsrs	r3, r1, #1
  401c88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401c8c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401c90:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401c92:	1e5c      	subs	r4, r3, #1
  401c94:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401c98:	428c      	cmp	r4, r1
  401c9a:	d901      	bls.n	401ca0 <usart_set_async_baudrate+0x24>
		return 1;
  401c9c:	2001      	movs	r0, #1
  401c9e:	e017      	b.n	401cd0 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401ca0:	6841      	ldr	r1, [r0, #4]
  401ca2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401ca6:	6041      	str	r1, [r0, #4]
  401ca8:	e00c      	b.n	401cc4 <usart_set_async_baudrate+0x48>
		return 1;
  401caa:	2001      	movs	r0, #1
  401cac:	e010      	b.n	401cd0 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401cae:	0859      	lsrs	r1, r3, #1
  401cb0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401cb4:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401cb8:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401cba:	1e5c      	subs	r4, r3, #1
  401cbc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401cc0:	428c      	cmp	r4, r1
  401cc2:	d8f2      	bhi.n	401caa <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401cc4:	0412      	lsls	r2, r2, #16
  401cc6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401cca:	431a      	orrs	r2, r3
  401ccc:	6202      	str	r2, [r0, #32]

	return 0;
  401cce:	2000      	movs	r0, #0
}
  401cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cd4:	4770      	bx	lr
	...

00401cd8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401cd8:	4b08      	ldr	r3, [pc, #32]	; (401cfc <usart_reset+0x24>)
  401cda:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401cde:	2300      	movs	r3, #0
  401ce0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401ce2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401ce4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401ce6:	2388      	movs	r3, #136	; 0x88
  401ce8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401cea:	2324      	movs	r3, #36	; 0x24
  401cec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401cee:	f44f 7380 	mov.w	r3, #256	; 0x100
  401cf2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401cf8:	6003      	str	r3, [r0, #0]
  401cfa:	4770      	bx	lr
  401cfc:	55534100 	.word	0x55534100

00401d00 <usart_init_rs232>:
{
  401d00:	b570      	push	{r4, r5, r6, lr}
  401d02:	4605      	mov	r5, r0
  401d04:	460c      	mov	r4, r1
  401d06:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401d08:	4b0f      	ldr	r3, [pc, #60]	; (401d48 <usart_init_rs232+0x48>)
  401d0a:	4798      	blx	r3
	ul_reg_val = 0;
  401d0c:	2200      	movs	r2, #0
  401d0e:	4b0f      	ldr	r3, [pc, #60]	; (401d4c <usart_init_rs232+0x4c>)
  401d10:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401d12:	b1a4      	cbz	r4, 401d3e <usart_init_rs232+0x3e>
  401d14:	4632      	mov	r2, r6
  401d16:	6821      	ldr	r1, [r4, #0]
  401d18:	4628      	mov	r0, r5
  401d1a:	4b0d      	ldr	r3, [pc, #52]	; (401d50 <usart_init_rs232+0x50>)
  401d1c:	4798      	blx	r3
  401d1e:	4602      	mov	r2, r0
  401d20:	b978      	cbnz	r0, 401d42 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d22:	6863      	ldr	r3, [r4, #4]
  401d24:	68a1      	ldr	r1, [r4, #8]
  401d26:	430b      	orrs	r3, r1
  401d28:	6921      	ldr	r1, [r4, #16]
  401d2a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401d2c:	68e1      	ldr	r1, [r4, #12]
  401d2e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d30:	4906      	ldr	r1, [pc, #24]	; (401d4c <usart_init_rs232+0x4c>)
  401d32:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401d34:	6869      	ldr	r1, [r5, #4]
  401d36:	430b      	orrs	r3, r1
  401d38:	606b      	str	r3, [r5, #4]
}
  401d3a:	4610      	mov	r0, r2
  401d3c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401d3e:	2201      	movs	r2, #1
  401d40:	e7fb      	b.n	401d3a <usart_init_rs232+0x3a>
  401d42:	2201      	movs	r2, #1
  401d44:	e7f9      	b.n	401d3a <usart_init_rs232+0x3a>
  401d46:	bf00      	nop
  401d48:	00401cd9 	.word	0x00401cd9
  401d4c:	20000aac 	.word	0x20000aac
  401d50:	00401c7d 	.word	0x00401c7d

00401d54 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401d54:	2340      	movs	r3, #64	; 0x40
  401d56:	6003      	str	r3, [r0, #0]
  401d58:	4770      	bx	lr

00401d5a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401d5a:	2310      	movs	r3, #16
  401d5c:	6003      	str	r3, [r0, #0]
  401d5e:	4770      	bx	lr

00401d60 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401d60:	6943      	ldr	r3, [r0, #20]
  401d62:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
  401d66:	bf1d      	ittte	ne
  401d68:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401d6c:	61c1      	strne	r1, [r0, #28]
	return 0;
  401d6e:	2000      	movne	r0, #0
		return 1;
  401d70:	2001      	moveq	r0, #1
}
  401d72:	4770      	bx	lr

00401d74 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401d74:	6943      	ldr	r3, [r0, #20]
  401d76:	f013 0f01 	tst.w	r3, #1
  401d7a:	d005      	beq.n	401d88 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401d7c:	6983      	ldr	r3, [r0, #24]
  401d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401d82:	600b      	str	r3, [r1, #0]
	return 0;
  401d84:	2000      	movs	r0, #0
  401d86:	4770      	bx	lr
		return 1;
  401d88:	2001      	movs	r0, #1
}
  401d8a:	4770      	bx	lr

00401d8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d8c:	e7fe      	b.n	401d8c <Dummy_Handler>
	...

00401d90 <Reset_Handler>:
{
  401d90:	b500      	push	{lr}
  401d92:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401d94:	4b2a      	ldr	r3, [pc, #168]	; (401e40 <Reset_Handler+0xb0>)
  401d96:	4a2b      	ldr	r2, [pc, #172]	; (401e44 <Reset_Handler+0xb4>)
  401d98:	429a      	cmp	r2, r3
  401d9a:	d010      	beq.n	401dbe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401d9c:	4b2a      	ldr	r3, [pc, #168]	; (401e48 <Reset_Handler+0xb8>)
  401d9e:	4a28      	ldr	r2, [pc, #160]	; (401e40 <Reset_Handler+0xb0>)
  401da0:	429a      	cmp	r2, r3
  401da2:	d20c      	bcs.n	401dbe <Reset_Handler+0x2e>
  401da4:	3b01      	subs	r3, #1
  401da6:	1a9b      	subs	r3, r3, r2
  401da8:	f023 0303 	bic.w	r3, r3, #3
  401dac:	3304      	adds	r3, #4
  401dae:	4413      	add	r3, r2
  401db0:	4924      	ldr	r1, [pc, #144]	; (401e44 <Reset_Handler+0xb4>)
                        *pDest++ = *pSrc++;
  401db2:	f851 0b04 	ldr.w	r0, [r1], #4
  401db6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401dba:	429a      	cmp	r2, r3
  401dbc:	d1f9      	bne.n	401db2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401dbe:	4b23      	ldr	r3, [pc, #140]	; (401e4c <Reset_Handler+0xbc>)
  401dc0:	4a23      	ldr	r2, [pc, #140]	; (401e50 <Reset_Handler+0xc0>)
  401dc2:	429a      	cmp	r2, r3
  401dc4:	d20a      	bcs.n	401ddc <Reset_Handler+0x4c>
  401dc6:	3b01      	subs	r3, #1
  401dc8:	1a9b      	subs	r3, r3, r2
  401dca:	f023 0303 	bic.w	r3, r3, #3
  401dce:	3304      	adds	r3, #4
  401dd0:	4413      	add	r3, r2
                *pDest++ = 0;
  401dd2:	2100      	movs	r1, #0
  401dd4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401dd8:	4293      	cmp	r3, r2
  401dda:	d1fb      	bne.n	401dd4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401ddc:	4a1d      	ldr	r2, [pc, #116]	; (401e54 <Reset_Handler+0xc4>)
  401dde:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  401de2:	4b1d      	ldr	r3, [pc, #116]	; (401e58 <Reset_Handler+0xc8>)
  401de4:	6099      	str	r1, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401de6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401dea:	fab3 f383 	clz	r3, r3
  401dee:	095b      	lsrs	r3, r3, #5
  401df0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401df2:	b672      	cpsid	i
  401df4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401df8:	2100      	movs	r1, #0
  401dfa:	4b18      	ldr	r3, [pc, #96]	; (401e5c <Reset_Handler+0xcc>)
  401dfc:	7019      	strb	r1, [r3, #0]
	return flags;
  401dfe:	9801      	ldr	r0, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401e00:	4917      	ldr	r1, [pc, #92]	; (401e60 <Reset_Handler+0xd0>)
  401e02:	680b      	ldr	r3, [r1, #0]
  401e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401e08:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  401e0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401e0e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  401e12:	b128      	cbz	r0, 401e20 <Reset_Handler+0x90>
		cpu_irq_enable();
  401e14:	2101      	movs	r1, #1
  401e16:	4b11      	ldr	r3, [pc, #68]	; (401e5c <Reset_Handler+0xcc>)
  401e18:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb");
  401e1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401e1e:	b662      	cpsie	i
	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  401e20:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  401e24:	f5b2 3f20 	cmp.w	r2, #163840	; 0x28000
  401e28:	d204      	bcs.n	401e34 <Reset_Handler+0xa4>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  401e2a:	4a0b      	ldr	r2, [pc, #44]	; (401e58 <Reset_Handler+0xc8>)
  401e2c:	6893      	ldr	r3, [r2, #8]
  401e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401e32:	6093      	str	r3, [r2, #8]
	__libc_init_array();
  401e34:	4b0b      	ldr	r3, [pc, #44]	; (401e64 <Reset_Handler+0xd4>)
  401e36:	4798      	blx	r3
        main();
  401e38:	4b0b      	ldr	r3, [pc, #44]	; (401e68 <Reset_Handler+0xd8>)
  401e3a:	4798      	blx	r3
  401e3c:	e7fe      	b.n	401e3c <Reset_Handler+0xac>
  401e3e:	bf00      	nop
  401e40:	20000000 	.word	0x20000000
  401e44:	00408dbc 	.word	0x00408dbc
  401e48:	20000a70 	.word	0x20000a70
  401e4c:	20000b48 	.word	0x20000b48
  401e50:	20000a70 	.word	0x20000a70
  401e54:	00400000 	.word	0x00400000
  401e58:	e000ed00 	.word	0xe000ed00
  401e5c:	200000b8 	.word	0x200000b8
  401e60:	e000ed88 	.word	0xe000ed88
  401e64:	00404081 	.word	0x00404081
  401e68:	00403c21 	.word	0x00403c21

00401e6c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  401e6c:	4b31      	ldr	r3, [pc, #196]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e70:	f003 0303 	and.w	r3, r3, #3
  401e74:	2b01      	cmp	r3, #1
  401e76:	d01d      	beq.n	401eb4 <SystemCoreClockUpdate+0x48>
  401e78:	b183      	cbz	r3, 401e9c <SystemCoreClockUpdate+0x30>
  401e7a:	2b02      	cmp	r3, #2
  401e7c:	d036      	beq.n	401eec <SystemCoreClockUpdate+0x80>
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401e7e:	4b2d      	ldr	r3, [pc, #180]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e86:	2b70      	cmp	r3, #112	; 0x70
  401e88:	d04b      	beq.n	401f22 <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401e8a:	4b2a      	ldr	r3, [pc, #168]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e8e:	492a      	ldr	r1, [pc, #168]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401e90:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401e94:	680b      	ldr	r3, [r1, #0]
  401e96:	40d3      	lsrs	r3, r2
  401e98:	600b      	str	r3, [r1, #0]
  401e9a:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  401e9c:	4b27      	ldr	r3, [pc, #156]	; (401f3c <SystemCoreClockUpdate+0xd0>)
  401e9e:	695b      	ldr	r3, [r3, #20]
  401ea0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ea4:	bf14      	ite	ne
  401ea6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401eaa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401eae:	4b22      	ldr	r3, [pc, #136]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401eb0:	601a      	str	r2, [r3, #0]
  401eb2:	e7e4      	b.n	401e7e <SystemCoreClockUpdate+0x12>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  401eb4:	4b1f      	ldr	r3, [pc, #124]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401eb6:	6a1b      	ldr	r3, [r3, #32]
  401eb8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ebc:	d003      	beq.n	401ec6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401ebe:	4a20      	ldr	r2, [pc, #128]	; (401f40 <SystemCoreClockUpdate+0xd4>)
  401ec0:	4b1d      	ldr	r3, [pc, #116]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401ec2:	601a      	str	r2, [r3, #0]
  401ec4:	e7db      	b.n	401e7e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401ec6:	4a1f      	ldr	r2, [pc, #124]	; (401f44 <SystemCoreClockUpdate+0xd8>)
  401ec8:	4b1b      	ldr	r3, [pc, #108]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401eca:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401ecc:	4b19      	ldr	r3, [pc, #100]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401ece:	6a1b      	ldr	r3, [r3, #32]
  401ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ed4:	2b10      	cmp	r3, #16
  401ed6:	d005      	beq.n	401ee4 <SystemCoreClockUpdate+0x78>
  401ed8:	2b20      	cmp	r3, #32
  401eda:	d1d0      	bne.n	401e7e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401edc:	4a1a      	ldr	r2, [pc, #104]	; (401f48 <SystemCoreClockUpdate+0xdc>)
  401ede:	4b16      	ldr	r3, [pc, #88]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401ee0:	601a      	str	r2, [r3, #0]
				break;
  401ee2:	e7cc      	b.n	401e7e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401ee4:	4a19      	ldr	r2, [pc, #100]	; (401f4c <SystemCoreClockUpdate+0xe0>)
  401ee6:	4b14      	ldr	r3, [pc, #80]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401ee8:	601a      	str	r2, [r3, #0]
				break;
  401eea:	e7c8      	b.n	401e7e <SystemCoreClockUpdate+0x12>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  401eec:	4b13      	ldr	r3, [pc, #76]	; (401f3c <SystemCoreClockUpdate+0xd0>)
  401eee:	695b      	ldr	r3, [r3, #20]
  401ef0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ef4:	bf14      	ite	ne
  401ef6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401efa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401efe:	4b0e      	ldr	r3, [pc, #56]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401f00:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  401f02:	4b0c      	ldr	r3, [pc, #48]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f06:	f003 0303 	and.w	r3, r3, #3
  401f0a:	2b02      	cmp	r3, #2
  401f0c:	d1b7      	bne.n	401e7e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  401f0e:	4b09      	ldr	r3, [pc, #36]	; (401f34 <SystemCoreClockUpdate+0xc8>)
  401f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401f12:	4909      	ldr	r1, [pc, #36]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401f14:	f3c2 420c 	ubfx	r2, r2, #16, #13
  401f18:	680b      	ldr	r3, [r1, #0]
  401f1a:	fb02 3303 	mla	r3, r2, r3, r3
  401f1e:	600b      	str	r3, [r1, #0]
  401f20:	e7ad      	b.n	401e7e <SystemCoreClockUpdate+0x12>
		SystemCoreClock /= 3U;
  401f22:	4a05      	ldr	r2, [pc, #20]	; (401f38 <SystemCoreClockUpdate+0xcc>)
  401f24:	6813      	ldr	r3, [r2, #0]
  401f26:	490a      	ldr	r1, [pc, #40]	; (401f50 <SystemCoreClockUpdate+0xe4>)
  401f28:	fba1 1303 	umull	r1, r3, r1, r3
  401f2c:	085b      	lsrs	r3, r3, #1
  401f2e:	6013      	str	r3, [r2, #0]
  401f30:	4770      	bx	lr
  401f32:	bf00      	nop
  401f34:	400e0400 	.word	0x400e0400
  401f38:	200000bc 	.word	0x200000bc
  401f3c:	400e1410 	.word	0x400e1410
  401f40:	00b71b00 	.word	0x00b71b00
  401f44:	007a1200 	.word	0x007a1200
  401f48:	016e3600 	.word	0x016e3600
  401f4c:	00f42400 	.word	0x00f42400
  401f50:	aaaaaaab 	.word	0xaaaaaaab

00401f54 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  401f54:	4b12      	ldr	r3, [pc, #72]	; (401fa0 <system_init_flash+0x4c>)
  401f56:	4298      	cmp	r0, r3
  401f58:	d911      	bls.n	401f7e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  401f5a:	4b12      	ldr	r3, [pc, #72]	; (401fa4 <system_init_flash+0x50>)
  401f5c:	4298      	cmp	r0, r3
  401f5e:	d913      	bls.n	401f88 <system_init_flash+0x34>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  401f60:	4b11      	ldr	r3, [pc, #68]	; (401fa8 <system_init_flash+0x54>)
  401f62:	4298      	cmp	r0, r3
  401f64:	d914      	bls.n	401f90 <system_init_flash+0x3c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  401f66:	4b11      	ldr	r3, [pc, #68]	; (401fac <system_init_flash+0x58>)
  401f68:	4298      	cmp	r0, r3
  401f6a:	d915      	bls.n	401f98 <system_init_flash+0x44>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  401f6c:	4b10      	ldr	r3, [pc, #64]	; (401fb0 <system_init_flash+0x5c>)
  401f6e:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401f70:	bf94      	ite	ls
  401f72:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f76:	4a0f      	ldrhi	r2, [pc, #60]	; (401fb4 <system_init_flash+0x60>)
  401f78:	4b0f      	ldr	r3, [pc, #60]	; (401fb8 <system_init_flash+0x64>)
  401f7a:	601a      	str	r2, [r3, #0]
  401f7c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f82:	4b0d      	ldr	r3, [pc, #52]	; (401fb8 <system_init_flash+0x64>)
  401f84:	601a      	str	r2, [r3, #0]
  401f86:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f88:	4a0c      	ldr	r2, [pc, #48]	; (401fbc <system_init_flash+0x68>)
  401f8a:	4b0b      	ldr	r3, [pc, #44]	; (401fb8 <system_init_flash+0x64>)
  401f8c:	601a      	str	r2, [r3, #0]
  401f8e:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f90:	4a0b      	ldr	r2, [pc, #44]	; (401fc0 <system_init_flash+0x6c>)
  401f92:	4b09      	ldr	r3, [pc, #36]	; (401fb8 <system_init_flash+0x64>)
  401f94:	601a      	str	r2, [r3, #0]
  401f96:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f98:	4a0a      	ldr	r2, [pc, #40]	; (401fc4 <system_init_flash+0x70>)
  401f9a:	4b07      	ldr	r3, [pc, #28]	; (401fb8 <system_init_flash+0x64>)
  401f9c:	601a      	str	r2, [r3, #0]
  401f9e:	4770      	bx	lr
  401fa0:	01312cff 	.word	0x01312cff
  401fa4:	026259ff 	.word	0x026259ff
  401fa8:	039386ff 	.word	0x039386ff
  401fac:	04c4b3ff 	.word	0x04c4b3ff
  401fb0:	05f5e0ff 	.word	0x05f5e0ff
  401fb4:	04000500 	.word	0x04000500
  401fb8:	400e0a00 	.word	0x400e0a00
  401fbc:	04000100 	.word	0x04000100
  401fc0:	04000200 	.word	0x04000200
  401fc4:	04000300 	.word	0x04000300

00401fc8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401fc8:	4b0a      	ldr	r3, [pc, #40]	; (401ff4 <_sbrk+0x2c>)
  401fca:	681b      	ldr	r3, [r3, #0]
  401fcc:	b153      	cbz	r3, 401fe4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401fce:	4b09      	ldr	r3, [pc, #36]	; (401ff4 <_sbrk+0x2c>)
  401fd0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401fd2:	181a      	adds	r2, r3, r0
  401fd4:	4908      	ldr	r1, [pc, #32]	; (401ff8 <_sbrk+0x30>)
  401fd6:	4291      	cmp	r1, r2
  401fd8:	db08      	blt.n	401fec <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401fda:	4610      	mov	r0, r2
  401fdc:	4a05      	ldr	r2, [pc, #20]	; (401ff4 <_sbrk+0x2c>)
  401fde:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401fe0:	4618      	mov	r0, r3
  401fe2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401fe4:	4a05      	ldr	r2, [pc, #20]	; (401ffc <_sbrk+0x34>)
  401fe6:	4b03      	ldr	r3, [pc, #12]	; (401ff4 <_sbrk+0x2c>)
  401fe8:	601a      	str	r2, [r3, #0]
  401fea:	e7f0      	b.n	401fce <_sbrk+0x6>
		return (caddr_t) -1;	
  401fec:	f04f 30ff 	mov.w	r0, #4294967295
}
  401ff0:	4770      	bx	lr
  401ff2:	bf00      	nop
  401ff4:	20000ab0 	.word	0x20000ab0
  401ff8:	20027ffc 	.word	0x20027ffc
  401ffc:	20003b48 	.word	0x20003b48

00402000 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402000:	f04f 30ff 	mov.w	r0, #4294967295
  402004:	4770      	bx	lr

00402006 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40200a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40200c:	2000      	movs	r0, #0
  40200e:	4770      	bx	lr

00402010 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402010:	2001      	movs	r0, #1
  402012:	4770      	bx	lr

00402014 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402014:	2000      	movs	r0, #0
  402016:	4770      	bx	lr

00402018 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  402018:	2801      	cmp	r0, #1
  40201a:	d901      	bls.n	402020 <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  40201c:	2001      	movs	r0, #1
  40201e:	4770      	bx	lr
{
  402020:	b510      	push	{r4, lr}
  402022:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  402024:	4b0a      	ldr	r3, [pc, #40]	; (402050 <disk_initialize+0x38>)
  402026:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  402028:	2803      	cmp	r0, #3
  40202a:	d106      	bne.n	40203a <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  40202c:	4620      	mov	r0, r4
  40202e:	4b08      	ldr	r3, [pc, #32]	; (402050 <disk_initialize+0x38>)
  402030:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  402032:	2803      	cmp	r0, #3
  402034:	d101      	bne.n	40203a <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  402036:	2001      	movs	r0, #1
  402038:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  40203a:	b938      	cbnz	r0, 40204c <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  40203c:	4620      	mov	r0, r4
  40203e:	4b05      	ldr	r3, [pc, #20]	; (402054 <disk_initialize+0x3c>)
  402040:	4798      	blx	r3
  402042:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  402044:	bf14      	ite	ne
  402046:	2004      	movne	r0, #4
  402048:	2000      	moveq	r0, #0
  40204a:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  40204c:	2001      	movs	r0, #1
}
  40204e:	bd10      	pop	{r4, pc}
  402050:	00401539 	.word	0x00401539
  402054:	00401569 	.word	0x00401569

00402058 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  402058:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  40205a:	4b05      	ldr	r3, [pc, #20]	; (402070 <disk_status+0x18>)
  40205c:	4798      	blx	r3
  40205e:	b120      	cbz	r0, 40206a <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  402060:	2802      	cmp	r0, #2
  402062:	bf0c      	ite	eq
  402064:	2003      	moveq	r0, #3
  402066:	2001      	movne	r0, #1
  402068:	bd08      	pop	{r3, pc}
		return 0;
  40206a:	2000      	movs	r0, #0
	}
}
  40206c:	bd08      	pop	{r3, pc}
  40206e:	bf00      	nop
  402070:	00401539 	.word	0x00401539

00402074 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  402074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402078:	b083      	sub	sp, #12
  40207a:	4680      	mov	r8, r0
  40207c:	460d      	mov	r5, r1
  40207e:	4614      	mov	r4, r2
  402080:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402082:	4b15      	ldr	r3, [pc, #84]	; (4020d8 <disk_read+0x64>)
  402084:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  402086:	b918      	cbnz	r0, 402090 <disk_read+0x1c>
		return RES_ERROR;
  402088:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40208a:	b003      	add	sp, #12
  40208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402090:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  402092:	a901      	add	r1, sp, #4
  402094:	4640      	mov	r0, r8
  402096:	4b11      	ldr	r3, [pc, #68]	; (4020dc <disk_read+0x68>)
  402098:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40209a:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  40209c:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4020a0:	9b01      	ldr	r3, [sp, #4]
  4020a2:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4020a6:	429a      	cmp	r2, r3
  4020a8:	d901      	bls.n	4020ae <disk_read+0x3a>
		return RES_PARERR;
  4020aa:	2004      	movs	r0, #4
  4020ac:	e7ed      	b.n	40208a <disk_read+0x16>
	for (i = 0; i < count; i++) {
  4020ae:	46ba      	mov	sl, r7
  4020b0:	b177      	cbz	r7, 4020d0 <disk_read+0x5c>
  4020b2:	0276      	lsls	r6, r6, #9
  4020b4:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4020b6:	f8df b028 	ldr.w	fp, [pc, #40]	; 4020e0 <disk_read+0x6c>
  4020ba:	462a      	mov	r2, r5
  4020bc:	4621      	mov	r1, r4
  4020be:	4640      	mov	r0, r8
  4020c0:	47d8      	blx	fp
  4020c2:	b938      	cbnz	r0, 4020d4 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  4020c4:	3701      	adds	r7, #1
  4020c6:	444c      	add	r4, r9
  4020c8:	4435      	add	r5, r6
  4020ca:	4557      	cmp	r7, sl
  4020cc:	d1f5      	bne.n	4020ba <disk_read+0x46>
  4020ce:	e7dc      	b.n	40208a <disk_read+0x16>
	return RES_OK;
  4020d0:	2000      	movs	r0, #0
  4020d2:	e7da      	b.n	40208a <disk_read+0x16>
			return RES_ERROR;
  4020d4:	2001      	movs	r0, #1
  4020d6:	e7d8      	b.n	40208a <disk_read+0x16>
  4020d8:	00401561 	.word	0x00401561
  4020dc:	0040154d 	.word	0x0040154d
  4020e0:	0040157d 	.word	0x0040157d

004020e4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  4020e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020e8:	b082      	sub	sp, #8
  4020ea:	4606      	mov	r6, r0
  4020ec:	4688      	mov	r8, r1
  4020ee:	4617      	mov	r7, r2
  4020f0:	461d      	mov	r5, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4020f2:	4b17      	ldr	r3, [pc, #92]	; (402150 <disk_write+0x6c>)
  4020f4:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4020f6:	b918      	cbnz	r0, 402100 <disk_write+0x1c>
		return RES_ERROR;
  4020f8:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4020fa:	b002      	add	sp, #8
  4020fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402100:	4604      	mov	r4, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  402102:	a901      	add	r1, sp, #4
  402104:	4630      	mov	r0, r6
  402106:	4b13      	ldr	r3, [pc, #76]	; (402154 <disk_write+0x70>)
  402108:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  40210a:	fb04 7305 	mla	r3, r4, r5, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
  40210e:	9a01      	ldr	r2, [sp, #4]
  402110:	fb02 4404 	mla	r4, r2, r4, r4
	if ((sector + count * uc_sector_size) >
  402114:	42a3      	cmp	r3, r4
  402116:	d901      	bls.n	40211c <disk_write+0x38>
		return RES_PARERR;
  402118:	2004      	movs	r0, #4
  40211a:	e7ee      	b.n	4020fa <disk_write+0x16>
	switch (sd_mmc_init_write_blocks(drv, sector, count)) {
  40211c:	b2ad      	uxth	r5, r5
  40211e:	462a      	mov	r2, r5
  402120:	4639      	mov	r1, r7
  402122:	4630      	mov	r0, r6
  402124:	4b0c      	ldr	r3, [pc, #48]	; (402158 <disk_write+0x74>)
  402126:	4798      	blx	r3
  402128:	b120      	cbz	r0, 402134 <disk_write+0x50>
			return CTRL_FAIL;
  40212a:	2802      	cmp	r0, #2
  40212c:	bf0c      	ite	eq
  40212e:	2002      	moveq	r0, #2
  402130:	2001      	movne	r0, #1
  402132:	e7e2      	b.n	4020fa <disk_write+0x16>
	if (SD_MMC_OK != sd_mmc_start_write_blocks(buff, count)) {
  402134:	4629      	mov	r1, r5
  402136:	4640      	mov	r0, r8
  402138:	4b08      	ldr	r3, [pc, #32]	; (40215c <disk_write+0x78>)
  40213a:	4798      	blx	r3
  40213c:	b108      	cbz	r0, 402142 <disk_write+0x5e>
		return CTRL_FAIL;
  40213e:	2001      	movs	r0, #1
  402140:	e7db      	b.n	4020fa <disk_write+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  402142:	4b07      	ldr	r3, [pc, #28]	; (402160 <disk_write+0x7c>)
  402144:	4798      	blx	r3
		return RES_ERROR;
  402146:	3000      	adds	r0, #0
  402148:	bf18      	it	ne
  40214a:	2001      	movne	r0, #1
  40214c:	e7d5      	b.n	4020fa <disk_write+0x16>
  40214e:	bf00      	nop
  402150:	00401561 	.word	0x00401561
  402154:	0040154d 	.word	0x0040154d
  402158:	00400b11 	.word	0x00400b11
  40215c:	00400b81 	.word	0x00400b81
  402160:	00400ba9 	.word	0x00400ba9

00402164 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  402164:	b510      	push	{r4, lr}
  402166:	b082      	sub	sp, #8
  402168:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  40216a:	2903      	cmp	r1, #3
  40216c:	d827      	bhi.n	4021be <disk_ioctl+0x5a>
  40216e:	e8df f001 	tbb	[pc, r1]
  402172:	071f      	.short	0x071f
  402174:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  402176:	2301      	movs	r3, #1
  402178:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  40217a:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  40217c:	b002      	add	sp, #8
  40217e:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  402180:	a901      	add	r1, sp, #4
  402182:	4b11      	ldr	r3, [pc, #68]	; (4021c8 <disk_ioctl+0x64>)
  402184:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  402186:	9b01      	ldr	r3, [sp, #4]
  402188:	3301      	adds	r3, #1
  40218a:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  40218c:	2000      	movs	r0, #0
	break;
  40218e:	e7f5      	b.n	40217c <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  402190:	4b0e      	ldr	r3, [pc, #56]	; (4021cc <disk_ioctl+0x68>)
  402192:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  402194:	2808      	cmp	r0, #8
  402196:	d814      	bhi.n	4021c2 <disk_ioctl+0x5e>
  402198:	f44f 738b 	mov.w	r3, #278	; 0x116
  40219c:	fa23 f000 	lsr.w	r0, r3, r0
  4021a0:	f010 0f01 	tst.w	r0, #1
  4021a4:	d101      	bne.n	4021aa <disk_ioctl+0x46>
			return RES_ERROR;
  4021a6:	2001      	movs	r0, #1
  4021a8:	e7e8      	b.n	40217c <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4021aa:	2000      	movs	r0, #0
  4021ac:	7020      	strb	r0, [r4, #0]
	break;
  4021ae:	e7e5      	b.n	40217c <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4021b0:	4b07      	ldr	r3, [pc, #28]	; (4021d0 <disk_ioctl+0x6c>)
  4021b2:	4798      	blx	r3
  4021b4:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  4021b6:	bf0c      	ite	eq
  4021b8:	2000      	moveq	r0, #0
  4021ba:	2003      	movne	r0, #3
  4021bc:	e7de      	b.n	40217c <disk_ioctl+0x18>
		res = RES_PARERR;
  4021be:	2004      	movs	r0, #4
  4021c0:	e7dc      	b.n	40217c <disk_ioctl+0x18>
			return RES_ERROR;
  4021c2:	2001      	movs	r0, #1
  4021c4:	e7da      	b.n	40217c <disk_ioctl+0x18>
  4021c6:	bf00      	nop
  4021c8:	0040154d 	.word	0x0040154d
  4021cc:	00401561 	.word	0x00401561
  4021d0:	00401539 	.word	0x00401539

004021d4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  4021d4:	b530      	push	{r4, r5, lr}
  4021d6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  4021d8:	4c11      	ldr	r4, [pc, #68]	; (402220 <get_fattime+0x4c>)
  4021da:	ab07      	add	r3, sp, #28
  4021dc:	aa08      	add	r2, sp, #32
  4021de:	a909      	add	r1, sp, #36	; 0x24
  4021e0:	4620      	mov	r0, r4
  4021e2:	4d10      	ldr	r5, [pc, #64]	; (402224 <get_fattime+0x50>)
  4021e4:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  4021e6:	ab03      	add	r3, sp, #12
  4021e8:	9300      	str	r3, [sp, #0]
  4021ea:	ab04      	add	r3, sp, #16
  4021ec:	aa05      	add	r2, sp, #20
  4021ee:	a906      	add	r1, sp, #24
  4021f0:	4620      	mov	r0, r4
  4021f2:	4c0d      	ldr	r4, [pc, #52]	; (402228 <get_fattime+0x54>)
  4021f4:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  4021f6:	9b04      	ldr	r3, [sp, #16]
  4021f8:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  4021fa:	9805      	ldr	r0, [sp, #20]
  4021fc:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  402200:	9809      	ldr	r0, [sp, #36]	; 0x24
  402202:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  402206:	9808      	ldr	r0, [sp, #32]
  402208:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  40220c:	9807      	ldr	r0, [sp, #28]
  40220e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  402212:	9806      	ldr	r0, [sp, #24]
  402214:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  402218:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  40221c:	b00b      	add	sp, #44	; 0x2c
  40221e:	bd30      	pop	{r4, r5, pc}
  402220:	400e1460 	.word	0x400e1460
  402224:	00401a7d 	.word	0x00401a7d
  402228:	00401ad7 	.word	0x00401ad7

0040222c <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  40222c:	b13a      	cbz	r2, 40223e <mem_cpy+0x12>
  40222e:	3801      	subs	r0, #1
  402230:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  402232:	f811 3b01 	ldrb.w	r3, [r1], #1
  402236:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  40223a:	4291      	cmp	r1, r2
  40223c:	d1f9      	bne.n	402232 <mem_cpy+0x6>
  40223e:	4770      	bx	lr

00402240 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402240:	b122      	cbz	r2, 40224c <mem_set+0xc>
  402242:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  402244:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  402248:	4282      	cmp	r2, r0
  40224a:	d1fb      	bne.n	402244 <mem_set+0x4>
  40224c:	4770      	bx	lr

0040224e <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  40224e:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402250:	6983      	ldr	r3, [r0, #24]
  402252:	3b02      	subs	r3, #2
  402254:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  402256:	bf3d      	ittte	cc
  402258:	7883      	ldrbcc	r3, [r0, #2]
  40225a:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
  40225c:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  402260:	2000      	movcs	r0, #0
}
  402262:	4770      	bx	lr

00402264 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  402264:	4602      	mov	r2, r0
  402266:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  40226a:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  40226c:	01c3      	lsls	r3, r0, #7
  40226e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  402272:	f812 0b01 	ldrb.w	r0, [r2], #1
  402276:	fa50 f383 	uxtab	r3, r0, r3
  40227a:	b2d8      	uxtb	r0, r3
  40227c:	428a      	cmp	r2, r1
  40227e:	d1f5      	bne.n	40226c <sum_sfn+0x8>
	return sum;
}
  402280:	4770      	bx	lr
	...

00402284 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  402284:	b198      	cbz	r0, 4022ae <validate+0x2a>
{
  402286:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  402288:	7802      	ldrb	r2, [r0, #0]
  40228a:	b90a      	cbnz	r2, 402290 <validate+0xc>
		return FR_INVALID_OBJECT;
  40228c:	2009      	movs	r0, #9
  40228e:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  402290:	88c2      	ldrh	r2, [r0, #6]
  402292:	428a      	cmp	r2, r1
  402294:	d001      	beq.n	40229a <validate+0x16>
		return FR_INVALID_OBJECT;
  402296:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  402298:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  40229a:	7840      	ldrb	r0, [r0, #1]
  40229c:	4b05      	ldr	r3, [pc, #20]	; (4022b4 <validate+0x30>)
  40229e:	4798      	blx	r3
  4022a0:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  4022a4:	2800      	cmp	r0, #0
  4022a6:	bf14      	ite	ne
  4022a8:	2003      	movne	r0, #3
  4022aa:	2000      	moveq	r0, #0
  4022ac:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  4022ae:	2009      	movs	r0, #9
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop
  4022b4:	00402059 	.word	0x00402059

004022b8 <check_fs>:
{
  4022b8:	b538      	push	{r3, r4, r5, lr}
  4022ba:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  4022bc:	2301      	movs	r3, #1
  4022be:	460a      	mov	r2, r1
  4022c0:	f100 0130 	add.w	r1, r0, #48	; 0x30
  4022c4:	7840      	ldrb	r0, [r0, #1]
  4022c6:	4d1d      	ldr	r5, [pc, #116]	; (40233c <check_fs+0x84>)
  4022c8:	47a8      	blx	r5
  4022ca:	b108      	cbz	r0, 4022d0 <check_fs+0x18>
		return 3;
  4022cc:	2003      	movs	r0, #3
  4022ce:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  4022d0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  4022d4:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  4022d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4022dc:	b21b      	sxth	r3, r3
  4022de:	4a18      	ldr	r2, [pc, #96]	; (402340 <check_fs+0x88>)
  4022e0:	4293      	cmp	r3, r2
  4022e2:	d001      	beq.n	4022e8 <check_fs+0x30>
		return 2;
  4022e4:	2002      	movs	r0, #2
  4022e6:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  4022e8:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  4022ec:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  4022f0:	041b      	lsls	r3, r3, #16
  4022f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4022f6:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  4022fa:	4313      	orrs	r3, r2
  4022fc:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  402300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402304:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402308:	4a0e      	ldr	r2, [pc, #56]	; (402344 <check_fs+0x8c>)
  40230a:	4293      	cmp	r3, r2
  40230c:	d013      	beq.n	402336 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  40230e:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  402312:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  402316:	0400      	lsls	r0, r0, #16
  402318:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  40231c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  402320:	4318      	orrs	r0, r3
  402322:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  402326:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40232a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  40232e:	1a80      	subs	r0, r0, r2
  402330:	bf18      	it	ne
  402332:	2001      	movne	r0, #1
  402334:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  402336:	2000      	movs	r0, #0
}
  402338:	bd38      	pop	{r3, r4, r5, pc}
  40233a:	bf00      	nop
  40233c:	00402075 	.word	0x00402075
  402340:	ffffaa55 	.word	0xffffaa55
  402344:	00544146 	.word	0x00544146

00402348 <chk_mounted>:
{
  402348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  40234a:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  40234c:	781c      	ldrb	r4, [r3, #0]
  40234e:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  402350:	2c09      	cmp	r4, #9
  402352:	d80a      	bhi.n	40236a <chk_mounted+0x22>
  402354:	785d      	ldrb	r5, [r3, #1]
  402356:	2d3a      	cmp	r5, #58	; 0x3a
  402358:	d001      	beq.n	40235e <chk_mounted+0x16>
  40235a:	2400      	movs	r4, #0
  40235c:	e006      	b.n	40236c <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  40235e:	3302      	adds	r3, #2
  402360:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  402362:	2c07      	cmp	r4, #7
  402364:	d902      	bls.n	40236c <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  402366:	200b      	movs	r0, #11
  402368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40236a:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  40236c:	4bad      	ldr	r3, [pc, #692]	; (402624 <chk_mounted+0x2dc>)
  40236e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  402372:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402374:	2d00      	cmp	r5, #0
  402376:	f000 813d 	beq.w	4025f4 <chk_mounted+0x2ac>
  40237a:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  40237c:	782b      	ldrb	r3, [r5, #0]
  40237e:	b17b      	cbz	r3, 4023a0 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  402380:	7868      	ldrb	r0, [r5, #1]
  402382:	4ba9      	ldr	r3, [pc, #676]	; (402628 <chk_mounted+0x2e0>)
  402384:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  402386:	f010 0f01 	tst.w	r0, #1
  40238a:	d109      	bne.n	4023a0 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  40238c:	2e00      	cmp	r6, #0
  40238e:	f000 8133 	beq.w	4025f8 <chk_mounted+0x2b0>
  402392:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  402396:	2800      	cmp	r0, #0
  402398:	bf0c      	ite	eq
  40239a:	2000      	moveq	r0, #0
  40239c:	200a      	movne	r0, #10
  40239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  4023a0:	2300      	movs	r3, #0
  4023a2:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  4023a4:	b2e0      	uxtb	r0, r4
  4023a6:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  4023a8:	4ba0      	ldr	r3, [pc, #640]	; (40262c <chk_mounted+0x2e4>)
  4023aa:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  4023ac:	f010 0f01 	tst.w	r0, #1
  4023b0:	d001      	beq.n	4023b6 <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  4023b2:	2003      	movs	r0, #3
  4023b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  4023b6:	b126      	cbz	r6, 4023c2 <chk_mounted+0x7a>
  4023b8:	f010 0f04 	tst.w	r0, #4
  4023bc:	d001      	beq.n	4023c2 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  4023be:	200a      	movs	r0, #10
  4023c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4023c2:	2100      	movs	r1, #0
  4023c4:	4628      	mov	r0, r5
  4023c6:	4b9a      	ldr	r3, [pc, #616]	; (402630 <chk_mounted+0x2e8>)
  4023c8:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  4023ca:	2801      	cmp	r0, #1
  4023cc:	d006      	beq.n	4023dc <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4023ce:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  4023d0:	2803      	cmp	r0, #3
  4023d2:	f000 8113 	beq.w	4025fc <chk_mounted+0x2b4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  4023d6:	b1c8      	cbz	r0, 40240c <chk_mounted+0xc4>
  4023d8:	200d      	movs	r0, #13
  4023da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  4023dc:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  4023e0:	b90b      	cbnz	r3, 4023e6 <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  4023e2:	200d      	movs	r0, #13
  4023e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  4023e6:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  4023ea:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  4023ee:	0424      	lsls	r4, r4, #16
  4023f0:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  4023f4:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  4023f8:	431c      	orrs	r4, r3
  4023fa:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  4023fe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  402402:	4621      	mov	r1, r4
  402404:	4628      	mov	r0, r5
  402406:	4b8a      	ldr	r3, [pc, #552]	; (402630 <chk_mounted+0x2e8>)
  402408:	4798      	blx	r3
  40240a:	e7e1      	b.n	4023d0 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40240c:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  402410:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  402414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402418:	b21b      	sxth	r3, r3
  40241a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40241e:	d001      	beq.n	402424 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  402420:	200d      	movs	r0, #13
  402422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  402424:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  402428:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40242c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  402430:	d10d      	bne.n	40244e <chk_mounted+0x106>
  402432:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  402436:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  40243a:	0412      	lsls	r2, r2, #16
  40243c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  402440:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  402444:	431a      	orrs	r2, r3
  402446:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  40244a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  40244e:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402450:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  402454:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  402458:	f10e 33ff 	add.w	r3, lr, #4294967295
  40245c:	b2db      	uxtb	r3, r3
  40245e:	2b01      	cmp	r3, #1
  402460:	d901      	bls.n	402466 <chk_mounted+0x11e>
  402462:	200d      	movs	r0, #13
  402464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  402466:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  40246a:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40246c:	2e00      	cmp	r6, #0
  40246e:	f000 80c7 	beq.w	402600 <chk_mounted+0x2b8>
  402472:	1e73      	subs	r3, r6, #1
  402474:	4233      	tst	r3, r6
  402476:	d001      	beq.n	40247c <chk_mounted+0x134>
  402478:	200d      	movs	r0, #13
  40247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  40247c:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  402480:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  402484:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  402488:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  40248a:	f011 0f0f 	tst.w	r1, #15
  40248e:	f040 80b9 	bne.w	402604 <chk_mounted+0x2bc>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  402492:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  402496:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  40249a:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  40249e:	d10d      	bne.n	4024bc <chk_mounted+0x174>
  4024a0:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  4024a4:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  4024a8:	041b      	lsls	r3, r3, #16
  4024aa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4024ae:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  4024b2:	4303      	orrs	r3, r0
  4024b4:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  4024b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  4024bc:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  4024c0:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4024c4:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  4024c8:	f000 809e 	beq.w	402608 <chk_mounted+0x2c0>
	fasize *= b;										/* Number of sectors for FAT area */
  4024cc:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  4024d0:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  4024d4:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4024d6:	4283      	cmp	r3, r0
  4024d8:	f0c0 8098 	bcc.w	40260c <chk_mounted+0x2c4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  4024dc:	1a1b      	subs	r3, r3, r0
  4024de:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4024e2:	2b00      	cmp	r3, #0
  4024e4:	f000 8094 	beq.w	402610 <chk_mounted+0x2c8>
	fmt = FS_FAT12;
  4024e8:	f640 76f5 	movw	r6, #4085	; 0xff5
  4024ec:	42b3      	cmp	r3, r6
  4024ee:	bf8c      	ite	hi
  4024f0:	2602      	movhi	r6, #2
  4024f2:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  4024f4:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  4024f8:	4563      	cmp	r3, ip
  4024fa:	f200 80a3 	bhi.w	402644 <chk_mounted+0x2fc>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  4024fe:	3302      	adds	r3, #2
  402500:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402502:	4420      	add	r0, r4
  402504:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402506:	443c      	add	r4, r7
  402508:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40250a:	2900      	cmp	r1, #0
  40250c:	f000 8088 	beq.w	402620 <chk_mounted+0x2d8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402510:	4474      	add	r4, lr
  402512:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402514:	2e02      	cmp	r6, #2
  402516:	bf0f      	iteee	eq
  402518:	005b      	lsleq	r3, r3, #1
  40251a:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  40251e:	f003 0301 	andne.w	r3, r3, #1
  402522:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402526:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40252a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40252e:	d375      	bcc.n	40261c <chk_mounted+0x2d4>
	fs->free_clust = 0xFFFFFFFF;
  402530:	f04f 33ff 	mov.w	r3, #4294967295
  402534:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402536:	2300      	movs	r3, #0
  402538:	60eb      	str	r3, [r5, #12]
  40253a:	e04a      	b.n	4025d2 <chk_mounted+0x28a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40253c:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  402540:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  402544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402548:	b21b      	sxth	r3, r3
  40254a:	4a3a      	ldr	r2, [pc, #232]	; (402634 <chk_mounted+0x2ec>)
  40254c:	4293      	cmp	r3, r2
  40254e:	d14b      	bne.n	4025e8 <chk_mounted+0x2a0>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402550:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  402554:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  402558:	041b      	lsls	r3, r3, #16
  40255a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40255e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  402562:	4313      	orrs	r3, r2
  402564:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  402568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40256c:	4a32      	ldr	r2, [pc, #200]	; (402638 <chk_mounted+0x2f0>)
  40256e:	4293      	cmp	r3, r2
  402570:	d13c      	bne.n	4025ec <chk_mounted+0x2a4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  402572:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  402576:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  40257a:	041b      	lsls	r3, r3, #16
  40257c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402580:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  402584:	4313      	orrs	r3, r2
  402586:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  40258a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  40258e:	4a2b      	ldr	r2, [pc, #172]	; (40263c <chk_mounted+0x2f4>)
  402590:	4293      	cmp	r3, r2
  402592:	d12d      	bne.n	4025f0 <chk_mounted+0x2a8>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  402594:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  402598:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  40259c:	041b      	lsls	r3, r3, #16
  40259e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4025a2:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  4025a6:	4313      	orrs	r3, r2
  4025a8:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  4025ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4025b0:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4025b2:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  4025b6:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  4025ba:	041b      	lsls	r3, r3, #16
  4025bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4025c0:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  4025c4:	4313      	orrs	r3, r2
  4025c6:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  4025ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4025ce:	612b      	str	r3, [r5, #16]
  4025d0:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  4025d2:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  4025d4:	4a1a      	ldr	r2, [pc, #104]	; (402640 <chk_mounted+0x2f8>)
  4025d6:	8813      	ldrh	r3, [r2, #0]
  4025d8:	3301      	adds	r3, #1
  4025da:	b29b      	uxth	r3, r3
  4025dc:	8013      	strh	r3, [r2, #0]
  4025de:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  4025e0:	2000      	movs	r0, #0
  4025e2:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  4025e4:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  4025e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025e8:	2603      	movs	r6, #3
  4025ea:	e7f2      	b.n	4025d2 <chk_mounted+0x28a>
  4025ec:	2603      	movs	r6, #3
  4025ee:	e7f0      	b.n	4025d2 <chk_mounted+0x28a>
  4025f0:	2603      	movs	r6, #3
  4025f2:	e7ee      	b.n	4025d2 <chk_mounted+0x28a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4025f4:	200c      	movs	r0, #12
  4025f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  4025f8:	2000      	movs	r0, #0
  4025fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  4025fc:	2001      	movs	r0, #1
  4025fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402600:	200d      	movs	r0, #13
  402602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402604:	200d      	movs	r0, #13
  402606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402608:	200d      	movs	r0, #13
  40260a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40260c:	200d      	movs	r0, #13
  40260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402610:	200d      	movs	r0, #13
  402612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402614:	200d      	movs	r0, #13
  402616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402618:	200d      	movs	r0, #13
  40261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  40261c:	200d      	movs	r0, #13
  40261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402620:	200d      	movs	r0, #13
  402622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402624:	20000ab4 	.word	0x20000ab4
  402628:	00402059 	.word	0x00402059
  40262c:	00402019 	.word	0x00402019
  402630:	004022b9 	.word	0x004022b9
  402634:	ffffaa55 	.word	0xffffaa55
  402638:	41615252 	.word	0x41615252
  40263c:	61417272 	.word	0x61417272
  402640:	20000ad4 	.word	0x20000ad4
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402644:	3302      	adds	r3, #2
  402646:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402648:	4420      	add	r0, r4
  40264a:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40264c:	4427      	add	r7, r4
  40264e:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402650:	2900      	cmp	r1, #0
  402652:	d1e1      	bne.n	402618 <chk_mounted+0x2d0>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402654:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  402658:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  40265c:	0409      	lsls	r1, r1, #16
  40265e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  402662:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  402666:	4301      	orrs	r1, r0
  402668:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  40266c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  402670:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  402672:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402674:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402678:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40267c:	d3ca      	bcc.n	402614 <chk_mounted+0x2cc>
	fs->free_clust = 0xFFFFFFFF;
  40267e:	f04f 33ff 	mov.w	r3, #4294967295
  402682:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  402684:	2300      	movs	r3, #0
  402686:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  402688:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  40268a:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  40268e:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  402692:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  402696:	4422      	add	r2, r4
  402698:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40269a:	2301      	movs	r3, #1
  40269c:	f105 0130 	add.w	r1, r5, #48	; 0x30
  4026a0:	7868      	ldrb	r0, [r5, #1]
  4026a2:	4c03      	ldr	r4, [pc, #12]	; (4026b0 <chk_mounted+0x368>)
  4026a4:	47a0      	blx	r4
  4026a6:	2800      	cmp	r0, #0
  4026a8:	f43f af48 	beq.w	40253c <chk_mounted+0x1f4>
  4026ac:	2603      	movs	r6, #3
  4026ae:	e790      	b.n	4025d2 <chk_mounted+0x28a>
  4026b0:	00402075 	.word	0x00402075

004026b4 <move_window>:
{
  4026b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  4026b8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  4026ba:	428f      	cmp	r7, r1
  4026bc:	d035      	beq.n	40272a <move_window+0x76>
  4026be:	460e      	mov	r6, r1
  4026c0:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  4026c2:	7903      	ldrb	r3, [r0, #4]
  4026c4:	b91b      	cbnz	r3, 4026ce <move_window+0x1a>
		if (sector) {
  4026c6:	bb2e      	cbnz	r6, 402714 <move_window+0x60>
	return FR_OK;
  4026c8:	2000      	movs	r0, #0
  4026ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  4026ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4026d2:	2301      	movs	r3, #1
  4026d4:	463a      	mov	r2, r7
  4026d6:	4641      	mov	r1, r8
  4026d8:	7840      	ldrb	r0, [r0, #1]
  4026da:	4d18      	ldr	r5, [pc, #96]	; (40273c <move_window+0x88>)
  4026dc:	47a8      	blx	r5
  4026de:	bb38      	cbnz	r0, 402730 <move_window+0x7c>
			fs->wflag = 0;
  4026e0:	2300      	movs	r3, #0
  4026e2:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  4026e4:	6a23      	ldr	r3, [r4, #32]
  4026e6:	69e2      	ldr	r2, [r4, #28]
  4026e8:	4413      	add	r3, r2
  4026ea:	429f      	cmp	r7, r3
  4026ec:	d2eb      	bcs.n	4026c6 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4026ee:	78e5      	ldrb	r5, [r4, #3]
  4026f0:	2d01      	cmp	r5, #1
  4026f2:	d9e8      	bls.n	4026c6 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  4026f4:	f04f 0a01 	mov.w	sl, #1
  4026f8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 40273c <move_window+0x88>
					wsect += fs->fsize;
  4026fc:	69e3      	ldr	r3, [r4, #28]
  4026fe:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  402700:	4653      	mov	r3, sl
  402702:	463a      	mov	r2, r7
  402704:	4641      	mov	r1, r8
  402706:	7860      	ldrb	r0, [r4, #1]
  402708:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40270a:	3d01      	subs	r5, #1
  40270c:	b2ed      	uxtb	r5, r5
  40270e:	2d01      	cmp	r5, #1
  402710:	d1f4      	bne.n	4026fc <move_window+0x48>
  402712:	e7d8      	b.n	4026c6 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402714:	2301      	movs	r3, #1
  402716:	4632      	mov	r2, r6
  402718:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40271c:	7860      	ldrb	r0, [r4, #1]
  40271e:	4d08      	ldr	r5, [pc, #32]	; (402740 <move_window+0x8c>)
  402720:	47a8      	blx	r5
  402722:	b940      	cbnz	r0, 402736 <move_window+0x82>
			fs->winsect = sector;
  402724:	62e6      	str	r6, [r4, #44]	; 0x2c
  402726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  40272a:	2000      	movs	r0, #0
  40272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402730:	2001      	movs	r0, #1
  402732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402736:	2001      	movs	r0, #1
}
  402738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40273c:	004020e5 	.word	0x004020e5
  402740:	00402075 	.word	0x00402075

00402744 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402744:	2901      	cmp	r1, #1
  402746:	d96a      	bls.n	40281e <get_fat+0xda>
{
  402748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40274a:	6983      	ldr	r3, [r0, #24]
  40274c:	4299      	cmp	r1, r3
  40274e:	d268      	bcs.n	402822 <get_fat+0xde>
  402750:	460c      	mov	r4, r1
  402752:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402754:	7803      	ldrb	r3, [r0, #0]
  402756:	2b02      	cmp	r3, #2
  402758:	d02f      	beq.n	4027ba <get_fat+0x76>
  40275a:	2b03      	cmp	r3, #3
  40275c:	d041      	beq.n	4027e2 <get_fat+0x9e>
  40275e:	2b01      	cmp	r3, #1
  402760:	d002      	beq.n	402768 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402762:	f04f 30ff 	mov.w	r0, #4294967295
  402766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  402768:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40276c:	6a01      	ldr	r1, [r0, #32]
  40276e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402772:	4b2d      	ldr	r3, [pc, #180]	; (402828 <get_fat+0xe4>)
  402774:	4798      	blx	r3
  402776:	b110      	cbz	r0, 40277e <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402778:	f04f 30ff 	mov.w	r0, #4294967295
  40277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  40277e:	f3c7 0308 	ubfx	r3, r7, #0, #9
  402782:	4433      	add	r3, r6
  402784:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  402788:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40278a:	6a31      	ldr	r1, [r6, #32]
  40278c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402790:	4630      	mov	r0, r6
  402792:	4b25      	ldr	r3, [pc, #148]	; (402828 <get_fat+0xe4>)
  402794:	4798      	blx	r3
  402796:	b110      	cbz	r0, 40279e <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402798:	f04f 30ff 	mov.w	r0, #4294967295
  40279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  40279e:	f3c7 0708 	ubfx	r7, r7, #0, #9
  4027a2:	19f0      	adds	r0, r6, r7
  4027a4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4027a8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  4027ac:	f014 0f01 	tst.w	r4, #1
  4027b0:	bf14      	ite	ne
  4027b2:	0900      	lsrne	r0, r0, #4
  4027b4:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  4027b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  4027ba:	6a01      	ldr	r1, [r0, #32]
  4027bc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  4027c0:	4b19      	ldr	r3, [pc, #100]	; (402828 <get_fat+0xe4>)
  4027c2:	4798      	blx	r3
  4027c4:	b110      	cbz	r0, 4027cc <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4027c6:	f04f 30ff 	mov.w	r0, #4294967295
  4027ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  4027cc:	0060      	lsls	r0, r4, #1
  4027ce:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  4027d2:	4430      	add	r0, r6
  4027d4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4027d8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4027dc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4027e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  4027e2:	6a01      	ldr	r1, [r0, #32]
  4027e4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4027e8:	4b0f      	ldr	r3, [pc, #60]	; (402828 <get_fat+0xe4>)
  4027ea:	4798      	blx	r3
  4027ec:	b110      	cbz	r0, 4027f4 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4027ee:	f04f 30ff 	mov.w	r0, #4294967295
}
  4027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  4027f4:	00a0      	lsls	r0, r4, #2
  4027f6:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  4027fa:	f100 0230 	add.w	r2, r0, #48	; 0x30
  4027fe:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  402800:	78d1      	ldrb	r1, [r2, #3]
  402802:	7893      	ldrb	r3, [r2, #2]
  402804:	041b      	lsls	r3, r3, #16
  402806:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40280a:	4430      	add	r0, r6
  40280c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402810:	4318      	orrs	r0, r3
  402812:	7853      	ldrb	r3, [r2, #1]
  402814:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402818:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  40281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  40281e:	2001      	movs	r0, #1
  402820:	4770      	bx	lr
  402822:	2001      	movs	r0, #1
  402824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402826:	bf00      	nop
  402828:	004026b5 	.word	0x004026b5

0040282c <dir_sdi>:
{
  40282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40282e:	4605      	mov	r5, r0
  402830:	460c      	mov	r4, r1
	dj->index = idx;
  402832:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  402834:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  402836:	2901      	cmp	r1, #1
  402838:	d03d      	beq.n	4028b6 <dir_sdi+0x8a>
  40283a:	6803      	ldr	r3, [r0, #0]
  40283c:	699a      	ldr	r2, [r3, #24]
  40283e:	4291      	cmp	r1, r2
  402840:	d301      	bcc.n	402846 <dir_sdi+0x1a>
		return FR_INT_ERR;
  402842:	2002      	movs	r0, #2
  402844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402846:	b961      	cbnz	r1, 402862 <dir_sdi+0x36>
  402848:	781a      	ldrb	r2, [r3, #0]
  40284a:	2a03      	cmp	r2, #3
  40284c:	d006      	beq.n	40285c <dir_sdi+0x30>
		dj->clust = clst;
  40284e:	2200      	movs	r2, #0
  402850:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402852:	891a      	ldrh	r2, [r3, #8]
  402854:	42a2      	cmp	r2, r4
  402856:	d821      	bhi.n	40289c <dir_sdi+0x70>
			return FR_INT_ERR;
  402858:	2002      	movs	r0, #2
  40285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  40285c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40285e:	2900      	cmp	r1, #0
  402860:	d0f5      	beq.n	40284e <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402862:	789e      	ldrb	r6, [r3, #2]
  402864:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402866:	42b4      	cmp	r4, r6
  402868:	d310      	bcc.n	40288c <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40286a:	4f17      	ldr	r7, [pc, #92]	; (4028c8 <dir_sdi+0x9c>)
  40286c:	6828      	ldr	r0, [r5, #0]
  40286e:	47b8      	blx	r7
  402870:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402872:	f1b0 3fff 	cmp.w	r0, #4294967295
  402876:	d020      	beq.n	4028ba <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402878:	2801      	cmp	r0, #1
  40287a:	d920      	bls.n	4028be <dir_sdi+0x92>
  40287c:	682b      	ldr	r3, [r5, #0]
  40287e:	699b      	ldr	r3, [r3, #24]
  402880:	4298      	cmp	r0, r3
  402882:	d21e      	bcs.n	4028c2 <dir_sdi+0x96>
			idx -= ic;
  402884:	1ba4      	subs	r4, r4, r6
  402886:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  402888:	42a6      	cmp	r6, r4
  40288a:	d9ef      	bls.n	40286c <dir_sdi+0x40>
		dj->clust = clst;
  40288c:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40288e:	6828      	ldr	r0, [r5, #0]
  402890:	4b0e      	ldr	r3, [pc, #56]	; (4028cc <dir_sdi+0xa0>)
  402892:	4798      	blx	r3
  402894:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  402898:	6128      	str	r0, [r5, #16]
  40289a:	e003      	b.n	4028a4 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40289e:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  4028a2:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4028a4:	682b      	ldr	r3, [r5, #0]
  4028a6:	3330      	adds	r3, #48	; 0x30
  4028a8:	f004 040f 	and.w	r4, r4, #15
  4028ac:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  4028b0:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  4028b2:	2000      	movs	r0, #0
  4028b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  4028b6:	2002      	movs	r0, #2
  4028b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4028ba:	2001      	movs	r0, #1
  4028bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  4028be:	2002      	movs	r0, #2
  4028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028c2:	2002      	movs	r0, #2
}
  4028c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028c6:	bf00      	nop
  4028c8:	00402745 	.word	0x00402745
  4028cc:	0040224f 	.word	0x0040224f

004028d0 <put_fat>:
{
  4028d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4028d4:	2901      	cmp	r1, #1
  4028d6:	f240 808f 	bls.w	4029f8 <put_fat+0x128>
  4028da:	6983      	ldr	r3, [r0, #24]
  4028dc:	4299      	cmp	r1, r3
  4028de:	d301      	bcc.n	4028e4 <put_fat+0x14>
		res = FR_INT_ERR;
  4028e0:	2702      	movs	r7, #2
	return res;
  4028e2:	e08a      	b.n	4029fa <put_fat+0x12a>
  4028e4:	4615      	mov	r5, r2
  4028e6:	460c      	mov	r4, r1
  4028e8:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  4028ea:	7803      	ldrb	r3, [r0, #0]
  4028ec:	2b02      	cmp	r3, #2
  4028ee:	d04e      	beq.n	40298e <put_fat+0xbe>
  4028f0:	2b03      	cmp	r3, #3
  4028f2:	d05f      	beq.n	4029b4 <put_fat+0xe4>
  4028f4:	2b01      	cmp	r3, #1
  4028f6:	d003      	beq.n	402900 <put_fat+0x30>
			res = FR_INT_ERR;
  4028f8:	2702      	movs	r7, #2
		fs->wflag = 1;
  4028fa:	2301      	movs	r3, #1
  4028fc:	7133      	strb	r3, [r6, #4]
  4028fe:	e07c      	b.n	4029fa <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  402900:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402904:	6a01      	ldr	r1, [r0, #32]
  402906:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40290a:	4b3d      	ldr	r3, [pc, #244]	; (402a00 <put_fat+0x130>)
  40290c:	4798      	blx	r3
			if (res != FR_OK) break;
  40290e:	4607      	mov	r7, r0
  402910:	2800      	cmp	r0, #0
  402912:	d1f2      	bne.n	4028fa <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  402914:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402918:	f014 0f01 	tst.w	r4, #1
  40291c:	d01c      	beq.n	402958 <put_fat+0x88>
  40291e:	4433      	add	r3, r6
  402920:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402924:	f002 020f 	and.w	r2, r2, #15
  402928:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  40292c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402930:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402934:	2301      	movs	r3, #1
  402936:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402938:	6a31      	ldr	r1, [r6, #32]
  40293a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40293e:	4630      	mov	r0, r6
  402940:	4b2f      	ldr	r3, [pc, #188]	; (402a00 <put_fat+0x130>)
  402942:	4798      	blx	r3
			if (res != FR_OK) break;
  402944:	2800      	cmp	r0, #0
  402946:	d153      	bne.n	4029f0 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  402948:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40294c:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402950:	44b0      	add	r8, r6
  402952:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402956:	e7d0      	b.n	4028fa <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402958:	4433      	add	r3, r6
  40295a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  40295e:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402962:	2301      	movs	r3, #1
  402964:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402966:	6a31      	ldr	r1, [r6, #32]
  402968:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40296c:	4630      	mov	r0, r6
  40296e:	4b24      	ldr	r3, [pc, #144]	; (402a00 <put_fat+0x130>)
  402970:	4798      	blx	r3
			if (res != FR_OK) break;
  402972:	2800      	cmp	r0, #0
  402974:	d13e      	bne.n	4029f4 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  402976:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40297a:	eb06 0308 	add.w	r3, r6, r8
  40297e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402982:	f023 030f 	bic.w	r3, r3, #15
  402986:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40298a:	431a      	orrs	r2, r3
  40298c:	e7e0      	b.n	402950 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40298e:	6a01      	ldr	r1, [r0, #32]
  402990:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402994:	4b1a      	ldr	r3, [pc, #104]	; (402a00 <put_fat+0x130>)
  402996:	4798      	blx	r3
			if (res != FR_OK) break;
  402998:	4607      	mov	r7, r0
  40299a:	2800      	cmp	r0, #0
  40299c:	d1ad      	bne.n	4028fa <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40299e:	0063      	lsls	r3, r4, #1
  4029a0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  4029a4:	4433      	add	r3, r6
  4029a6:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  4029aa:	f3c5 2207 	ubfx	r2, r5, #8, #8
  4029ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  4029b2:	e7a2      	b.n	4028fa <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4029b4:	6a01      	ldr	r1, [r0, #32]
  4029b6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4029ba:	4b11      	ldr	r3, [pc, #68]	; (402a00 <put_fat+0x130>)
  4029bc:	4798      	blx	r3
			if (res != FR_OK) break;
  4029be:	4607      	mov	r7, r0
  4029c0:	2800      	cmp	r0, #0
  4029c2:	d19a      	bne.n	4028fa <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  4029c4:	00a1      	lsls	r1, r4, #2
  4029c6:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4029ca:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4029ce:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  4029d0:	78da      	ldrb	r2, [r3, #3]
  4029d2:	0612      	lsls	r2, r2, #24
  4029d4:	4431      	add	r1, r6
  4029d6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  4029da:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  4029dc:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  4029e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
  4029e4:	7059      	strb	r1, [r3, #1]
  4029e6:	0c11      	lsrs	r1, r2, #16
  4029e8:	7099      	strb	r1, [r3, #2]
  4029ea:	0e12      	lsrs	r2, r2, #24
  4029ec:	70da      	strb	r2, [r3, #3]
			break;
  4029ee:	e784      	b.n	4028fa <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4029f0:	4607      	mov	r7, r0
  4029f2:	e782      	b.n	4028fa <put_fat+0x2a>
  4029f4:	4607      	mov	r7, r0
  4029f6:	e780      	b.n	4028fa <put_fat+0x2a>
		res = FR_INT_ERR;
  4029f8:	2702      	movs	r7, #2
}
  4029fa:	4638      	mov	r0, r7
  4029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a00:	004026b5 	.word	0x004026b5

00402a04 <create_chain>:
{
  402a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a08:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  402a0a:	4688      	mov	r8, r1
  402a0c:	b941      	cbnz	r1, 402a20 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  402a0e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402a10:	b186      	cbz	r6, 402a34 <create_chain+0x30>
  402a12:	6983      	ldr	r3, [r0, #24]
  402a14:	429e      	cmp	r6, r3
  402a16:	bf28      	it	cs
  402a18:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  402a1a:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402a1c:	4f27      	ldr	r7, [pc, #156]	; (402abc <create_chain+0xb8>)
  402a1e:	e017      	b.n	402a50 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  402a20:	4b26      	ldr	r3, [pc, #152]	; (402abc <create_chain+0xb8>)
  402a22:	4798      	blx	r3
  402a24:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402a26:	2801      	cmp	r0, #1
  402a28:	d93e      	bls.n	402aa8 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  402a2a:	69aa      	ldr	r2, [r5, #24]
  402a2c:	4290      	cmp	r0, r2
  402a2e:	d340      	bcc.n	402ab2 <create_chain+0xae>
		scl = clst;
  402a30:	4646      	mov	r6, r8
  402a32:	e7f2      	b.n	402a1a <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402a34:	2601      	movs	r6, #1
  402a36:	e7f0      	b.n	402a1a <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402a38:	4621      	mov	r1, r4
  402a3a:	4628      	mov	r0, r5
  402a3c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402a3e:	4603      	mov	r3, r0
  402a40:	b170      	cbz	r0, 402a60 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402a42:	f1b0 3fff 	cmp.w	r0, #4294967295
  402a46:	d034      	beq.n	402ab2 <create_chain+0xae>
  402a48:	2801      	cmp	r0, #1
  402a4a:	d032      	beq.n	402ab2 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402a4c:	42b4      	cmp	r4, r6
  402a4e:	d02f      	beq.n	402ab0 <create_chain+0xac>
		ncl++;							/* Next cluster */
  402a50:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402a52:	69ab      	ldr	r3, [r5, #24]
  402a54:	429c      	cmp	r4, r3
  402a56:	d3ef      	bcc.n	402a38 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  402a58:	2e01      	cmp	r6, #1
  402a5a:	d927      	bls.n	402aac <create_chain+0xa8>
			ncl = 2;
  402a5c:	2402      	movs	r4, #2
  402a5e:	e7eb      	b.n	402a38 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  402a60:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402a64:	4621      	mov	r1, r4
  402a66:	4628      	mov	r0, r5
  402a68:	4b15      	ldr	r3, [pc, #84]	; (402ac0 <create_chain+0xbc>)
  402a6a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402a6c:	4603      	mov	r3, r0
  402a6e:	b9a8      	cbnz	r0, 402a9c <create_chain+0x98>
  402a70:	f1b8 0f00 	cmp.w	r8, #0
  402a74:	d10a      	bne.n	402a8c <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  402a76:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402a78:	692b      	ldr	r3, [r5, #16]
  402a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a7e:	d01b      	beq.n	402ab8 <create_chain+0xb4>
			fs->free_clust--;
  402a80:	3b01      	subs	r3, #1
  402a82:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402a84:	2301      	movs	r3, #1
  402a86:	716b      	strb	r3, [r5, #5]
  402a88:	4623      	mov	r3, r4
  402a8a:	e012      	b.n	402ab2 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402a8c:	4622      	mov	r2, r4
  402a8e:	4641      	mov	r1, r8
  402a90:	4628      	mov	r0, r5
  402a92:	4b0b      	ldr	r3, [pc, #44]	; (402ac0 <create_chain+0xbc>)
  402a94:	4798      	blx	r3
	if (res == FR_OK) {
  402a96:	4603      	mov	r3, r0
  402a98:	2800      	cmp	r0, #0
  402a9a:	d0ec      	beq.n	402a76 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402a9c:	2b01      	cmp	r3, #1
  402a9e:	bf0c      	ite	eq
  402aa0:	f04f 33ff 	moveq.w	r3, #4294967295
  402aa4:	2301      	movne	r3, #1
  402aa6:	e004      	b.n	402ab2 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402aa8:	2301      	movs	r3, #1
  402aaa:	e002      	b.n	402ab2 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  402aac:	2300      	movs	r3, #0
  402aae:	e000      	b.n	402ab2 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402ab0:	2300      	movs	r3, #0
}
  402ab2:	4618      	mov	r0, r3
  402ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ab8:	4623      	mov	r3, r4
  402aba:	e7fa      	b.n	402ab2 <create_chain+0xae>
  402abc:	00402745 	.word	0x00402745
  402ac0:	004028d1 	.word	0x004028d1

00402ac4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402ac4:	2901      	cmp	r1, #1
  402ac6:	d92e      	bls.n	402b26 <remove_chain+0x62>
{
  402ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402acc:	4604      	mov	r4, r0
  402ace:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402ad0:	6983      	ldr	r3, [r0, #24]
  402ad2:	4299      	cmp	r1, r3
  402ad4:	d303      	bcc.n	402ade <remove_chain+0x1a>
		res = FR_INT_ERR;
  402ad6:	2202      	movs	r2, #2
}
  402ad8:	4610      	mov	r0, r2
  402ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402ade:	4f16      	ldr	r7, [pc, #88]	; (402b38 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402ae0:	f04f 0900 	mov.w	r9, #0
  402ae4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 402b3c <remove_chain+0x78>
  402ae8:	e003      	b.n	402af2 <remove_chain+0x2e>
  402aea:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402aec:	69a3      	ldr	r3, [r4, #24]
  402aee:	42ab      	cmp	r3, r5
  402af0:	d9f2      	bls.n	402ad8 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402af2:	4631      	mov	r1, r6
  402af4:	4620      	mov	r0, r4
  402af6:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  402af8:	4605      	mov	r5, r0
  402afa:	b1b8      	cbz	r0, 402b2c <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402afc:	2801      	cmp	r0, #1
  402afe:	d017      	beq.n	402b30 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402b00:	f1b0 3fff 	cmp.w	r0, #4294967295
  402b04:	d016      	beq.n	402b34 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402b06:	464a      	mov	r2, r9
  402b08:	4631      	mov	r1, r6
  402b0a:	4620      	mov	r0, r4
  402b0c:	47c0      	blx	r8
			if (res != FR_OK) break;
  402b0e:	4602      	mov	r2, r0
  402b10:	2800      	cmp	r0, #0
  402b12:	d1e1      	bne.n	402ad8 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  402b14:	6923      	ldr	r3, [r4, #16]
  402b16:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b1a:	d0e6      	beq.n	402aea <remove_chain+0x26>
				fs->free_clust++;
  402b1c:	3301      	adds	r3, #1
  402b1e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  402b20:	2301      	movs	r3, #1
  402b22:	7163      	strb	r3, [r4, #5]
  402b24:	e7e1      	b.n	402aea <remove_chain+0x26>
		res = FR_INT_ERR;
  402b26:	2202      	movs	r2, #2
}
  402b28:	4610      	mov	r0, r2
  402b2a:	4770      	bx	lr
  402b2c:	2200      	movs	r2, #0
  402b2e:	e7d3      	b.n	402ad8 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402b30:	2202      	movs	r2, #2
  402b32:	e7d1      	b.n	402ad8 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402b34:	2201      	movs	r2, #1
  402b36:	e7cf      	b.n	402ad8 <remove_chain+0x14>
  402b38:	00402745 	.word	0x00402745
  402b3c:	004028d1 	.word	0x004028d1

00402b40 <dir_next>:
{
  402b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  402b44:	88c4      	ldrh	r4, [r0, #6]
  402b46:	3401      	adds	r4, #1
  402b48:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402b4a:	b914      	cbnz	r4, 402b52 <dir_next+0x12>
		return FR_NO_FILE;
  402b4c:	2004      	movs	r0, #4
  402b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402b52:	6903      	ldr	r3, [r0, #16]
  402b54:	b913      	cbnz	r3, 402b5c <dir_next+0x1c>
		return FR_NO_FILE;
  402b56:	2004      	movs	r0, #4
  402b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b5c:	460e      	mov	r6, r1
  402b5e:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  402b60:	f014 070f 	ands.w	r7, r4, #15
  402b64:	d110      	bne.n	402b88 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  402b66:	3301      	adds	r3, #1
  402b68:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  402b6a:	68c1      	ldr	r1, [r0, #12]
  402b6c:	b931      	cbnz	r1, 402b7c <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  402b6e:	6803      	ldr	r3, [r0, #0]
  402b70:	891b      	ldrh	r3, [r3, #8]
  402b72:	42a3      	cmp	r3, r4
  402b74:	d808      	bhi.n	402b88 <dir_next+0x48>
				return FR_NO_FILE;
  402b76:	2004      	movs	r0, #4
  402b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402b7c:	6800      	ldr	r0, [r0, #0]
  402b7e:	7883      	ldrb	r3, [r0, #2]
  402b80:	3b01      	subs	r3, #1
  402b82:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  402b86:	d008      	beq.n	402b9a <dir_next+0x5a>
	dj->index = i;
  402b88:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  402b8a:	682b      	ldr	r3, [r5, #0]
  402b8c:	3330      	adds	r3, #48	; 0x30
  402b8e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  402b92:	616b      	str	r3, [r5, #20]
	return FR_OK;
  402b94:	2000      	movs	r0, #0
  402b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  402b9a:	4b32      	ldr	r3, [pc, #200]	; (402c64 <dir_next+0x124>)
  402b9c:	4798      	blx	r3
  402b9e:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  402ba0:	2801      	cmp	r0, #1
  402ba2:	d94d      	bls.n	402c40 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402ba4:	f1b0 3fff 	cmp.w	r0, #4294967295
  402ba8:	d04d      	beq.n	402c46 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  402baa:	6828      	ldr	r0, [r5, #0]
  402bac:	6983      	ldr	r3, [r0, #24]
  402bae:	4598      	cmp	r8, r3
  402bb0:	d33e      	bcc.n	402c30 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402bb2:	b916      	cbnz	r6, 402bba <dir_next+0x7a>
  402bb4:	2004      	movs	r0, #4
  402bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  402bba:	68e9      	ldr	r1, [r5, #12]
  402bbc:	4b2a      	ldr	r3, [pc, #168]	; (402c68 <dir_next+0x128>)
  402bbe:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402bc0:	4680      	mov	r8, r0
  402bc2:	b910      	cbnz	r0, 402bca <dir_next+0x8a>
  402bc4:	2007      	movs	r0, #7
  402bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402bca:	2801      	cmp	r0, #1
  402bcc:	d03e      	beq.n	402c4c <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402bce:	f1b0 3fff 	cmp.w	r0, #4294967295
  402bd2:	d03e      	beq.n	402c52 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402bd4:	2100      	movs	r1, #0
  402bd6:	6828      	ldr	r0, [r5, #0]
  402bd8:	4b24      	ldr	r3, [pc, #144]	; (402c6c <dir_next+0x12c>)
  402bda:	4798      	blx	r3
  402bdc:	2800      	cmp	r0, #0
  402bde:	d13b      	bne.n	402c58 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402be0:	6828      	ldr	r0, [r5, #0]
  402be2:	f44f 7200 	mov.w	r2, #512	; 0x200
  402be6:	2100      	movs	r1, #0
  402be8:	3030      	adds	r0, #48	; 0x30
  402bea:	4b21      	ldr	r3, [pc, #132]	; (402c70 <dir_next+0x130>)
  402bec:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402bee:	682e      	ldr	r6, [r5, #0]
  402bf0:	4641      	mov	r1, r8
  402bf2:	4630      	mov	r0, r6
  402bf4:	4b1f      	ldr	r3, [pc, #124]	; (402c74 <dir_next+0x134>)
  402bf6:	4798      	blx	r3
  402bf8:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402bfa:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402bfc:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402c00:	46b2      	mov	sl, r6
  402c02:	f8df 9068 	ldr.w	r9, [pc, #104]	; 402c6c <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402c06:	682b      	ldr	r3, [r5, #0]
  402c08:	7899      	ldrb	r1, [r3, #2]
  402c0a:	b2f2      	uxtb	r2, r6
  402c0c:	4291      	cmp	r1, r2
  402c0e:	d90b      	bls.n	402c28 <dir_next+0xe8>
						dj->fs->wflag = 1;
  402c10:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402c14:	4651      	mov	r1, sl
  402c16:	6828      	ldr	r0, [r5, #0]
  402c18:	47c8      	blx	r9
  402c1a:	3601      	adds	r6, #1
  402c1c:	b9f8      	cbnz	r0, 402c5e <dir_next+0x11e>
						dj->fs->winsect++;
  402c1e:	682a      	ldr	r2, [r5, #0]
  402c20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402c22:	3301      	adds	r3, #1
  402c24:	62d3      	str	r3, [r2, #44]	; 0x2c
  402c26:	e7ee      	b.n	402c06 <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  402c28:	4616      	mov	r6, r2
  402c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402c2c:	1b96      	subs	r6, r2, r6
  402c2e:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  402c30:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402c34:	4641      	mov	r1, r8
  402c36:	6828      	ldr	r0, [r5, #0]
  402c38:	4b0e      	ldr	r3, [pc, #56]	; (402c74 <dir_next+0x134>)
  402c3a:	4798      	blx	r3
  402c3c:	6128      	str	r0, [r5, #16]
  402c3e:	e7a3      	b.n	402b88 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  402c40:	2002      	movs	r0, #2
  402c42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402c46:	2001      	movs	r0, #1
  402c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402c4c:	2002      	movs	r0, #2
  402c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402c52:	2001      	movs	r0, #1
  402c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402c58:	2001      	movs	r0, #1
  402c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402c5e:	2001      	movs	r0, #1
}
  402c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c64:	00402745 	.word	0x00402745
  402c68:	00402a05 	.word	0x00402a05
  402c6c:	004026b5 	.word	0x004026b5
  402c70:	00402241 	.word	0x00402241
  402c74:	0040224f 	.word	0x0040224f

00402c78 <dir_find>:
{
  402c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c7c:	b085      	sub	sp, #20
  402c7e:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  402c80:	2100      	movs	r1, #0
  402c82:	4b62      	ldr	r3, [pc, #392]	; (402e0c <dir_find+0x194>)
  402c84:	4798      	blx	r3
	if (res != FR_OK) return res;
  402c86:	4680      	mov	r8, r0
  402c88:	bb08      	cbnz	r0, 402cce <dir_find+0x56>
  402c8a:	f04f 0bff 	mov.w	fp, #255	; 0xff
  402c8e:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  402c90:	4f5f      	ldr	r7, [pc, #380]	; (402e10 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402c92:	46da      	mov	sl, fp
  402c94:	e095      	b.n	402dc2 <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  402c96:	2a0f      	cmp	r2, #15
  402c98:	d01d      	beq.n	402cd6 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  402c9a:	f1b9 0f00 	cmp.w	r9, #0
  402c9e:	d104      	bne.n	402caa <dir_find+0x32>
  402ca0:	4620      	mov	r0, r4
  402ca2:	4b5c      	ldr	r3, [pc, #368]	; (402e14 <dir_find+0x19c>)
  402ca4:	4798      	blx	r3
  402ca6:	4582      	cmp	sl, r0
  402ca8:	d011      	beq.n	402cce <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402cae:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402cb0:	69ab      	ldr	r3, [r5, #24]
  402cb2:	7ada      	ldrb	r2, [r3, #11]
  402cb4:	f012 0f01 	tst.w	r2, #1
  402cb8:	d17a      	bne.n	402db0 <dir_find+0x138>
  402cba:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  402cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
  402cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
  402cc6:	4291      	cmp	r1, r2
  402cc8:	d16c      	bne.n	402da4 <dir_find+0x12c>
  402cca:	42a0      	cmp	r0, r4
  402ccc:	d1f7      	bne.n	402cbe <dir_find+0x46>
}
  402cce:	4640      	mov	r0, r8
  402cd0:	b005      	add	sp, #20
  402cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  402cd6:	f8d5 801c 	ldr.w	r8, [r5, #28]
  402cda:	f1b8 0f00 	cmp.w	r8, #0
  402cde:	d069      	beq.n	402db4 <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  402ce0:	f016 0f40 	tst.w	r6, #64	; 0x40
  402ce4:	d00c      	beq.n	402d00 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  402ce6:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  402cea:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  402cee:	88eb      	ldrh	r3, [r5, #6]
  402cf0:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402cf2:	f894 b00d 	ldrb.w	fp, [r4, #13]
  402cf6:	45d3      	cmp	fp, sl
  402cf8:	d008      	beq.n	402d0c <dir_find+0x94>
  402cfa:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402cfe:	e059      	b.n	402db4 <dir_find+0x13c>
  402d00:	45b1      	cmp	r9, r6
  402d02:	bf18      	it	ne
  402d04:	f04f 09ff 	movne.w	r9, #255	; 0xff
  402d08:	d154      	bne.n	402db4 <dir_find+0x13c>
  402d0a:	e7f2      	b.n	402cf2 <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  402d0c:	f894 a000 	ldrb.w	sl, [r4]
  402d10:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  402d14:	f10a 3aff 	add.w	sl, sl, #4294967295
  402d18:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  402d1c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402d20:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 402e20 <dir_find+0x1a8>
  402d24:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  402d28:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402d2a:	9603      	str	r6, [sp, #12]
  402d2c:	f8cd b004 	str.w	fp, [sp, #4]
  402d30:	461e      	mov	r6, r3
  402d32:	9502      	str	r5, [sp, #8]
  402d34:	e00f      	b.n	402d56 <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402d36:	4618      	mov	r0, r3
  402d38:	4b37      	ldr	r3, [pc, #220]	; (402e18 <dir_find+0x1a0>)
  402d3a:	4798      	blx	r3
  402d3c:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402d3e:	2efe      	cmp	r6, #254	; 0xfe
  402d40:	d85b      	bhi.n	402dfa <dir_find+0x182>
  402d42:	1c75      	adds	r5, r6, #1
  402d44:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  402d48:	4b33      	ldr	r3, [pc, #204]	; (402e18 <dir_find+0x1a0>)
  402d4a:	4798      	blx	r3
  402d4c:	4583      	cmp	fp, r0
  402d4e:	d158      	bne.n	402e02 <dir_find+0x18a>
  402d50:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  402d52:	45d1      	cmp	r9, sl
  402d54:	d013      	beq.n	402d7e <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402d56:	f819 2b01 	ldrb.w	r2, [r9], #1
  402d5a:	18a3      	adds	r3, r4, r2
  402d5c:	7859      	ldrb	r1, [r3, #1]
  402d5e:	5ca3      	ldrb	r3, [r4, r2]
  402d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  402d64:	2800      	cmp	r0, #0
  402d66:	d1e6      	bne.n	402d36 <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402d6c:	4293      	cmp	r3, r2
  402d6e:	d0f0      	beq.n	402d52 <dir_find+0xda>
  402d70:	f8dd b004 	ldr.w	fp, [sp, #4]
  402d74:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402d76:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402d78:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402d7c:	e01a      	b.n	402db4 <dir_find+0x13c>
  402d7e:	f8dd b004 	ldr.w	fp, [sp, #4]
  402d82:	4632      	mov	r2, r6
  402d84:	9e03      	ldr	r6, [sp, #12]
  402d86:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402d88:	7823      	ldrb	r3, [r4, #0]
  402d8a:	f013 0f40 	tst.w	r3, #64	; 0x40
  402d8e:	d004      	beq.n	402d9a <dir_find+0x122>
  402d90:	b118      	cbz	r0, 402d9a <dir_find+0x122>
  402d92:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  402d96:	2b00      	cmp	r3, #0
  402d98:	d1ed      	bne.n	402d76 <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402d9a:	3e01      	subs	r6, #1
  402d9c:	fa5f f986 	uxtb.w	r9, r6
  402da0:	46da      	mov	sl, fp
  402da2:	e007      	b.n	402db4 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402da4:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402da8:	e004      	b.n	402db4 <dir_find+0x13c>
			ord = 0xFF;
  402daa:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402dae:	e001      	b.n	402db4 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402db0:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  402db4:	2100      	movs	r1, #0
  402db6:	4628      	mov	r0, r5
  402db8:	4b18      	ldr	r3, [pc, #96]	; (402e1c <dir_find+0x1a4>)
  402dba:	4798      	blx	r3
	} while (res == FR_OK);
  402dbc:	4680      	mov	r8, r0
  402dbe:	2800      	cmp	r0, #0
  402dc0:	d185      	bne.n	402cce <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  402dc2:	6929      	ldr	r1, [r5, #16]
  402dc4:	6828      	ldr	r0, [r5, #0]
  402dc6:	47b8      	blx	r7
		if (res != FR_OK) break;
  402dc8:	4680      	mov	r8, r0
  402dca:	2800      	cmp	r0, #0
  402dcc:	f47f af7f 	bne.w	402cce <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402dd0:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  402dd2:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402dd4:	b176      	cbz	r6, 402df4 <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  402dd6:	7ae3      	ldrb	r3, [r4, #11]
  402dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402ddc:	2ee5      	cmp	r6, #229	; 0xe5
  402dde:	d0e4      	beq.n	402daa <dir_find+0x132>
  402de0:	f013 0f08 	tst.w	r3, #8
  402de4:	f43f af57 	beq.w	402c96 <dir_find+0x1e>
  402de8:	2a0f      	cmp	r2, #15
  402dea:	f43f af74 	beq.w	402cd6 <dir_find+0x5e>
			ord = 0xFF;
  402dee:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402df2:	e7df      	b.n	402db4 <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402df4:	f04f 0804 	mov.w	r8, #4
  402df8:	e769      	b.n	402cce <dir_find+0x56>
  402dfa:	f8dd b004 	ldr.w	fp, [sp, #4]
  402dfe:	9d02      	ldr	r5, [sp, #8]
  402e00:	e7b9      	b.n	402d76 <dir_find+0xfe>
  402e02:	f8dd b004 	ldr.w	fp, [sp, #4]
  402e06:	9d02      	ldr	r5, [sp, #8]
  402e08:	e7b5      	b.n	402d76 <dir_find+0xfe>
  402e0a:	bf00      	nop
  402e0c:	0040282d 	.word	0x0040282d
  402e10:	004026b5 	.word	0x004026b5
  402e14:	00402265 	.word	0x00402265
  402e18:	004039fd 	.word	0x004039fd
  402e1c:	00402b41 	.word	0x00402b41
  402e20:	004070a4 	.word	0x004070a4

00402e24 <dir_register>:
{
  402e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e28:	b089      	sub	sp, #36	; 0x24
  402e2a:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  402e2c:	6985      	ldr	r5, [r0, #24]
  402e2e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  402e32:	220c      	movs	r2, #12
  402e34:	4629      	mov	r1, r5
  402e36:	a805      	add	r0, sp, #20
  402e38:	4ba8      	ldr	r3, [pc, #672]	; (4030dc <dir_register+0x2b8>)
  402e3a:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  402e3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402e40:	f013 0f01 	tst.w	r3, #1
  402e44:	d079      	beq.n	402f3a <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402e46:	2300      	movs	r3, #0
  402e48:	72eb      	strb	r3, [r5, #11]
  402e4a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  402e4c:	220b      	movs	r2, #11
  402e4e:	a905      	add	r1, sp, #20
  402e50:	4628      	mov	r0, r5
  402e52:	4ba2      	ldr	r3, [pc, #648]	; (4030dc <dir_register+0x2b8>)
  402e54:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  402e56:	2701      	movs	r7, #1
  402e58:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402e5a:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402e5e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 4030fc <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  402e62:	f8df a278 	ldr.w	sl, [pc, #632]	; 4030dc <dir_register+0x2b8>
  402e66:	e032      	b.n	402ece <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  402e68:	463b      	mov	r3, r7
  402e6a:	e030      	b.n	402ece <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402e6c:	4613      	mov	r3, r2
  402e6e:	e002      	b.n	402e76 <dir_register+0x52>
  402e70:	2300      	movs	r3, #0
  402e72:	e000      	b.n	402e76 <dir_register+0x52>
  402e74:	4613      	mov	r3, r2
  402e76:	442b      	add	r3, r5
  402e78:	e005      	b.n	402e86 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402e7a:	4641      	mov	r1, r8
  402e7c:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  402e80:	1b59      	subs	r1, r3, r5
  402e82:	2907      	cmp	r1, #7
  402e84:	d807      	bhi.n	402e96 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402e86:	2a07      	cmp	r2, #7
  402e88:	d8f7      	bhi.n	402e7a <dir_register+0x56>
  402e8a:	a908      	add	r1, sp, #32
  402e8c:	4411      	add	r1, r2
  402e8e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  402e92:	3201      	adds	r2, #1
  402e94:	e7f2      	b.n	402e7c <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402e96:	4620      	mov	r0, r4
  402e98:	47c8      	blx	r9
			if (res != FR_OK) break;
  402e9a:	4606      	mov	r6, r0
  402e9c:	2800      	cmp	r0, #0
  402e9e:	d13e      	bne.n	402f1e <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  402ea0:	3701      	adds	r7, #1
  402ea2:	b2bf      	uxth	r7, r7
  402ea4:	2f64      	cmp	r7, #100	; 0x64
  402ea6:	d038      	beq.n	402f1a <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  402ea8:	220b      	movs	r2, #11
  402eaa:	a905      	add	r1, sp, #20
  402eac:	4628      	mov	r0, r5
  402eae:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402eb0:	2f05      	cmp	r7, #5
  402eb2:	d9d9      	bls.n	402e68 <dir_register+0x44>
  402eb4:	463b      	mov	r3, r7
  402eb6:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402eb8:	03da      	lsls	r2, r3, #15
  402eba:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  402ebe:	f831 2b02 	ldrh.w	r2, [r1], #2
  402ec2:	fa12 f383 	uxtah	r3, r2, r3
  402ec6:	b29b      	uxth	r3, r3
  402ec8:	880a      	ldrh	r2, [r1, #0]
  402eca:	2a00      	cmp	r2, #0
  402ecc:	d1f4      	bne.n	402eb8 <dir_register+0x94>
  402ece:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  402ed2:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  402ed4:	f003 000f 	and.w	r0, r3, #15
  402ed8:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  402edc:	2939      	cmp	r1, #57	; 0x39
  402ede:	bf88      	it	hi
  402ee0:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  402ee4:	3a01      	subs	r2, #1
  402ee6:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  402eea:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  402eee:	2b00      	cmp	r3, #0
  402ef0:	d1f0      	bne.n	402ed4 <dir_register+0xb0>
	ns[i] = '~';
  402ef2:	217e      	movs	r1, #126	; 0x7e
  402ef4:	ab08      	add	r3, sp, #32
  402ef6:	4413      	add	r3, r2
  402ef8:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402efc:	2a00      	cmp	r2, #0
  402efe:	d0b5      	beq.n	402e6c <dir_register+0x48>
  402f00:	782b      	ldrb	r3, [r5, #0]
  402f02:	2b20      	cmp	r3, #32
  402f04:	d0b4      	beq.n	402e70 <dir_register+0x4c>
  402f06:	4629      	mov	r1, r5
  402f08:	2300      	movs	r3, #0
  402f0a:	3301      	adds	r3, #1
  402f0c:	429a      	cmp	r2, r3
  402f0e:	d0b1      	beq.n	402e74 <dir_register+0x50>
  402f10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402f14:	2820      	cmp	r0, #32
  402f16:	d1f8      	bne.n	402f0a <dir_register+0xe6>
  402f18:	e7ad      	b.n	402e76 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402f1a:	2607      	movs	r6, #7
  402f1c:	e004      	b.n	402f28 <dir_register+0x104>
  402f1e:	2f64      	cmp	r7, #100	; 0x64
  402f20:	f000 809f 	beq.w	403062 <dir_register+0x23e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  402f24:	2804      	cmp	r0, #4
  402f26:	d003      	beq.n	402f30 <dir_register+0x10c>
}
  402f28:	4630      	mov	r0, r6
  402f2a:	b009      	add	sp, #36	; 0x24
  402f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402f30:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402f34:	72eb      	strb	r3, [r5, #11]
  402f36:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  402f3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402f3e:	f013 0f02 	tst.w	r3, #2
  402f42:	d014      	beq.n	402f6e <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  402f44:	f8bb 3000 	ldrh.w	r3, [fp]
  402f48:	b17b      	cbz	r3, 402f6a <dir_register+0x146>
  402f4a:	2300      	movs	r3, #0
  402f4c:	3301      	adds	r3, #1
  402f4e:	b29b      	uxth	r3, r3
  402f50:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  402f54:	2a00      	cmp	r2, #0
  402f56:	d1f9      	bne.n	402f4c <dir_register+0x128>
		ne = (ne + 25) / 13;
  402f58:	3319      	adds	r3, #25
  402f5a:	4f61      	ldr	r7, [pc, #388]	; (4030e0 <dir_register+0x2bc>)
  402f5c:	fb87 2703 	smull	r2, r7, r7, r3
  402f60:	17db      	asrs	r3, r3, #31
  402f62:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  402f66:	b2bf      	uxth	r7, r7
  402f68:	e002      	b.n	402f70 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  402f6a:	2300      	movs	r3, #0
  402f6c:	e7f4      	b.n	402f58 <dir_register+0x134>
		ne = 1;
  402f6e:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  402f70:	2100      	movs	r1, #0
  402f72:	4620      	mov	r0, r4
  402f74:	4b5b      	ldr	r3, [pc, #364]	; (4030e4 <dir_register+0x2c0>)
  402f76:	4798      	blx	r3
	if (res != FR_OK) return res;
  402f78:	4606      	mov	r6, r0
  402f7a:	2800      	cmp	r0, #0
  402f7c:	d1d4      	bne.n	402f28 <dir_register+0x104>
  402f7e:	f04f 0a00 	mov.w	sl, #0
  402f82:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  402f84:	f8df 8168 	ldr.w	r8, [pc, #360]	; 4030f0 <dir_register+0x2cc>
			n = 0;					/* Not a blank entry. Restart to search */
  402f88:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402f8a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4030ec <dir_register+0x2c8>
  402f8e:	e00a      	b.n	402fa6 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402f90:	1c6b      	adds	r3, r5, #1
  402f92:	b29b      	uxth	r3, r3
  402f94:	429f      	cmp	r7, r3
  402f96:	d066      	beq.n	403066 <dir_register+0x242>
  402f98:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402f9a:	2101      	movs	r1, #1
  402f9c:	4620      	mov	r0, r4
  402f9e:	47c8      	blx	r9
	} while (res == FR_OK);
  402fa0:	4606      	mov	r6, r0
  402fa2:	2800      	cmp	r0, #0
  402fa4:	d1c0      	bne.n	402f28 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  402fa6:	6921      	ldr	r1, [r4, #16]
  402fa8:	6820      	ldr	r0, [r4, #0]
  402faa:	47c0      	blx	r8
		if (res != FR_OK) break;
  402fac:	4606      	mov	r6, r0
  402fae:	2800      	cmp	r0, #0
  402fb0:	d1ba      	bne.n	402f28 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  402fb2:	6963      	ldr	r3, [r4, #20]
  402fb4:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402fb6:	2be5      	cmp	r3, #229	; 0xe5
  402fb8:	d000      	beq.n	402fbc <dir_register+0x198>
  402fba:	b923      	cbnz	r3, 402fc6 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  402fbc:	2d00      	cmp	r5, #0
  402fbe:	d1e7      	bne.n	402f90 <dir_register+0x16c>
  402fc0:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  402fc4:	e7e4      	b.n	402f90 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  402fc6:	465d      	mov	r5, fp
  402fc8:	e7e7      	b.n	402f9a <dir_register+0x176>
		res = dir_sdi(dj, is);
  402fca:	4651      	mov	r1, sl
  402fcc:	4620      	mov	r0, r4
  402fce:	4b45      	ldr	r3, [pc, #276]	; (4030e4 <dir_register+0x2c0>)
  402fd0:	4798      	blx	r3
		if (res == FR_OK) {
  402fd2:	4606      	mov	r6, r0
  402fd4:	2800      	cmp	r0, #0
  402fd6:	d1a7      	bne.n	402f28 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  402fd8:	69a0      	ldr	r0, [r4, #24]
  402fda:	4b43      	ldr	r3, [pc, #268]	; (4030e8 <dir_register+0x2c4>)
  402fdc:	4798      	blx	r3
  402fde:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  402fe0:	2700      	movs	r7, #0
	s = wc = 0;
  402fe2:	9701      	str	r7, [sp, #4]
  402fe4:	e019      	b.n	40301a <dir_register+0x1f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402fe6:	4671      	mov	r1, lr
  402fe8:	e062      	b.n	4030b0 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  402fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402fee:	4293      	cmp	r3, r2
  402ff0:	d002      	beq.n	402ff8 <dir_register+0x1d4>
  402ff2:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  402ff6:	b90b      	cbnz	r3, 402ffc <dir_register+0x1d8>
  402ff8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  402ffc:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  403000:	6823      	ldr	r3, [r4, #0]
  403002:	2201      	movs	r2, #1
  403004:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  403006:	4639      	mov	r1, r7
  403008:	4620      	mov	r0, r4
  40300a:	4b38      	ldr	r3, [pc, #224]	; (4030ec <dir_register+0x2c8>)
  40300c:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  40300e:	4606      	mov	r6, r0
  403010:	2800      	cmp	r0, #0
  403012:	d189      	bne.n	402f28 <dir_register+0x104>
  403014:	3d01      	subs	r5, #1
  403016:	b2ad      	uxth	r5, r5
  403018:	b33d      	cbz	r5, 40306a <dir_register+0x246>
				res = move_window(dj->fs, dj->sect);
  40301a:	6921      	ldr	r1, [r4, #16]
  40301c:	6820      	ldr	r0, [r4, #0]
  40301e:	4b34      	ldr	r3, [pc, #208]	; (4030f0 <dir_register+0x2cc>)
  403020:	4798      	blx	r3
				if (res != FR_OK) break;
  403022:	4606      	mov	r6, r0
  403024:	2800      	cmp	r0, #0
  403026:	f47f af7f 	bne.w	402f28 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  40302a:	f8d4 901c 	ldr.w	r9, [r4, #28]
  40302e:	6960      	ldr	r0, [r4, #20]
  403030:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  403034:	f89d 3000 	ldrb.w	r3, [sp]
  403038:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  40303a:	230f      	movs	r3, #15
  40303c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  40303e:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  403040:	7687      	strb	r7, [r0, #26]
  403042:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  403044:	f10b 31ff 	add.w	r1, fp, #4294967295
  403048:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  40304c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  403050:	4a28      	ldr	r2, [pc, #160]	; (4030f4 <dir_register+0x2d0>)
  403052:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  403056:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403058:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40305c:	f04f 0aff 	mov.w	sl, #255	; 0xff
  403060:	e029      	b.n	4030b6 <dir_register+0x292>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  403062:	2607      	movs	r6, #7
  403064:	e760      	b.n	402f28 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  403066:	2b01      	cmp	r3, #1
  403068:	d8af      	bhi.n	402fca <dir_register+0x1a6>
		res = move_window(dj->fs, dj->sect);
  40306a:	6921      	ldr	r1, [r4, #16]
  40306c:	6820      	ldr	r0, [r4, #0]
  40306e:	4b20      	ldr	r3, [pc, #128]	; (4030f0 <dir_register+0x2cc>)
  403070:	4798      	blx	r3
		if (res == FR_OK) {
  403072:	4606      	mov	r6, r0
  403074:	2800      	cmp	r0, #0
  403076:	f47f af57 	bne.w	402f28 <dir_register+0x104>
			dir = dj->dir;
  40307a:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  40307c:	2220      	movs	r2, #32
  40307e:	2100      	movs	r1, #0
  403080:	4628      	mov	r0, r5
  403082:	4b1d      	ldr	r3, [pc, #116]	; (4030f8 <dir_register+0x2d4>)
  403084:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  403086:	220b      	movs	r2, #11
  403088:	69a1      	ldr	r1, [r4, #24]
  40308a:	4628      	mov	r0, r5
  40308c:	4b13      	ldr	r3, [pc, #76]	; (4030dc <dir_register+0x2b8>)
  40308e:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  403090:	69a3      	ldr	r3, [r4, #24]
  403092:	7adb      	ldrb	r3, [r3, #11]
  403094:	f003 0318 	and.w	r3, r3, #24
  403098:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  40309a:	6823      	ldr	r3, [r4, #0]
  40309c:	2201      	movs	r2, #1
  40309e:	711a      	strb	r2, [r3, #4]
  4030a0:	e742      	b.n	402f28 <dir_register+0x104>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030a2:	f892 e000 	ldrb.w	lr, [r2]
  4030a6:	f800 a00e 	strb.w	sl, [r0, lr]
  4030aa:	4486      	add	lr, r0
  4030ac:	f88e a001 	strb.w	sl, [lr, #1]
  4030b0:	3201      	adds	r2, #1
	} while (++s < 13);
  4030b2:	4542      	cmp	r2, r8
  4030b4:	d099      	beq.n	402fea <dir_register+0x1c6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030b6:	42b3      	cmp	r3, r6
  4030b8:	d0f3      	beq.n	4030a2 <dir_register+0x27e>
  4030ba:	f101 0e01 	add.w	lr, r1, #1
  4030be:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030c2:	7811      	ldrb	r1, [r2, #0]
  4030c4:	5443      	strb	r3, [r0, r1]
  4030c6:	4401      	add	r1, r0
  4030c8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  4030cc:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4030d0:	2b00      	cmp	r3, #0
  4030d2:	d188      	bne.n	402fe6 <dir_register+0x1c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030d4:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4030d6:	4633      	mov	r3, r6
  4030d8:	e7ea      	b.n	4030b0 <dir_register+0x28c>
  4030da:	bf00      	nop
  4030dc:	0040222d 	.word	0x0040222d
  4030e0:	4ec4ec4f 	.word	0x4ec4ec4f
  4030e4:	0040282d 	.word	0x0040282d
  4030e8:	00402265 	.word	0x00402265
  4030ec:	00402b41 	.word	0x00402b41
  4030f0:	004026b5 	.word	0x004026b5
  4030f4:	004070a4 	.word	0x004070a4
  4030f8:	00402241 	.word	0x00402241
  4030fc:	00402c79 	.word	0x00402c79

00403100 <sync>:
{
  403100:	b570      	push	{r4, r5, r6, lr}
  403102:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  403104:	2100      	movs	r1, #0
  403106:	4b2d      	ldr	r3, [pc, #180]	; (4031bc <sync+0xbc>)
  403108:	4798      	blx	r3
	if (res == FR_OK) {
  40310a:	4603      	mov	r3, r0
  40310c:	b950      	cbnz	r0, 403124 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40310e:	7823      	ldrb	r3, [r4, #0]
  403110:	2b03      	cmp	r3, #3
  403112:	d009      	beq.n	403128 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  403114:	2200      	movs	r2, #0
  403116:	4611      	mov	r1, r2
  403118:	7860      	ldrb	r0, [r4, #1]
  40311a:	4b29      	ldr	r3, [pc, #164]	; (4031c0 <sync+0xc0>)
  40311c:	4798      	blx	r3
	res = move_window(fs, 0);
  40311e:	1c03      	adds	r3, r0, #0
  403120:	bf18      	it	ne
  403122:	2301      	movne	r3, #1
}
  403124:	4618      	mov	r0, r3
  403126:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  403128:	7963      	ldrb	r3, [r4, #5]
  40312a:	2b00      	cmp	r3, #0
  40312c:	d0f2      	beq.n	403114 <sync+0x14>
			fs->winsect = 0;
  40312e:	2600      	movs	r6, #0
  403130:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  403132:	f104 0530 	add.w	r5, r4, #48	; 0x30
  403136:	f44f 7200 	mov.w	r2, #512	; 0x200
  40313a:	4631      	mov	r1, r6
  40313c:	4628      	mov	r0, r5
  40313e:	4b21      	ldr	r3, [pc, #132]	; (4031c4 <sync+0xc4>)
  403140:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  403142:	2355      	movs	r3, #85	; 0x55
  403144:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  403148:	23aa      	movs	r3, #170	; 0xaa
  40314a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40314e:	2352      	movs	r3, #82	; 0x52
  403150:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  403154:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  403158:	2361      	movs	r3, #97	; 0x61
  40315a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40315e:	2241      	movs	r2, #65	; 0x41
  403160:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  403164:	2172      	movs	r1, #114	; 0x72
  403166:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  40316a:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  40316e:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  403172:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  403176:	6923      	ldr	r3, [r4, #16]
  403178:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  40317c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  403180:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  403184:	0c1a      	lsrs	r2, r3, #16
  403186:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  40318a:	0e1b      	lsrs	r3, r3, #24
  40318c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  403190:	68e3      	ldr	r3, [r4, #12]
  403192:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  403196:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40319a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  40319e:	0c1a      	lsrs	r2, r3, #16
  4031a0:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  4031a4:	0e1b      	lsrs	r3, r3, #24
  4031a6:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  4031aa:	2301      	movs	r3, #1
  4031ac:	6962      	ldr	r2, [r4, #20]
  4031ae:	4629      	mov	r1, r5
  4031b0:	7860      	ldrb	r0, [r4, #1]
  4031b2:	4d05      	ldr	r5, [pc, #20]	; (4031c8 <sync+0xc8>)
  4031b4:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4031b6:	7166      	strb	r6, [r4, #5]
  4031b8:	e7ac      	b.n	403114 <sync+0x14>
  4031ba:	bf00      	nop
  4031bc:	004026b5 	.word	0x004026b5
  4031c0:	00402165 	.word	0x00402165
  4031c4:	00402241 	.word	0x00402241
  4031c8:	004020e5 	.word	0x004020e5

004031cc <follow_path>:
{
  4031cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031d0:	b083      	sub	sp, #12
  4031d2:	4682      	mov	sl, r0
  4031d4:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  4031d6:	780b      	ldrb	r3, [r1, #0]
  4031d8:	2b2f      	cmp	r3, #47	; 0x2f
  4031da:	d00c      	beq.n	4031f6 <follow_path+0x2a>
  4031dc:	2b5c      	cmp	r3, #92	; 0x5c
  4031de:	d00a      	beq.n	4031f6 <follow_path+0x2a>
	dj->sclust = 0;						/* Start from the root dir */
  4031e0:	2300      	movs	r3, #0
  4031e2:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4031e6:	f898 3000 	ldrb.w	r3, [r8]
  4031ea:	2b1f      	cmp	r3, #31
  4031ec:	d906      	bls.n	4031fc <follow_path+0x30>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4031ee:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 4034e4 <follow_path+0x318>
			res = dir_find(dj);				/* Find it */
  4031f2:	4644      	mov	r4, r8
  4031f4:	e00c      	b.n	403210 <follow_path+0x44>
		path++;
  4031f6:	f108 0801 	add.w	r8, r8, #1
  4031fa:	e7f1      	b.n	4031e0 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  4031fc:	2100      	movs	r1, #0
  4031fe:	4650      	mov	r0, sl
  403200:	4bb2      	ldr	r3, [pc, #712]	; (4034cc <follow_path+0x300>)
  403202:	4798      	blx	r3
  403204:	4603      	mov	r3, r0
		dj->dir = 0;
  403206:	2200      	movs	r2, #0
  403208:	f8ca 2014 	str.w	r2, [sl, #20]
  40320c:	e12e      	b.n	40346c <follow_path+0x2a0>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  40320e:	461c      	mov	r4, r3
  403210:	4627      	mov	r7, r4
  403212:	4623      	mov	r3, r4
  403214:	f813 0b01 	ldrb.w	r0, [r3], #1
  403218:	282f      	cmp	r0, #47	; 0x2f
  40321a:	d0f8      	beq.n	40320e <follow_path+0x42>
  40321c:	285c      	cmp	r0, #92	; 0x5c
  40321e:	bf08      	it	eq
  403220:	461c      	moveq	r4, r3
  403222:	d0f5      	beq.n	403210 <follow_path+0x44>
	lfn = dj->lfn;
  403224:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  403228:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40322a:	281f      	cmp	r0, #31
  40322c:	f240 812d 	bls.w	40348a <follow_path+0x2be>
  403230:	282f      	cmp	r0, #47	; 0x2f
  403232:	f000 812f 	beq.w	403494 <follow_path+0x2c8>
  403236:	285c      	cmp	r0, #92	; 0x5c
  403238:	f000 8135 	beq.w	4034a6 <follow_path+0x2da>
  40323c:	f1ab 0602 	sub.w	r6, fp, #2
  403240:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  403242:	46a8      	mov	r8, r5
  403244:	e012      	b.n	40326c <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  403246:	bb73      	cbnz	r3, 4032a6 <follow_path+0xda>
		lfn[di++] = w;					/* Store the Unicode char */
  403248:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  40324c:	1c6b      	adds	r3, r5, #1
  40324e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  403252:	281f      	cmp	r0, #31
  403254:	f240 811b 	bls.w	40348e <follow_path+0x2c2>
  403258:	282f      	cmp	r0, #47	; 0x2f
  40325a:	f000 811d 	beq.w	403498 <follow_path+0x2cc>
  40325e:	285c      	cmp	r0, #92	; 0x5c
  403260:	f000 811a 	beq.w	403498 <follow_path+0x2cc>
		if (di >= _MAX_LFN)				/* Reject too long name */
  403264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403268:	d01d      	beq.n	4032a6 <follow_path+0xda>
		w = p[si++];					/* Get a character */
  40326a:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40326c:	4641      	mov	r1, r8
  40326e:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  403270:	4602      	mov	r2, r0
  403272:	b1c0      	cbz	r0, 4032a6 <follow_path+0xda>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  403274:	287f      	cmp	r0, #127	; 0x7f
  403276:	d8e7      	bhi.n	403248 <follow_path+0x7c>
	while (*str && *str != chr) str++;
  403278:	2822      	cmp	r0, #34	; 0x22
  40327a:	f000 80f6 	beq.w	40346a <follow_path+0x29e>
  40327e:	232a      	movs	r3, #42	; 0x2a
  403280:	4993      	ldr	r1, [pc, #588]	; (4034d0 <follow_path+0x304>)
  403282:	b298      	uxth	r0, r3
  403284:	4290      	cmp	r0, r2
  403286:	d0de      	beq.n	403246 <follow_path+0x7a>
  403288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40328c:	2b00      	cmp	r3, #0
  40328e:	d1f8      	bne.n	403282 <follow_path+0xb6>
  403290:	e7da      	b.n	403248 <follow_path+0x7c>
	while (di) {						/* Strip trailing spaces and dots */
  403292:	3d01      	subs	r5, #1
  403294:	f000 80e9 	beq.w	40346a <follow_path+0x29e>
		w = lfn[di-1];
  403298:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  40329c:	2b20      	cmp	r3, #32
  40329e:	d0f8      	beq.n	403292 <follow_path+0xc6>
  4032a0:	2b2e      	cmp	r3, #46	; 0x2e
  4032a2:	d0f6      	beq.n	403292 <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  4032a4:	b90d      	cbnz	r5, 4032aa <follow_path+0xde>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4032a6:	2306      	movs	r3, #6
	return res;
  4032a8:	e0e0      	b.n	40346c <follow_path+0x2a0>
	lfn[di] = 0;						/* LFN is created */
  4032aa:	006f      	lsls	r7, r5, #1
  4032ac:	f04f 0800 	mov.w	r8, #0
  4032b0:	f82b 8015 	strh.w	r8, [fp, r5, lsl #1]
	mem_set(dj->fn, ' ', 11);
  4032b4:	220b      	movs	r2, #11
  4032b6:	2120      	movs	r1, #32
  4032b8:	f8da 0018 	ldr.w	r0, [sl, #24]
  4032bc:	4b85      	ldr	r3, [pc, #532]	; (4034d4 <follow_path+0x308>)
  4032be:	4798      	blx	r3
  4032c0:	f1ab 0102 	sub.w	r1, fp, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4032c4:	4643      	mov	r3, r8
  4032c6:	e000      	b.n	4032ca <follow_path+0xfe>
  4032c8:	3301      	adds	r3, #1
  4032ca:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4032ce:	2a20      	cmp	r2, #32
  4032d0:	d0fa      	beq.n	4032c8 <follow_path+0xfc>
  4032d2:	2a2e      	cmp	r2, #46	; 0x2e
  4032d4:	d0f8      	beq.n	4032c8 <follow_path+0xfc>
	if (si) cf |= NS_LOSS | NS_LFN;
  4032d6:	b10b      	cbz	r3, 4032dc <follow_path+0x110>
  4032d8:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4032dc:	3f02      	subs	r7, #2
  4032de:	eb0b 0207 	add.w	r2, fp, r7
  4032e2:	f83b 1007 	ldrh.w	r1, [fp, r7]
  4032e6:	292e      	cmp	r1, #46	; 0x2e
  4032e8:	d005      	beq.n	4032f6 <follow_path+0x12a>
  4032ea:	3d01      	subs	r5, #1
  4032ec:	d003      	beq.n	4032f6 <follow_path+0x12a>
  4032ee:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  4032f2:	292e      	cmp	r1, #46	; 0x2e
  4032f4:	d1f9      	bne.n	4032ea <follow_path+0x11e>
		dj->fn[i++] = (BYTE)w;
  4032f6:	2208      	movs	r2, #8
  4032f8:	9200      	str	r2, [sp, #0]
  4032fa:	f04f 0800 	mov.w	r8, #0
  4032fe:	f8cd 8004 	str.w	r8, [sp, #4]
  403302:	e005      	b.n	403310 <follow_path+0x144>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  403304:	42af      	cmp	r7, r5
  403306:	f000 80d1 	beq.w	4034ac <follow_path+0x2e0>
			cf |= NS_LOSS | NS_LFN; continue;
  40330a:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  40330e:	463b      	mov	r3, r7
  403310:	1c5f      	adds	r7, r3, #1
  403312:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  403316:	b350      	cbz	r0, 40336e <follow_path+0x1a2>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  403318:	2820      	cmp	r0, #32
  40331a:	d0f6      	beq.n	40330a <follow_path+0x13e>
  40331c:	282e      	cmp	r0, #46	; 0x2e
  40331e:	d0f1      	beq.n	403304 <follow_path+0x138>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  403320:	9b00      	ldr	r3, [sp, #0]
  403322:	4598      	cmp	r8, r3
  403324:	d219      	bcs.n	40335a <follow_path+0x18e>
  403326:	42af      	cmp	r7, r5
  403328:	f000 80c0 	beq.w	4034ac <follow_path+0x2e0>
		if (w >= 0x80) {				/* Non ASCII char */
  40332c:	287f      	cmp	r0, #127	; 0x7f
  40332e:	d86c      	bhi.n	40340a <follow_path+0x23e>
	while (*str && *str != chr) str++;
  403330:	282b      	cmp	r0, #43	; 0x2b
  403332:	d079      	beq.n	403428 <follow_path+0x25c>
  403334:	232c      	movs	r3, #44	; 0x2c
  403336:	4a68      	ldr	r2, [pc, #416]	; (4034d8 <follow_path+0x30c>)
  403338:	b299      	uxth	r1, r3
  40333a:	4281      	cmp	r1, r0
  40333c:	d072      	beq.n	403424 <follow_path+0x258>
  40333e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  403342:	2b00      	cmp	r3, #0
  403344:	d1f8      	bne.n	403338 <follow_path+0x16c>
				if (IsUpper(w)) {		/* ASCII large capital */
  403346:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  40334a:	b29b      	uxth	r3, r3
  40334c:	2b19      	cmp	r3, #25
  40334e:	d876      	bhi.n	40343e <follow_path+0x272>
					b |= 2;
  403350:	9b01      	ldr	r3, [sp, #4]
  403352:	f043 0302 	orr.w	r3, r3, #2
  403356:	9301      	str	r3, [sp, #4]
  403358:	e069      	b.n	40342e <follow_path+0x262>
			if (ni == 11) {				/* Long extension */
  40335a:	9b00      	ldr	r3, [sp, #0]
  40335c:	2b0b      	cmp	r3, #11
  40335e:	d048      	beq.n	4033f2 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  403360:	42af      	cmp	r7, r5
  403362:	f000 80a6 	beq.w	4034b2 <follow_path+0x2e6>
  403366:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  40336a:	f240 80a2 	bls.w	4034b2 <follow_path+0x2e6>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  40336e:	f8da 3018 	ldr.w	r3, [sl, #24]
  403372:	781a      	ldrb	r2, [r3, #0]
  403374:	2ae5      	cmp	r2, #229	; 0xe5
  403376:	d045      	beq.n	403404 <follow_path+0x238>
	if (ni == 8) b <<= 2;
  403378:	9b00      	ldr	r3, [sp, #0]
  40337a:	2b08      	cmp	r3, #8
  40337c:	d06b      	beq.n	403456 <follow_path+0x28a>
  40337e:	9a01      	ldr	r2, [sp, #4]
  403380:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  403384:	2b0c      	cmp	r3, #12
  403386:	d06d      	beq.n	403464 <follow_path+0x298>
  403388:	f002 0203 	and.w	r2, r2, #3
  40338c:	2a03      	cmp	r2, #3
  40338e:	d069      	beq.n	403464 <follow_path+0x298>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  403390:	f016 0f02 	tst.w	r6, #2
  403394:	d10b      	bne.n	4033ae <follow_path+0x1e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  403396:	9a01      	ldr	r2, [sp, #4]
  403398:	f002 0b03 	and.w	fp, r2, #3
  40339c:	f1bb 0f01 	cmp.w	fp, #1
  4033a0:	bf08      	it	eq
  4033a2:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  4033a6:	2b04      	cmp	r3, #4
  4033a8:	bf08      	it	eq
  4033aa:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  4033ae:	f8da 3018 	ldr.w	r3, [sl, #24]
  4033b2:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  4033b4:	4650      	mov	r0, sl
  4033b6:	4b49      	ldr	r3, [pc, #292]	; (4034dc <follow_path+0x310>)
  4033b8:	4798      	blx	r3
			ns = *(dj->fn+NS);
  4033ba:	f8da 3018 	ldr.w	r3, [sl, #24]
  4033be:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  4033c0:	4603      	mov	r3, r0
  4033c2:	2800      	cmp	r0, #0
  4033c4:	d156      	bne.n	403474 <follow_path+0x2a8>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4033c6:	f012 0f04 	tst.w	r2, #4
  4033ca:	d14f      	bne.n	40346c <follow_path+0x2a0>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4033cc:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4033d0:	7ad3      	ldrb	r3, [r2, #11]
  4033d2:	f013 0f10 	tst.w	r3, #16
  4033d6:	d056      	beq.n	403486 <follow_path+0x2ba>
			dj->sclust = LD_CLUST(dir);
  4033d8:	7d51      	ldrb	r1, [r2, #21]
  4033da:	7d13      	ldrb	r3, [r2, #20]
  4033dc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  4033e0:	7ed0      	ldrb	r0, [r2, #27]
  4033e2:	7e93      	ldrb	r3, [r2, #26]
  4033e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  4033e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4033ec:	f8ca 3008 	str.w	r3, [sl, #8]
			res = create_name(dj, &path);	/* Get a segment */
  4033f0:	e70e      	b.n	403210 <follow_path+0x44>
				cf |= NS_LOSS | NS_LFN; break;
  4033f2:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  4033f6:	f8da 3018 	ldr.w	r3, [sl, #24]
  4033fa:	781a      	ldrb	r2, [r3, #0]
  4033fc:	2ae5      	cmp	r2, #229	; 0xe5
  4033fe:	d1be      	bne.n	40337e <follow_path+0x1b2>
  403400:	220b      	movs	r2, #11
  403402:	9200      	str	r2, [sp, #0]
  403404:	2205      	movs	r2, #5
  403406:	701a      	strb	r2, [r3, #0]
  403408:	e7b6      	b.n	403378 <follow_path+0x1ac>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  40340a:	2100      	movs	r1, #0
  40340c:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  40340e:	4603      	mov	r3, r0
  403410:	2800      	cmp	r0, #0
  403412:	d058      	beq.n	4034c6 <follow_path+0x2fa>
  403414:	4a32      	ldr	r2, [pc, #200]	; (4034e0 <follow_path+0x314>)
  403416:	4413      	add	r3, r2
  403418:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  40341c:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403420:	b110      	cbz	r0, 403428 <follow_path+0x25c>
  403422:	e785      	b.n	403330 <follow_path+0x164>
  403424:	2b00      	cmp	r3, #0
  403426:	d08e      	beq.n	403346 <follow_path+0x17a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403428:	f046 0603 	orr.w	r6, r6, #3
  40342c:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  40342e:	f8da 3018 	ldr.w	r3, [sl, #24]
  403432:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  403436:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  403438:	f108 0801 	add.w	r8, r8, #1
  40343c:	e768      	b.n	403310 <follow_path+0x144>
					if (IsLower(w)) {	/* ASCII small capital */
  40343e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  403442:	b29b      	uxth	r3, r3
  403444:	2b19      	cmp	r3, #25
  403446:	d8f2      	bhi.n	40342e <follow_path+0x262>
						b |= 1; w -= 0x20;
  403448:	9b01      	ldr	r3, [sp, #4]
  40344a:	f043 0301 	orr.w	r3, r3, #1
  40344e:	9301      	str	r3, [sp, #4]
  403450:	3820      	subs	r0, #32
  403452:	b280      	uxth	r0, r0
  403454:	e7eb      	b.n	40342e <follow_path+0x262>
	if (ni == 8) b <<= 2;
  403456:	9b01      	ldr	r3, [sp, #4]
  403458:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  40345c:	fa5f f38b 	uxtb.w	r3, fp
  403460:	9301      	str	r3, [sp, #4]
  403462:	e78c      	b.n	40337e <follow_path+0x1b2>
		cf |= NS_LFN;
  403464:	f046 0602 	orr.w	r6, r6, #2
  403468:	e792      	b.n	403390 <follow_path+0x1c4>
  40346a:	2306      	movs	r3, #6
}
  40346c:	4618      	mov	r0, r3
  40346e:	b003      	add	sp, #12
  403470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  403474:	2804      	cmp	r0, #4
  403476:	d1f9      	bne.n	40346c <follow_path+0x2a0>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403478:	f002 0204 	and.w	r2, r2, #4
  40347c:	2a00      	cmp	r2, #0
  40347e:	bf14      	ite	ne
  403480:	4603      	movne	r3, r0
  403482:	2305      	moveq	r3, #5
  403484:	e7f2      	b.n	40346c <follow_path+0x2a0>
				res = FR_NO_PATH; break;
  403486:	2305      	movs	r3, #5
  403488:	e7f0      	b.n	40346c <follow_path+0x2a0>
		w = p[si++];					/* Get a character */
  40348a:	2301      	movs	r3, #1
	si = di = 0;
  40348c:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  40348e:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403490:	2604      	movs	r6, #4
  403492:	e003      	b.n	40349c <follow_path+0x2d0>
		w = p[si++];					/* Get a character */
  403494:	2301      	movs	r3, #1
	si = di = 0;
  403496:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  403498:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40349a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  40349c:	2d00      	cmp	r5, #0
  40349e:	d0e4      	beq.n	40346a <follow_path+0x29e>
  4034a0:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
  4034a4:	e6f8      	b.n	403298 <follow_path+0xcc>
		w = p[si++];					/* Get a character */
  4034a6:	2301      	movs	r3, #1
	si = di = 0;
  4034a8:	2500      	movs	r5, #0
  4034aa:	e7f5      	b.n	403498 <follow_path+0x2cc>
			if (ni == 11) {				/* Long extension */
  4034ac:	9b00      	ldr	r3, [sp, #0]
  4034ae:	2b0b      	cmp	r3, #11
  4034b0:	d09f      	beq.n	4033f2 <follow_path+0x226>
			b <<= 2; continue;
  4034b2:	9b01      	ldr	r3, [sp, #4]
  4034b4:	009b      	lsls	r3, r3, #2
  4034b6:	b2db      	uxtb	r3, r3
  4034b8:	9301      	str	r3, [sp, #4]
  4034ba:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4034bc:	220b      	movs	r2, #11
  4034be:	9200      	str	r2, [sp, #0]
  4034c0:	f04f 0808 	mov.w	r8, #8
  4034c4:	e724      	b.n	403310 <follow_path+0x144>
			cf |= NS_LFN;				/* Force create LFN entry */
  4034c6:	f046 0602 	orr.w	r6, r6, #2
  4034ca:	e7ad      	b.n	403428 <follow_path+0x25c>
  4034cc:	0040282d 	.word	0x0040282d
  4034d0:	00407135 	.word	0x00407135
  4034d4:	00402241 	.word	0x00402241
  4034d8:	00407141 	.word	0x00407141
  4034dc:	00402c79 	.word	0x00402c79
  4034e0:	004070b4 	.word	0x004070b4
  4034e4:	004039bd 	.word	0x004039bd

004034e8 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  4034e8:	2807      	cmp	r0, #7
  4034ea:	d901      	bls.n	4034f0 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  4034ec:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  4034ee:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  4034f0:	4b06      	ldr	r3, [pc, #24]	; (40350c <f_mount+0x24>)
  4034f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  4034f6:	b10b      	cbz	r3, 4034fc <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  4034f8:	2200      	movs	r2, #0
  4034fa:	701a      	strb	r2, [r3, #0]
	if (fs) {
  4034fc:	b109      	cbz	r1, 403502 <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  4034fe:	2300      	movs	r3, #0
  403500:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  403502:	4b02      	ldr	r3, [pc, #8]	; (40350c <f_mount+0x24>)
  403504:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  403508:	2000      	movs	r0, #0
  40350a:	4770      	bx	lr
  40350c:	20000ab4 	.word	0x20000ab4

00403510 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403514:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  403518:	4605      	mov	r5, r0
  40351a:	9101      	str	r1, [sp, #4]
  40351c:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  40351e:	2300      	movs	r3, #0
  403520:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  403522:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  403526:	f002 021e 	and.w	r2, r2, #30
  40352a:	a985      	add	r1, sp, #532	; 0x214
  40352c:	a801      	add	r0, sp, #4
  40352e:	4b58      	ldr	r3, [pc, #352]	; (403690 <f_open+0x180>)
  403530:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  403532:	ab82      	add	r3, sp, #520	; 0x208
  403534:	938b      	str	r3, [sp, #556]	; 0x22c
  403536:	ab02      	add	r3, sp, #8
  403538:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  40353a:	b140      	cbz	r0, 40354e <f_open+0x3e>
  40353c:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  40353e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403540:	f016 0f1c 	tst.w	r6, #28
  403544:	d117      	bne.n	403576 <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403546:	2b00      	cmp	r3, #0
  403548:	f040 8092 	bne.w	403670 <f_open+0x160>
  40354c:	e00d      	b.n	40356a <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  40354e:	9901      	ldr	r1, [sp, #4]
  403550:	a885      	add	r0, sp, #532	; 0x214
  403552:	4b50      	ldr	r3, [pc, #320]	; (403694 <f_open+0x184>)
  403554:	4798      	blx	r3
	dir = dj.dir;
  403556:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  403558:	4603      	mov	r3, r0
  40355a:	2800      	cmp	r0, #0
  40355c:	d1f0      	bne.n	403540 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  40355e:	2c00      	cmp	r4, #0
  403560:	f000 808b 	beq.w	40367a <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403564:	f016 0f1c 	tst.w	r6, #28
  403568:	d116      	bne.n	403598 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  40356a:	7ae3      	ldrb	r3, [r4, #11]
  40356c:	f013 0f10 	tst.w	r3, #16
  403570:	d04f      	beq.n	403612 <f_open+0x102>
				res = FR_NO_FILE;
  403572:	2304      	movs	r3, #4
  403574:	e07c      	b.n	403670 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  403576:	2b04      	cmp	r3, #4
  403578:	d005      	beq.n	403586 <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40357a:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40357e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  403580:	2b00      	cmp	r3, #0
  403582:	d057      	beq.n	403634 <f_open+0x124>
  403584:	e074      	b.n	403670 <f_open+0x160>
				res = dir_register(&dj);
  403586:	a885      	add	r0, sp, #532	; 0x214
  403588:	4b43      	ldr	r3, [pc, #268]	; (403698 <f_open+0x188>)
  40358a:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40358c:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403590:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403592:	4603      	mov	r3, r0
  403594:	b138      	cbz	r0, 4035a6 <f_open+0x96>
  403596:	e06b      	b.n	403670 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  403598:	7ae3      	ldrb	r3, [r4, #11]
  40359a:	f013 0f11 	tst.w	r3, #17
  40359e:	d173      	bne.n	403688 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  4035a0:	f016 0f04 	tst.w	r6, #4
  4035a4:	d172      	bne.n	40368c <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4035a6:	f017 0f08 	tst.w	r7, #8
  4035aa:	d03f      	beq.n	40362c <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  4035ac:	4b3b      	ldr	r3, [pc, #236]	; (40369c <f_open+0x18c>)
  4035ae:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  4035b0:	73a0      	strb	r0, [r4, #14]
  4035b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4035b6:	73e3      	strb	r3, [r4, #15]
  4035b8:	0c03      	lsrs	r3, r0, #16
  4035ba:	7423      	strb	r3, [r4, #16]
  4035bc:	0e00      	lsrs	r0, r0, #24
  4035be:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  4035c0:	2300      	movs	r3, #0
  4035c2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  4035c4:	7723      	strb	r3, [r4, #28]
  4035c6:	7763      	strb	r3, [r4, #29]
  4035c8:	77a3      	strb	r3, [r4, #30]
  4035ca:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  4035cc:	7d62      	ldrb	r2, [r4, #21]
  4035ce:	7d26      	ldrb	r6, [r4, #20]
  4035d0:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  4035d4:	7ee1      	ldrb	r1, [r4, #27]
  4035d6:	7ea2      	ldrb	r2, [r4, #26]
  4035d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  4035dc:	76a3      	strb	r3, [r4, #26]
  4035de:	76e3      	strb	r3, [r4, #27]
  4035e0:	7523      	strb	r3, [r4, #20]
  4035e2:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  4035e4:	9885      	ldr	r0, [sp, #532]	; 0x214
  4035e6:	2301      	movs	r3, #1
  4035e8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  4035ea:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  4035ee:	d01b      	beq.n	403628 <f_open+0x118>
				dw = dj.fs->winsect;
  4035f0:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  4035f4:	4631      	mov	r1, r6
  4035f6:	4b2a      	ldr	r3, [pc, #168]	; (4036a0 <f_open+0x190>)
  4035f8:	4798      	blx	r3
				if (res == FR_OK) {
  4035fa:	4603      	mov	r3, r0
  4035fc:	2800      	cmp	r0, #0
  4035fe:	d137      	bne.n	403670 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403600:	9885      	ldr	r0, [sp, #532]	; 0x214
  403602:	3e01      	subs	r6, #1
  403604:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  403606:	4641      	mov	r1, r8
  403608:	4b26      	ldr	r3, [pc, #152]	; (4036a4 <f_open+0x194>)
  40360a:	4798      	blx	r3
	if (res == FR_OK) {
  40360c:	4603      	mov	r3, r0
  40360e:	b158      	cbz	r0, 403628 <f_open+0x118>
  403610:	e02e      	b.n	403670 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  403612:	f016 0f02 	tst.w	r6, #2
  403616:	d004      	beq.n	403622 <f_open+0x112>
  403618:	f013 0f01 	tst.w	r3, #1
  40361c:	d001      	beq.n	403622 <f_open+0x112>
					res = FR_DENIED;
  40361e:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  403620:	e026      	b.n	403670 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  403622:	f016 0f08 	tst.w	r6, #8
  403626:	d001      	beq.n	40362c <f_open+0x11c>
			mode |= FA__WRITTEN;
  403628:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  40362c:	9b85      	ldr	r3, [sp, #532]	; 0x214
  40362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403630:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  403632:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  403634:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403636:	7d62      	ldrb	r2, [r4, #21]
  403638:	7d23      	ldrb	r3, [r4, #20]
  40363a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40363e:	7ee1      	ldrb	r1, [r4, #27]
  403640:	7ea3      	ldrb	r3, [r4, #26]
  403642:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40364a:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  40364c:	7fe2      	ldrb	r2, [r4, #31]
  40364e:	7fa3      	ldrb	r3, [r4, #30]
  403650:	041b      	lsls	r3, r3, #16
  403652:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403656:	7f22      	ldrb	r2, [r4, #28]
  403658:	4313      	orrs	r3, r2
  40365a:	7f62      	ldrb	r2, [r4, #29]
  40365c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403660:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  403662:	2300      	movs	r3, #0
  403664:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  403666:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403668:	9a85      	ldr	r2, [sp, #532]	; 0x214
  40366a:	602a      	str	r2, [r5, #0]
  40366c:	88d2      	ldrh	r2, [r2, #6]
  40366e:	80aa      	strh	r2, [r5, #4]
}
  403670:	4618      	mov	r0, r3
  403672:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40367a:	f016 0f1c 	tst.w	r6, #28
  40367e:	d101      	bne.n	403684 <f_open+0x174>
			res = FR_INVALID_NAME;
  403680:	2306      	movs	r3, #6
  403682:	e77d      	b.n	403580 <f_open+0x70>
  403684:	2306      	movs	r3, #6
  403686:	e778      	b.n	40357a <f_open+0x6a>
				res = FR_DENIED;
  403688:	2307      	movs	r3, #7
  40368a:	e7f1      	b.n	403670 <f_open+0x160>
					res = FR_EXIST;
  40368c:	2308      	movs	r3, #8
  40368e:	e7ef      	b.n	403670 <f_open+0x160>
  403690:	00402349 	.word	0x00402349
  403694:	004031cd 	.word	0x004031cd
  403698:	00402e25 	.word	0x00402e25
  40369c:	004021d5 	.word	0x004021d5
  4036a0:	00402ac5 	.word	0x00402ac5
  4036a4:	004026b5 	.word	0x004026b5

004036a8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  4036a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036ac:	b083      	sub	sp, #12
  4036ae:	4604      	mov	r4, r0
  4036b0:	4689      	mov	r9, r1
  4036b2:	4616      	mov	r6, r2
  4036b4:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  4036b6:	2300      	movs	r3, #0
  4036b8:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  4036bc:	8881      	ldrh	r1, [r0, #4]
  4036be:	6800      	ldr	r0, [r0, #0]
  4036c0:	4b75      	ldr	r3, [pc, #468]	; (403898 <f_write+0x1f0>)
  4036c2:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4036c4:	9001      	str	r0, [sp, #4]
  4036c6:	2800      	cmp	r0, #0
  4036c8:	f040 80e2 	bne.w	403890 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  4036cc:	79a3      	ldrb	r3, [r4, #6]
  4036ce:	f013 0f80 	tst.w	r3, #128	; 0x80
  4036d2:	f040 80db 	bne.w	40388c <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  4036d6:	f013 0f02 	tst.w	r3, #2
  4036da:	d102      	bne.n	4036e2 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  4036dc:	2307      	movs	r3, #7
  4036de:	9301      	str	r3, [sp, #4]
  4036e0:	e0d6      	b.n	403890 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  4036e2:	68e3      	ldr	r3, [r4, #12]
  4036e4:	42f3      	cmn	r3, r6
  4036e6:	d20e      	bcs.n	403706 <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  4036e8:	2e00      	cmp	r6, #0
  4036ea:	d174      	bne.n	4037d6 <f_write+0x12e>
  4036ec:	e00b      	b.n	403706 <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  4036ee:	2100      	movs	r1, #0
  4036f0:	4b6a      	ldr	r3, [pc, #424]	; (40389c <f_write+0x1f4>)
  4036f2:	4798      	blx	r3
  4036f4:	4603      	mov	r3, r0
  4036f6:	6120      	str	r0, [r4, #16]
  4036f8:	e003      	b.n	403702 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  4036fa:	6961      	ldr	r1, [r4, #20]
  4036fc:	4b67      	ldr	r3, [pc, #412]	; (40389c <f_write+0x1f4>)
  4036fe:	4798      	blx	r3
  403700:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403702:	2b00      	cmp	r3, #0
  403704:	d17a      	bne.n	4037fc <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403706:	68a3      	ldr	r3, [r4, #8]
  403708:	68e2      	ldr	r2, [r4, #12]
  40370a:	4293      	cmp	r3, r2
  40370c:	bf88      	it	hi
  40370e:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403710:	79a3      	ldrb	r3, [r4, #6]
  403712:	f043 0320 	orr.w	r3, r3, #32
  403716:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  403718:	e0ba      	b.n	403890 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  40371a:	79a3      	ldrb	r3, [r4, #6]
  40371c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403720:	71a3      	strb	r3, [r4, #6]
  403722:	2302      	movs	r3, #2
  403724:	9301      	str	r3, [sp, #4]
  403726:	e0b3      	b.n	403890 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403728:	79a3      	ldrb	r3, [r4, #6]
  40372a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40372e:	71a3      	strb	r3, [r4, #6]
  403730:	2301      	movs	r3, #1
  403732:	9301      	str	r3, [sp, #4]
  403734:	e0ac      	b.n	403890 <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403736:	2100      	movs	r1, #0
  403738:	4b59      	ldr	r3, [pc, #356]	; (4038a0 <f_write+0x1f8>)
  40373a:	4798      	blx	r3
  40373c:	2800      	cmp	r0, #0
  40373e:	d068      	beq.n	403812 <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  403740:	79a3      	ldrb	r3, [r4, #6]
  403742:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403746:	71a3      	strb	r3, [r4, #6]
  403748:	2301      	movs	r3, #1
  40374a:	9301      	str	r3, [sp, #4]
  40374c:	e0a0      	b.n	403890 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40374e:	79a3      	ldrb	r3, [r4, #6]
  403750:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403754:	71a3      	strb	r3, [r4, #6]
  403756:	2302      	movs	r3, #2
  403758:	9301      	str	r3, [sp, #4]
  40375a:	e099      	b.n	403890 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  40375c:	79a3      	ldrb	r3, [r4, #6]
  40375e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403762:	71a3      	strb	r3, [r4, #6]
  403764:	2301      	movs	r3, #1
  403766:	9301      	str	r3, [sp, #4]
  403768:	e092      	b.n	403890 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  40376a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40376e:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  403772:	3030      	adds	r0, #48	; 0x30
  403774:	4b4b      	ldr	r3, [pc, #300]	; (4038a4 <f_write+0x1fc>)
  403776:	4798      	blx	r3
					fp->fs->wflag = 0;
  403778:	6823      	ldr	r3, [r4, #0]
  40377a:	2200      	movs	r2, #0
  40377c:	711a      	strb	r2, [r3, #4]
  40377e:	e06c      	b.n	40385a <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  403780:	68a2      	ldr	r2, [r4, #8]
  403782:	68e3      	ldr	r3, [r4, #12]
  403784:	429a      	cmp	r2, r3
  403786:	d26b      	bcs.n	403860 <f_write+0x1b8>
			fp->dsect = sect;
  403788:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  40378a:	68a5      	ldr	r5, [r4, #8]
  40378c:	f3c5 0508 	ubfx	r5, r5, #0, #9
  403790:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  403794:	42b5      	cmp	r5, r6
  403796:	bf28      	it	cs
  403798:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  40379a:	69a1      	ldr	r1, [r4, #24]
  40379c:	6820      	ldr	r0, [r4, #0]
  40379e:	4b40      	ldr	r3, [pc, #256]	; (4038a0 <f_write+0x1f8>)
  4037a0:	4798      	blx	r3
  4037a2:	2800      	cmp	r0, #0
  4037a4:	d16b      	bne.n	40387e <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  4037a6:	68a0      	ldr	r0, [r4, #8]
  4037a8:	f3c0 0008 	ubfx	r0, r0, #0, #9
  4037ac:	3030      	adds	r0, #48	; 0x30
  4037ae:	6823      	ldr	r3, [r4, #0]
  4037b0:	462a      	mov	r2, r5
  4037b2:	4649      	mov	r1, r9
  4037b4:	4418      	add	r0, r3
  4037b6:	4b3b      	ldr	r3, [pc, #236]	; (4038a4 <f_write+0x1fc>)
  4037b8:	4798      	blx	r3
		fp->fs->wflag = 1;
  4037ba:	6823      	ldr	r3, [r4, #0]
  4037bc:	2201      	movs	r2, #1
  4037be:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  4037c0:	44a9      	add	r9, r5
  4037c2:	68a3      	ldr	r3, [r4, #8]
  4037c4:	442b      	add	r3, r5
  4037c6:	60a3      	str	r3, [r4, #8]
  4037c8:	f8d8 3000 	ldr.w	r3, [r8]
  4037cc:	442b      	add	r3, r5
  4037ce:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  4037d2:	1b76      	subs	r6, r6, r5
  4037d4:	d097      	beq.n	403706 <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  4037d6:	68a2      	ldr	r2, [r4, #8]
  4037d8:	f3c2 0308 	ubfx	r3, r2, #0, #9
  4037dc:	2b00      	cmp	r3, #0
  4037de:	d1d4      	bne.n	40378a <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4037e0:	6820      	ldr	r0, [r4, #0]
  4037e2:	7883      	ldrb	r3, [r0, #2]
  4037e4:	3b01      	subs	r3, #1
  4037e6:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  4037ea:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4037ee:	d10b      	bne.n	403808 <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  4037f0:	2a00      	cmp	r2, #0
  4037f2:	d182      	bne.n	4036fa <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  4037f4:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  4037f6:	2b00      	cmp	r3, #0
  4037f8:	f43f af79 	beq.w	4036ee <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4037fc:	2b01      	cmp	r3, #1
  4037fe:	d08c      	beq.n	40371a <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403800:	f1b3 3fff 	cmp.w	r3, #4294967295
  403804:	d090      	beq.n	403728 <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  403806:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  403808:	6820      	ldr	r0, [r4, #0]
  40380a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40380c:	69a3      	ldr	r3, [r4, #24]
  40380e:	429a      	cmp	r2, r3
  403810:	d091      	beq.n	403736 <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  403812:	f8d4 a000 	ldr.w	sl, [r4]
  403816:	6961      	ldr	r1, [r4, #20]
  403818:	4650      	mov	r0, sl
  40381a:	4b23      	ldr	r3, [pc, #140]	; (4038a8 <f_write+0x200>)
  40381c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40381e:	4605      	mov	r5, r0
  403820:	2800      	cmp	r0, #0
  403822:	d094      	beq.n	40374e <f_write+0xa6>
			sect += csect;
  403824:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  403826:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  40382a:	d0a9      	beq.n	403780 <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  40382c:	f89a 3002 	ldrb.w	r3, [sl, #2]
  403830:	eb07 020b 	add.w	r2, r7, fp
  403834:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  403836:	bf88      	it	hi
  403838:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  40383c:	fa5f f38b 	uxtb.w	r3, fp
  403840:	462a      	mov	r2, r5
  403842:	4649      	mov	r1, r9
  403844:	f89a 0001 	ldrb.w	r0, [sl, #1]
  403848:	4f18      	ldr	r7, [pc, #96]	; (4038ac <f_write+0x204>)
  40384a:	47b8      	blx	r7
  40384c:	2800      	cmp	r0, #0
  40384e:	d185      	bne.n	40375c <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  403850:	6820      	ldr	r0, [r4, #0]
  403852:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  403854:	1b49      	subs	r1, r1, r5
  403856:	458b      	cmp	fp, r1
  403858:	d887      	bhi.n	40376a <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  40385a:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  40385e:	e7af      	b.n	4037c0 <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403860:	2100      	movs	r1, #0
  403862:	4650      	mov	r0, sl
  403864:	4b0e      	ldr	r3, [pc, #56]	; (4038a0 <f_write+0x1f8>)
  403866:	4798      	blx	r3
  403868:	b910      	cbnz	r0, 403870 <f_write+0x1c8>
				fp->fs->winsect = sect;
  40386a:	6823      	ldr	r3, [r4, #0]
  40386c:	62dd      	str	r5, [r3, #44]	; 0x2c
  40386e:	e78b      	b.n	403788 <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403870:	79a3      	ldrb	r3, [r4, #6]
  403872:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403876:	71a3      	strb	r3, [r4, #6]
  403878:	2301      	movs	r3, #1
  40387a:	9301      	str	r3, [sp, #4]
  40387c:	e008      	b.n	403890 <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  40387e:	79a3      	ldrb	r3, [r4, #6]
  403880:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403884:	71a3      	strb	r3, [r4, #6]
  403886:	2301      	movs	r3, #1
  403888:	9301      	str	r3, [sp, #4]
  40388a:	e001      	b.n	403890 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40388c:	2302      	movs	r3, #2
  40388e:	9301      	str	r3, [sp, #4]
}
  403890:	9801      	ldr	r0, [sp, #4]
  403892:	b003      	add	sp, #12
  403894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403898:	00402285 	.word	0x00402285
  40389c:	00402a05 	.word	0x00402a05
  4038a0:	004026b5 	.word	0x004026b5
  4038a4:	0040222d 	.word	0x0040222d
  4038a8:	0040224f 	.word	0x0040224f
  4038ac:	004020e5 	.word	0x004020e5

004038b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4038b0:	b538      	push	{r3, r4, r5, lr}
  4038b2:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4038b4:	8881      	ldrh	r1, [r0, #4]
  4038b6:	6800      	ldr	r0, [r0, #0]
  4038b8:	4b1f      	ldr	r3, [pc, #124]	; (403938 <f_sync+0x88>)
  4038ba:	4798      	blx	r3
	if (res == FR_OK) {
  4038bc:	4603      	mov	r3, r0
  4038be:	b918      	cbnz	r0, 4038c8 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  4038c0:	79a2      	ldrb	r2, [r4, #6]
  4038c2:	f012 0f20 	tst.w	r2, #32
  4038c6:	d101      	bne.n	4038cc <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  4038c8:	4618      	mov	r0, r3
  4038ca:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  4038cc:	69e1      	ldr	r1, [r4, #28]
  4038ce:	6820      	ldr	r0, [r4, #0]
  4038d0:	4b1a      	ldr	r3, [pc, #104]	; (40393c <f_sync+0x8c>)
  4038d2:	4798      	blx	r3
			if (res == FR_OK) {
  4038d4:	4603      	mov	r3, r0
  4038d6:	2800      	cmp	r0, #0
  4038d8:	d1f6      	bne.n	4038c8 <f_sync+0x18>
				dir = fp->dir_ptr;
  4038da:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4038dc:	7aeb      	ldrb	r3, [r5, #11]
  4038de:	f043 0320 	orr.w	r3, r3, #32
  4038e2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4038e4:	68e3      	ldr	r3, [r4, #12]
  4038e6:	772b      	strb	r3, [r5, #28]
  4038e8:	89a3      	ldrh	r3, [r4, #12]
  4038ea:	0a1b      	lsrs	r3, r3, #8
  4038ec:	776b      	strb	r3, [r5, #29]
  4038ee:	89e3      	ldrh	r3, [r4, #14]
  4038f0:	77ab      	strb	r3, [r5, #30]
  4038f2:	7be3      	ldrb	r3, [r4, #15]
  4038f4:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4038f6:	6923      	ldr	r3, [r4, #16]
  4038f8:	76ab      	strb	r3, [r5, #26]
  4038fa:	8a23      	ldrh	r3, [r4, #16]
  4038fc:	0a1b      	lsrs	r3, r3, #8
  4038fe:	76eb      	strb	r3, [r5, #27]
  403900:	8a63      	ldrh	r3, [r4, #18]
  403902:	752b      	strb	r3, [r5, #20]
  403904:	8a63      	ldrh	r3, [r4, #18]
  403906:	0a1b      	lsrs	r3, r3, #8
  403908:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  40390a:	4b0d      	ldr	r3, [pc, #52]	; (403940 <f_sync+0x90>)
  40390c:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  40390e:	75a8      	strb	r0, [r5, #22]
  403910:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403914:	75eb      	strb	r3, [r5, #23]
  403916:	0c03      	lsrs	r3, r0, #16
  403918:	762b      	strb	r3, [r5, #24]
  40391a:	0e00      	lsrs	r0, r0, #24
  40391c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  40391e:	79a3      	ldrb	r3, [r4, #6]
  403920:	f023 0320 	bic.w	r3, r3, #32
  403924:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  403926:	6823      	ldr	r3, [r4, #0]
  403928:	2201      	movs	r2, #1
  40392a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  40392c:	6820      	ldr	r0, [r4, #0]
  40392e:	4b05      	ldr	r3, [pc, #20]	; (403944 <f_sync+0x94>)
  403930:	4798      	blx	r3
  403932:	4603      	mov	r3, r0
  403934:	e7c8      	b.n	4038c8 <f_sync+0x18>
  403936:	bf00      	nop
  403938:	00402285 	.word	0x00402285
  40393c:	004026b5 	.word	0x004026b5
  403940:	004021d5 	.word	0x004021d5
  403944:	00403101 	.word	0x00403101

00403948 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403948:	b510      	push	{r4, lr}
  40394a:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  40394c:	4b03      	ldr	r3, [pc, #12]	; (40395c <f_close+0x14>)
  40394e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403950:	4603      	mov	r3, r0
  403952:	b908      	cbnz	r0, 403958 <f_close+0x10>
  403954:	2200      	movs	r2, #0
  403956:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403958:	4618      	mov	r0, r3
  40395a:	bd10      	pop	{r4, pc}
  40395c:	004038b1 	.word	0x004038b1

00403960 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  403960:	b510      	push	{r4, lr}
  403962:	b082      	sub	sp, #8
  403964:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  403966:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  40396a:	ab01      	add	r3, sp, #4
  40396c:	2201      	movs	r2, #1
  40396e:	4669      	mov	r1, sp
  403970:	4620      	mov	r0, r4
  403972:	4c05      	ldr	r4, [pc, #20]	; (403988 <f_putc+0x28>)
  403974:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  403976:	9b01      	ldr	r3, [sp, #4]
  403978:	2b01      	cmp	r3, #1
}
  40397a:	bf0c      	ite	eq
  40397c:	2001      	moveq	r0, #1
  40397e:	f04f 30ff 	movne.w	r0, #4294967295
  403982:	b002      	add	sp, #8
  403984:	bd10      	pop	{r4, pc}
  403986:	bf00      	nop
  403988:	004036a9 	.word	0x004036a9

0040398c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  40398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  40398e:	7803      	ldrb	r3, [r0, #0]
  403990:	b17b      	cbz	r3, 4039b2 <f_puts+0x26>
  403992:	460e      	mov	r6, r1
  403994:	4605      	mov	r5, r0
  403996:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  403998:	4f07      	ldr	r7, [pc, #28]	; (4039b8 <f_puts+0x2c>)
  40399a:	4631      	mov	r1, r6
  40399c:	4618      	mov	r0, r3
  40399e:	47b8      	blx	r7
  4039a0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4039a4:	d006      	beq.n	4039b4 <f_puts+0x28>
  4039a6:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  4039a8:	f814 3b01 	ldrb.w	r3, [r4], #1
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	d1f4      	bne.n	40399a <f_puts+0xe>
  4039b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039b2:	2000      	movs	r0, #0
	}
	return n;
}
  4039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039b6:	bf00      	nop
  4039b8:	00403961 	.word	0x00403961

004039bc <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4039bc:	287f      	cmp	r0, #127	; 0x7f
  4039be:	d919      	bls.n	4039f4 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4039c0:	b971      	cbnz	r1, 4039e0 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4039c2:	28c7      	cmp	r0, #199	; 0xc7
  4039c4:	d013      	beq.n	4039ee <ff_convert+0x32>
  4039c6:	4a0c      	ldr	r2, [pc, #48]	; (4039f8 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  4039c8:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4039ca:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  4039ce:	4281      	cmp	r1, r0
  4039d0:	d003      	beq.n	4039da <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  4039d2:	3301      	adds	r3, #1
  4039d4:	b29b      	uxth	r3, r3
  4039d6:	2b80      	cmp	r3, #128	; 0x80
  4039d8:	d1f7      	bne.n	4039ca <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  4039da:	3380      	adds	r3, #128	; 0x80
  4039dc:	b2d8      	uxtb	r0, r3
  4039de:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4039e0:	28ff      	cmp	r0, #255	; 0xff
  4039e2:	d806      	bhi.n	4039f2 <ff_convert+0x36>
  4039e4:	3880      	subs	r0, #128	; 0x80
  4039e6:	4b04      	ldr	r3, [pc, #16]	; (4039f8 <ff_convert+0x3c>)
  4039e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4039ec:	4770      	bx	lr
				if (src == Tbl[c]) break;
  4039ee:	2300      	movs	r3, #0
  4039f0:	e7f3      	b.n	4039da <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4039f2:	2000      	movs	r0, #0
		}
	}

	return c;
}
  4039f4:	4770      	bx	lr
  4039f6:	bf00      	nop
  4039f8:	00407148 	.word	0x00407148

004039fc <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4039fc:	2861      	cmp	r0, #97	; 0x61
  4039fe:	d010      	beq.n	403a22 <ff_wtoupper+0x26>
  403a00:	4909      	ldr	r1, [pc, #36]	; (403a28 <ff_wtoupper+0x2c>)
  403a02:	2201      	movs	r2, #1
  403a04:	2362      	movs	r3, #98	; 0x62
  403a06:	4298      	cmp	r0, r3
  403a08:	d005      	beq.n	403a16 <ff_wtoupper+0x1a>
  403a0a:	3201      	adds	r2, #1
  403a0c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403a10:	2b00      	cmp	r3, #0
  403a12:	d1f8      	bne.n	403a06 <ff_wtoupper+0xa>
  403a14:	e003      	b.n	403a1e <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  403a16:	b118      	cbz	r0, 403a20 <ff_wtoupper+0x24>
  403a18:	4b04      	ldr	r3, [pc, #16]	; (403a2c <ff_wtoupper+0x30>)
  403a1a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403a1e:	4770      	bx	lr
  403a20:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403a22:	2200      	movs	r2, #0
  403a24:	e7f8      	b.n	403a18 <ff_wtoupper+0x1c>
  403a26:	bf00      	nop
  403a28:	0040724a 	.word	0x0040724a
  403a2c:	00407428 	.word	0x00407428

00403a30 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a32:	b083      	sub	sp, #12
  403a34:	4604      	mov	r4, r0
  403a36:	460e      	mov	r6, r1
	uint32_t val = 0;
  403a38:	2300      	movs	r3, #0
  403a3a:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403a3c:	4b34      	ldr	r3, [pc, #208]	; (403b10 <usart_serial_getchar+0xe0>)
  403a3e:	4298      	cmp	r0, r3
  403a40:	d016      	beq.n	403a70 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403a42:	4b34      	ldr	r3, [pc, #208]	; (403b14 <usart_serial_getchar+0xe4>)
  403a44:	4298      	cmp	r0, r3
  403a46:	d01d      	beq.n	403a84 <usart_serial_getchar+0x54>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403a48:	4b33      	ldr	r3, [pc, #204]	; (403b18 <usart_serial_getchar+0xe8>)
  403a4a:	4298      	cmp	r0, r3
  403a4c:	d024      	beq.n	403a98 <usart_serial_getchar+0x68>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  403a4e:	4b33      	ldr	r3, [pc, #204]	; (403b1c <usart_serial_getchar+0xec>)
  403a50:	429c      	cmp	r4, r3
  403a52:	d02b      	beq.n	403aac <usart_serial_getchar+0x7c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  403a54:	4b32      	ldr	r3, [pc, #200]	; (403b20 <usart_serial_getchar+0xf0>)
  403a56:	429c      	cmp	r4, r3
  403a58:	d032      	beq.n	403ac0 <usart_serial_getchar+0x90>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  403a5a:	4b32      	ldr	r3, [pc, #200]	; (403b24 <usart_serial_getchar+0xf4>)
  403a5c:	429c      	cmp	r4, r3
  403a5e:	d039      	beq.n	403ad4 <usart_serial_getchar+0xa4>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  403a60:	4b31      	ldr	r3, [pc, #196]	; (403b28 <usart_serial_getchar+0xf8>)
  403a62:	429c      	cmp	r4, r3
  403a64:	d040      	beq.n	403ae8 <usart_serial_getchar+0xb8>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  403a66:	4b31      	ldr	r3, [pc, #196]	; (403b2c <usart_serial_getchar+0xfc>)
  403a68:	429c      	cmp	r4, r3
  403a6a:	d047      	beq.n	403afc <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403a6c:	b003      	add	sp, #12
  403a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (usart_read(p_usart, &val));
  403a70:	461f      	mov	r7, r3
  403a72:	4d2f      	ldr	r5, [pc, #188]	; (403b30 <usart_serial_getchar+0x100>)
  403a74:	a901      	add	r1, sp, #4
  403a76:	4638      	mov	r0, r7
  403a78:	47a8      	blx	r5
  403a7a:	2800      	cmp	r0, #0
  403a7c:	d1fa      	bne.n	403a74 <usart_serial_getchar+0x44>
		*data = (uint8_t)(val & 0xFF);
  403a7e:	9b01      	ldr	r3, [sp, #4]
  403a80:	7033      	strb	r3, [r6, #0]
  403a82:	e7e4      	b.n	403a4e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
  403a84:	461f      	mov	r7, r3
  403a86:	4d2a      	ldr	r5, [pc, #168]	; (403b30 <usart_serial_getchar+0x100>)
  403a88:	a901      	add	r1, sp, #4
  403a8a:	4638      	mov	r0, r7
  403a8c:	47a8      	blx	r5
  403a8e:	2800      	cmp	r0, #0
  403a90:	d1fa      	bne.n	403a88 <usart_serial_getchar+0x58>
		*data = (uint8_t)(val & 0xFF);
  403a92:	9b01      	ldr	r3, [sp, #4]
  403a94:	7033      	strb	r3, [r6, #0]
  403a96:	e7dd      	b.n	403a54 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  403a98:	461f      	mov	r7, r3
  403a9a:	4d25      	ldr	r5, [pc, #148]	; (403b30 <usart_serial_getchar+0x100>)
  403a9c:	a901      	add	r1, sp, #4
  403a9e:	4638      	mov	r0, r7
  403aa0:	47a8      	blx	r5
  403aa2:	2800      	cmp	r0, #0
  403aa4:	d1fa      	bne.n	403a9c <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  403aa6:	9b01      	ldr	r3, [sp, #4]
  403aa8:	7033      	strb	r3, [r6, #0]
  403aaa:	e7d6      	b.n	403a5a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  403aac:	461f      	mov	r7, r3
  403aae:	4d20      	ldr	r5, [pc, #128]	; (403b30 <usart_serial_getchar+0x100>)
  403ab0:	a901      	add	r1, sp, #4
  403ab2:	4638      	mov	r0, r7
  403ab4:	47a8      	blx	r5
  403ab6:	2800      	cmp	r0, #0
  403ab8:	d1fa      	bne.n	403ab0 <usart_serial_getchar+0x80>
		*data = (uint8_t)(val & 0xFF);
  403aba:	9b01      	ldr	r3, [sp, #4]
  403abc:	7033      	strb	r3, [r6, #0]
  403abe:	e7cf      	b.n	403a60 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403ac0:	461f      	mov	r7, r3
  403ac2:	4d1b      	ldr	r5, [pc, #108]	; (403b30 <usart_serial_getchar+0x100>)
  403ac4:	a901      	add	r1, sp, #4
  403ac6:	4638      	mov	r0, r7
  403ac8:	47a8      	blx	r5
  403aca:	2800      	cmp	r0, #0
  403acc:	d1fa      	bne.n	403ac4 <usart_serial_getchar+0x94>
		*data = (uint8_t)(val & 0xFF);
  403ace:	9b01      	ldr	r3, [sp, #4]
  403ad0:	7033      	strb	r3, [r6, #0]
  403ad2:	e7c8      	b.n	403a66 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403ad4:	461d      	mov	r5, r3
  403ad6:	4c16      	ldr	r4, [pc, #88]	; (403b30 <usart_serial_getchar+0x100>)
  403ad8:	a901      	add	r1, sp, #4
  403ada:	4628      	mov	r0, r5
  403adc:	47a0      	blx	r4
  403ade:	2800      	cmp	r0, #0
  403ae0:	d1fa      	bne.n	403ad8 <usart_serial_getchar+0xa8>
		*data = (uint8_t)(val & 0xFF);
  403ae2:	9b01      	ldr	r3, [sp, #4]
  403ae4:	7033      	strb	r3, [r6, #0]
  403ae6:	e7c1      	b.n	403a6c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
  403ae8:	461d      	mov	r5, r3
  403aea:	4c11      	ldr	r4, [pc, #68]	; (403b30 <usart_serial_getchar+0x100>)
  403aec:	a901      	add	r1, sp, #4
  403aee:	4628      	mov	r0, r5
  403af0:	47a0      	blx	r4
  403af2:	2800      	cmp	r0, #0
  403af4:	d1fa      	bne.n	403aec <usart_serial_getchar+0xbc>
		*data = (uint8_t)(val & 0xFF);
  403af6:	9b01      	ldr	r3, [sp, #4]
  403af8:	7033      	strb	r3, [r6, #0]
  403afa:	e7b7      	b.n	403a6c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
  403afc:	461d      	mov	r5, r3
  403afe:	4c0c      	ldr	r4, [pc, #48]	; (403b30 <usart_serial_getchar+0x100>)
  403b00:	a901      	add	r1, sp, #4
  403b02:	4628      	mov	r0, r5
  403b04:	47a0      	blx	r4
  403b06:	2800      	cmp	r0, #0
  403b08:	d1fa      	bne.n	403b00 <usart_serial_getchar+0xd0>
		*data = (uint8_t)(val & 0xFF);
  403b0a:	9b01      	ldr	r3, [sp, #4]
  403b0c:	7033      	strb	r3, [r6, #0]
}
  403b0e:	e7ad      	b.n	403a6c <usart_serial_getchar+0x3c>
  403b10:	4000c200 	.word	0x4000c200
  403b14:	40020200 	.word	0x40020200
  403b18:	40024200 	.word	0x40024200
  403b1c:	40018200 	.word	0x40018200
  403b20:	4001c200 	.word	0x4001c200
  403b24:	40008200 	.word	0x40008200
  403b28:	40040200 	.word	0x40040200
  403b2c:	40034200 	.word	0x40034200
  403b30:	00401d75 	.word	0x00401d75

00403b34 <usart_serial_putchar>:
{
  403b34:	b570      	push	{r4, r5, r6, lr}
  403b36:	460c      	mov	r4, r1
	if (USART0 == p_usart) {
  403b38:	4b30      	ldr	r3, [pc, #192]	; (403bfc <usart_serial_putchar+0xc8>)
  403b3a:	4298      	cmp	r0, r3
  403b3c:	d016      	beq.n	403b6c <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
  403b3e:	4b30      	ldr	r3, [pc, #192]	; (403c00 <usart_serial_putchar+0xcc>)
  403b40:	4298      	cmp	r0, r3
  403b42:	d01c      	beq.n	403b7e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
  403b44:	4b2f      	ldr	r3, [pc, #188]	; (403c04 <usart_serial_putchar+0xd0>)
  403b46:	4298      	cmp	r0, r3
  403b48:	d022      	beq.n	403b90 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
  403b4a:	4b2f      	ldr	r3, [pc, #188]	; (403c08 <usart_serial_putchar+0xd4>)
  403b4c:	4298      	cmp	r0, r3
  403b4e:	d028      	beq.n	403ba2 <usart_serial_putchar+0x6e>
	if (USART4 == p_usart) {
  403b50:	4b2e      	ldr	r3, [pc, #184]	; (403c0c <usart_serial_putchar+0xd8>)
  403b52:	4298      	cmp	r0, r3
  403b54:	d02e      	beq.n	403bb4 <usart_serial_putchar+0x80>
	if (USART5 == p_usart) {
  403b56:	4b2e      	ldr	r3, [pc, #184]	; (403c10 <usart_serial_putchar+0xdc>)
  403b58:	4298      	cmp	r0, r3
  403b5a:	d034      	beq.n	403bc6 <usart_serial_putchar+0x92>
	if (USART6 == p_usart) {
  403b5c:	4b2d      	ldr	r3, [pc, #180]	; (403c14 <usart_serial_putchar+0xe0>)
  403b5e:	4298      	cmp	r0, r3
  403b60:	d03a      	beq.n	403bd8 <usart_serial_putchar+0xa4>
	if (USART7 == p_usart) {
  403b62:	4b2d      	ldr	r3, [pc, #180]	; (403c18 <usart_serial_putchar+0xe4>)
  403b64:	4298      	cmp	r0, r3
  403b66:	d040      	beq.n	403bea <usart_serial_putchar+0xb6>
	return 0;
  403b68:	2000      	movs	r0, #0
}
  403b6a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403b6c:	461e      	mov	r6, r3
  403b6e:	4d2b      	ldr	r5, [pc, #172]	; (403c1c <usart_serial_putchar+0xe8>)
  403b70:	4621      	mov	r1, r4
  403b72:	4630      	mov	r0, r6
  403b74:	47a8      	blx	r5
  403b76:	2800      	cmp	r0, #0
  403b78:	d1fa      	bne.n	403b70 <usart_serial_putchar+0x3c>
		return 1;
  403b7a:	2001      	movs	r0, #1
  403b7c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403b7e:	461e      	mov	r6, r3
  403b80:	4d26      	ldr	r5, [pc, #152]	; (403c1c <usart_serial_putchar+0xe8>)
  403b82:	4621      	mov	r1, r4
  403b84:	4630      	mov	r0, r6
  403b86:	47a8      	blx	r5
  403b88:	2800      	cmp	r0, #0
  403b8a:	d1fa      	bne.n	403b82 <usart_serial_putchar+0x4e>
		return 1;
  403b8c:	2001      	movs	r0, #1
  403b8e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403b90:	461e      	mov	r6, r3
  403b92:	4d22      	ldr	r5, [pc, #136]	; (403c1c <usart_serial_putchar+0xe8>)
  403b94:	4621      	mov	r1, r4
  403b96:	4630      	mov	r0, r6
  403b98:	47a8      	blx	r5
  403b9a:	2800      	cmp	r0, #0
  403b9c:	d1fa      	bne.n	403b94 <usart_serial_putchar+0x60>
		return 1;
  403b9e:	2001      	movs	r0, #1
  403ba0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403ba2:	461e      	mov	r6, r3
  403ba4:	4d1d      	ldr	r5, [pc, #116]	; (403c1c <usart_serial_putchar+0xe8>)
  403ba6:	4621      	mov	r1, r4
  403ba8:	4630      	mov	r0, r6
  403baa:	47a8      	blx	r5
  403bac:	2800      	cmp	r0, #0
  403bae:	d1fa      	bne.n	403ba6 <usart_serial_putchar+0x72>
		return 1;
  403bb0:	2001      	movs	r0, #1
  403bb2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403bb4:	461e      	mov	r6, r3
  403bb6:	4d19      	ldr	r5, [pc, #100]	; (403c1c <usart_serial_putchar+0xe8>)
  403bb8:	4621      	mov	r1, r4
  403bba:	4630      	mov	r0, r6
  403bbc:	47a8      	blx	r5
  403bbe:	2800      	cmp	r0, #0
  403bc0:	d1fa      	bne.n	403bb8 <usart_serial_putchar+0x84>
		return 1;
  403bc2:	2001      	movs	r0, #1
  403bc4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403bc6:	461e      	mov	r6, r3
  403bc8:	4d14      	ldr	r5, [pc, #80]	; (403c1c <usart_serial_putchar+0xe8>)
  403bca:	4621      	mov	r1, r4
  403bcc:	4630      	mov	r0, r6
  403bce:	47a8      	blx	r5
  403bd0:	2800      	cmp	r0, #0
  403bd2:	d1fa      	bne.n	403bca <usart_serial_putchar+0x96>
		return 1;
  403bd4:	2001      	movs	r0, #1
  403bd6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403bd8:	461e      	mov	r6, r3
  403bda:	4d10      	ldr	r5, [pc, #64]	; (403c1c <usart_serial_putchar+0xe8>)
  403bdc:	4621      	mov	r1, r4
  403bde:	4630      	mov	r0, r6
  403be0:	47a8      	blx	r5
  403be2:	2800      	cmp	r0, #0
  403be4:	d1fa      	bne.n	403bdc <usart_serial_putchar+0xa8>
		return 1;
  403be6:	2001      	movs	r0, #1
  403be8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403bea:	461e      	mov	r6, r3
  403bec:	4d0b      	ldr	r5, [pc, #44]	; (403c1c <usart_serial_putchar+0xe8>)
  403bee:	4621      	mov	r1, r4
  403bf0:	4630      	mov	r0, r6
  403bf2:	47a8      	blx	r5
  403bf4:	2800      	cmp	r0, #0
  403bf6:	d1fa      	bne.n	403bee <usart_serial_putchar+0xba>
		return 1;
  403bf8:	2001      	movs	r0, #1
  403bfa:	bd70      	pop	{r4, r5, r6, pc}
  403bfc:	4000c200 	.word	0x4000c200
  403c00:	40020200 	.word	0x40020200
  403c04:	40024200 	.word	0x40024200
  403c08:	40018200 	.word	0x40018200
  403c0c:	4001c200 	.word	0x4001c200
  403c10:	40008200 	.word	0x40008200
  403c14:	40040200 	.word	0x40040200
  403c18:	40034200 	.word	0x40034200
  403c1c:	00401d61 	.word	0x00401d61

00403c20 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  403c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c24:	f5ad 5daf 	sub.w	sp, sp, #5600	; 0x15e0
  403c28:	b082      	sub	sp, #8
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	irq_initialize_vectors();
	cpu_irq_enable();
  403c2a:	2701      	movs	r7, #1
  403c2c:	4b9a      	ldr	r3, [pc, #616]	; (403e98 <main+0x278>)
  403c2e:	701f      	strb	r7, [r3, #0]
  403c30:	f3bf 8f5f 	dmb	sy
  403c34:	b662      	cpsie	i

	sysclk_init();
  403c36:	4b99      	ldr	r3, [pc, #612]	; (403e9c <main+0x27c>)
  403c38:	4798      	blx	r3
	board_init();
  403c3a:	4b99      	ldr	r3, [pc, #612]	; (403ea0 <main+0x280>)
  403c3c:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403c3e:	4d99      	ldr	r5, [pc, #612]	; (403ea4 <main+0x284>)
  403c40:	4b99      	ldr	r3, [pc, #612]	; (403ea8 <main+0x288>)
  403c42:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403c44:	4a99      	ldr	r2, [pc, #612]	; (403eac <main+0x28c>)
  403c46:	4b9a      	ldr	r3, [pc, #616]	; (403eb0 <main+0x290>)
  403c48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403c4a:	4a9a      	ldr	r2, [pc, #616]	; (403eb4 <main+0x294>)
  403c4c:	4b9a      	ldr	r3, [pc, #616]	; (403eb8 <main+0x298>)
  403c4e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403c50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403c54:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403c56:	23c0      	movs	r3, #192	; 0xc0
  403c58:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403c5e:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403c60:	2400      	movs	r4, #0
  403c62:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403c64:	9406      	str	r4, [sp, #24]
		flexcom_enable(FLEXCOM7);
  403c66:	4e95      	ldr	r6, [pc, #596]	; (403ebc <main+0x29c>)
  403c68:	4630      	mov	r0, r6
  403c6a:	4b95      	ldr	r3, [pc, #596]	; (403ec0 <main+0x2a0>)
  403c6c:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  403c6e:	4639      	mov	r1, r7
  403c70:	4630      	mov	r0, r6
  403c72:	4b94      	ldr	r3, [pc, #592]	; (403ec4 <main+0x2a4>)
  403c74:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403c76:	4a94      	ldr	r2, [pc, #592]	; (403ec8 <main+0x2a8>)
  403c78:	a902      	add	r1, sp, #8
  403c7a:	4628      	mov	r0, r5
  403c7c:	4b93      	ldr	r3, [pc, #588]	; (403ecc <main+0x2ac>)
  403c7e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403c80:	4628      	mov	r0, r5
  403c82:	4b93      	ldr	r3, [pc, #588]	; (403ed0 <main+0x2b0>)
  403c84:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403c86:	4628      	mov	r0, r5
  403c88:	4b92      	ldr	r3, [pc, #584]	; (403ed4 <main+0x2b4>)
  403c8a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403c8c:	4e92      	ldr	r6, [pc, #584]	; (403ed8 <main+0x2b8>)
  403c8e:	6833      	ldr	r3, [r6, #0]
  403c90:	4621      	mov	r1, r4
  403c92:	6898      	ldr	r0, [r3, #8]
  403c94:	4d91      	ldr	r5, [pc, #580]	; (403edc <main+0x2bc>)
  403c96:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403c98:	6833      	ldr	r3, [r6, #0]
  403c9a:	4621      	mov	r1, r4
  403c9c:	6858      	ldr	r0, [r3, #4]
  403c9e:	47a8      	blx	r5
	stdio_serial_init(CONF_TEST_USART, &usart_serial_options);

	/* Initialize SD MMC stack */
	sd_mmc_init();
  403ca0:	4b8f      	ldr	r3, [pc, #572]	; (403ee0 <main+0x2c0>)
  403ca2:	4798      	blx	r3

	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  403ca4:	488f      	ldr	r0, [pc, #572]	; (403ee4 <main+0x2c4>)
  403ca6:	4c90      	ldr	r4, [pc, #576]	; (403ee8 <main+0x2c8>)
  403ca8:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  403caa:	4a90      	ldr	r2, [pc, #576]	; (403eec <main+0x2cc>)
  403cac:	4990      	ldr	r1, [pc, #576]	; (403ef0 <main+0x2d0>)
  403cae:	4891      	ldr	r0, [pc, #580]	; (403ef4 <main+0x2d4>)
  403cb0:	47a0      	blx	r4
	while (1) {
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  403cb2:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 403f68 <main+0x348>
  403cb6:	4626      	mov	r6, r4

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
  403cb8:	4f8f      	ldr	r7, [pc, #572]	; (403ef8 <main+0x2d8>)
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
  403cba:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 403f6c <main+0x34c>
  403cbe:	e03a      	b.n	403d36 <main+0x116>
  403cc0:	4640      	mov	r0, r8
  403cc2:	47b0      	blx	r6
				printf("Please unplug and re-plug the card.\n\r");
  403cc4:	488d      	ldr	r0, [pc, #564]	; (403efc <main+0x2dc>)
  403cc6:	47b0      	blx	r6
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  403cc8:	2500      	movs	r5, #0
  403cca:	4c8d      	ldr	r4, [pc, #564]	; (403f00 <main+0x2e0>)
  403ccc:	4628      	mov	r0, r5
  403cce:	47a0      	blx	r4
  403cd0:	2802      	cmp	r0, #2
  403cd2:	d1fb      	bne.n	403ccc <main+0xac>
			status = sd_mmc_test_unit_ready(0);
  403cd4:	2000      	movs	r0, #0
  403cd6:	47b8      	blx	r7
			if (CTRL_FAIL == status) {
  403cd8:	2801      	cmp	r0, #1
  403cda:	d0f1      	beq.n	403cc0 <main+0xa0>
				}
			}
		} while (CTRL_GOOD != status);
  403cdc:	2800      	cmp	r0, #0
  403cde:	d1f9      	bne.n	403cd4 <main+0xb4>

		printf("Mount disk (f_mount)...\r\n");
  403ce0:	4888      	ldr	r0, [pc, #544]	; (403f04 <main+0x2e4>)
  403ce2:	47b0      	blx	r6
		memset(&fs, 0, sizeof(FATFS));
  403ce4:	f44f 720c 	mov.w	r2, #560	; 0x230
  403ce8:	2100      	movs	r1, #0
  403cea:	f50d 509d 	add.w	r0, sp, #5024	; 0x13a0
  403cee:	3018      	adds	r0, #24
  403cf0:	4b85      	ldr	r3, [pc, #532]	; (403f08 <main+0x2e8>)
  403cf2:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  403cf4:	f50d 519d 	add.w	r1, sp, #5024	; 0x13a0
  403cf8:	3118      	adds	r1, #24
  403cfa:	2000      	movs	r0, #0
  403cfc:	4b83      	ldr	r3, [pc, #524]	; (403f0c <main+0x2ec>)
  403cfe:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
  403d00:	280b      	cmp	r0, #11
  403d02:	d01b      	beq.n	403d3c <main+0x11c>
			printf("[FAIL] res %d\r\n", res);
			goto main_end_of_test;
		}
		printf("[OK]\r\n");
  403d04:	4882      	ldr	r0, [pc, #520]	; (403f10 <main+0x2f0>)
  403d06:	47b0      	blx	r6

//-----------------------f_puts

		char* test_file_name = "0:f_puts.txt0:f_puts.txt0:f_puts.txt";
		test_file_name = "0:f_puts.txt";
		printf("Create a file (f_open)...\r\n");
  403d08:	4882      	ldr	r0, [pc, #520]	; (403f14 <main+0x2f4>)
  403d0a:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  403d0c:	4982      	ldr	r1, [pc, #520]	; (403f18 <main+0x2f8>)
  403d0e:	2330      	movs	r3, #48	; 0x30
  403d10:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
  403d12:	220a      	movs	r2, #10
  403d14:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403d18:	3014      	adds	r0, #20
  403d1a:	4b80      	ldr	r3, [pc, #512]	; (403f1c <main+0x2fc>)
  403d1c:	4798      	blx	r3
				(char const *)test_file_name,
				FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
  403d1e:	4601      	mov	r1, r0
  403d20:	b180      	cbz	r0, 403d44 <main+0x124>
			printf("[FAIL] res %d\r\n", res);
  403d22:	487f      	ldr	r0, [pc, #508]	; (403f20 <main+0x300>)
  403d24:	47b0      	blx	r6
		f_close(&file_object);
		printf("Test is successful.\n\r");


main_end_of_test:
		printf("Please unplug the card.\n\r");
  403d26:	487f      	ldr	r0, [pc, #508]	; (403f24 <main+0x304>)
  403d28:	47b0      	blx	r6
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  403d2a:	2500      	movs	r5, #0
  403d2c:	4c74      	ldr	r4, [pc, #464]	; (403f00 <main+0x2e0>)
  403d2e:	4628      	mov	r0, r5
  403d30:	47a0      	blx	r4
  403d32:	2802      	cmp	r0, #2
  403d34:	d1fb      	bne.n	403d2e <main+0x10e>
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  403d36:	4648      	mov	r0, r9
  403d38:	47b0      	blx	r6
  403d3a:	e7cb      	b.n	403cd4 <main+0xb4>
			printf("[FAIL] res %d\r\n", res);
  403d3c:	210b      	movs	r1, #11
  403d3e:	4878      	ldr	r0, [pc, #480]	; (403f20 <main+0x300>)
  403d40:	47b0      	blx	r6
			goto main_end_of_test;
  403d42:	e7f0      	b.n	403d26 <main+0x106>
		printf("[OK]\r\n");
  403d44:	4872      	ldr	r0, [pc, #456]	; (403f10 <main+0x2f0>)
  403d46:	47b0      	blx	r6
		printf("Write to test file (f_puts)...\r\n");
  403d48:	4877      	ldr	r0, [pc, #476]	; (403f28 <main+0x308>)
  403d4a:	47b0      	blx	r6
		char data[] = "abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789abcdefghij0123456789";
  403d4c:	f241 3289 	movw	r2, #5001	; 0x1389
  403d50:	4976      	ldr	r1, [pc, #472]	; (403f2c <main+0x30c>)
  403d52:	a802      	add	r0, sp, #8
  403d54:	4b76      	ldr	r3, [pc, #472]	; (403f30 <main+0x310>)
  403d56:	4798      	blx	r3
		uint32_t counter = 0;
  403d58:	2400      	movs	r4, #0
			bw = 0;
  403d5a:	46a2      	mov	sl, r4
			if (f_puts(data, &file_object) == 0) {
  403d5c:	4d75      	ldr	r5, [pc, #468]	; (403f34 <main+0x314>)
			bw = 0;
  403d5e:	f8cd a004 	str.w	sl, [sp, #4]
			if (f_puts(data, &file_object) == 0) {
  403d62:	f50d 519c 	add.w	r1, sp, #4992	; 0x1380
  403d66:	3114      	adds	r1, #20
  403d68:	a802      	add	r0, sp, #8
  403d6a:	47a8      	blx	r5
  403d6c:	b1e0      	cbz	r0, 403da8 <main+0x188>
			counter++;
  403d6e:	3401      	adds	r4, #1
		for(uint32_t i = 0; i < 100; i++)
  403d70:	2c64      	cmp	r4, #100	; 0x64
  403d72:	d1f4      	bne.n	403d5e <main+0x13e>
		printf("[OK] I wrote %d\r\n", (counter * (sizeof(data)/sizeof(char))));
  403d74:	4970      	ldr	r1, [pc, #448]	; (403f38 <main+0x318>)
  403d76:	4871      	ldr	r0, [pc, #452]	; (403f3c <main+0x31c>)
  403d78:	47b0      	blx	r6
		f_close(&file_object);
  403d7a:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403d7e:	3014      	adds	r0, #20
  403d80:	4b6f      	ldr	r3, [pc, #444]	; (403f40 <main+0x320>)
  403d82:	4798      	blx	r3
		printf("Test is successful.\n\r");
  403d84:	486f      	ldr	r0, [pc, #444]	; (403f44 <main+0x324>)
  403d86:	47b0      	blx	r6
		printf("Create a file (f_open)...\r\n");
  403d88:	4862      	ldr	r0, [pc, #392]	; (403f14 <main+0x2f4>)
  403d8a:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  403d8c:	496e      	ldr	r1, [pc, #440]	; (403f48 <main+0x328>)
  403d8e:	2330      	movs	r3, #48	; 0x30
  403d90:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
  403d92:	220a      	movs	r2, #10
  403d94:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403d98:	3014      	adds	r0, #20
  403d9a:	4b60      	ldr	r3, [pc, #384]	; (403f1c <main+0x2fc>)
  403d9c:	4798      	blx	r3
		if (res != FR_OK) {
  403d9e:	4601      	mov	r1, r0
  403da0:	b150      	cbz	r0, 403db8 <main+0x198>
			printf("[FAIL] res %d\r\n", res);
  403da2:	485f      	ldr	r0, [pc, #380]	; (403f20 <main+0x300>)
  403da4:	47b0      	blx	r6
			goto main_end_of_test;
  403da6:	e7be      	b.n	403d26 <main+0x106>
				f_close(&file_object);
  403da8:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403dac:	3014      	adds	r0, #20
  403dae:	4b64      	ldr	r3, [pc, #400]	; (403f40 <main+0x320>)
  403db0:	4798      	blx	r3
				printf("[FAIL]\r\n");
  403db2:	4866      	ldr	r0, [pc, #408]	; (403f4c <main+0x32c>)
  403db4:	47b0      	blx	r6
				goto main_end_of_test;
  403db6:	e7b6      	b.n	403d26 <main+0x106>
		printf("[OK]\r\n");
  403db8:	4855      	ldr	r0, [pc, #340]	; (403f10 <main+0x2f0>)
  403dba:	47b0      	blx	r6
		printf("Write to test file (f_write 512)...\r\n");
  403dbc:	4864      	ldr	r0, [pc, #400]	; (403f50 <main+0x330>)
  403dbe:	47b0      	blx	r6
		counter = 0;
  403dc0:	2400      	movs	r4, #0
			bw = 0;
  403dc2:	46a2      	mov	sl, r4
  403dc4:	e004      	b.n	403dd0 <main+0x1b0>
			counter++;
  403dc6:	3401      	adds	r4, #1
		for(uint32_t i = 0; i < 10000; i++)
  403dc8:	f242 7310 	movw	r3, #10000	; 0x2710
  403dcc:	429c      	cmp	r4, r3
  403dce:	d014      	beq.n	403dfa <main+0x1da>
			bw = 0;
  403dd0:	f8cd a004 	str.w	sl, [sp, #4]
			if (f_write(&file_object, data, btw, &bw)) {
  403dd4:	ab01      	add	r3, sp, #4
  403dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
  403dda:	a902      	add	r1, sp, #8
  403ddc:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403de0:	3014      	adds	r0, #20
  403de2:	4d5c      	ldr	r5, [pc, #368]	; (403f54 <main+0x334>)
  403de4:	47a8      	blx	r5
  403de6:	2800      	cmp	r0, #0
  403de8:	d0ed      	beq.n	403dc6 <main+0x1a6>
				f_close(&file_object);
  403dea:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403dee:	3014      	adds	r0, #20
  403df0:	4b53      	ldr	r3, [pc, #332]	; (403f40 <main+0x320>)
  403df2:	4798      	blx	r3
				printf("[FAIL]\r\n");
  403df4:	4855      	ldr	r0, [pc, #340]	; (403f4c <main+0x32c>)
  403df6:	47b0      	blx	r6
				goto main_end_of_test;
  403df8:	e795      	b.n	403d26 <main+0x106>
		printf("[OK] I wrote %d\r\n", counter * btw);
  403dfa:	4957      	ldr	r1, [pc, #348]	; (403f58 <main+0x338>)
  403dfc:	484f      	ldr	r0, [pc, #316]	; (403f3c <main+0x31c>)
  403dfe:	47b0      	blx	r6
		f_close(&file_object);
  403e00:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403e04:	3014      	adds	r0, #20
  403e06:	4b4e      	ldr	r3, [pc, #312]	; (403f40 <main+0x320>)
  403e08:	4798      	blx	r3
		printf("Test is successful.\n\r");
  403e0a:	484e      	ldr	r0, [pc, #312]	; (403f44 <main+0x324>)
  403e0c:	47b0      	blx	r6
		printf("Create a file (f_open)...\r\n");
  403e0e:	4841      	ldr	r0, [pc, #260]	; (403f14 <main+0x2f4>)
  403e10:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  403e12:	4952      	ldr	r1, [pc, #328]	; (403f5c <main+0x33c>)
  403e14:	2330      	movs	r3, #48	; 0x30
  403e16:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
  403e18:	220a      	movs	r2, #10
  403e1a:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403e1e:	3014      	adds	r0, #20
  403e20:	4b3e      	ldr	r3, [pc, #248]	; (403f1c <main+0x2fc>)
  403e22:	4798      	blx	r3
		if (res != FR_OK) {
  403e24:	4601      	mov	r1, r0
  403e26:	b110      	cbz	r0, 403e2e <main+0x20e>
			printf("[FAIL] res %d\r\n", res);
  403e28:	483d      	ldr	r0, [pc, #244]	; (403f20 <main+0x300>)
  403e2a:	47b0      	blx	r6
			goto main_end_of_test;
  403e2c:	e77b      	b.n	403d26 <main+0x106>
		printf("[OK]\r\n");
  403e2e:	4838      	ldr	r0, [pc, #224]	; (403f10 <main+0x2f0>)
  403e30:	47b0      	blx	r6
		printf("Write to test file (f_write 1024)...\r\n");
  403e32:	484b      	ldr	r0, [pc, #300]	; (403f60 <main+0x340>)
  403e34:	47b0      	blx	r6
		counter = 0;
  403e36:	2400      	movs	r4, #0
			bw = 0;
  403e38:	4625      	mov	r5, r4
  403e3a:	9501      	str	r5, [sp, #4]
			if (f_write(&file_object, data, btw, &bw)) {
  403e3c:	ab01      	add	r3, sp, #4
  403e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403e42:	a902      	add	r1, sp, #8
  403e44:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403e48:	3014      	adds	r0, #20
  403e4a:	f8df a108 	ldr.w	sl, [pc, #264]	; 403f54 <main+0x334>
  403e4e:	47d0      	blx	sl
  403e50:	2800      	cmp	r0, #0
  403e52:	f040 808d 	bne.w	403f70 <main+0x350>
			counter++;
  403e56:	3401      	adds	r4, #1
		for(uint32_t i = 0; i < 5000; i++)
  403e58:	f241 3388 	movw	r3, #5000	; 0x1388
  403e5c:	429c      	cmp	r4, r3
  403e5e:	d1ec      	bne.n	403e3a <main+0x21a>
		printf("[OK] I wrote %d\r\n", counter * btw);
  403e60:	493d      	ldr	r1, [pc, #244]	; (403f58 <main+0x338>)
  403e62:	4836      	ldr	r0, [pc, #216]	; (403f3c <main+0x31c>)
  403e64:	47b0      	blx	r6
		f_close(&file_object);
  403e66:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403e6a:	3014      	adds	r0, #20
  403e6c:	4b34      	ldr	r3, [pc, #208]	; (403f40 <main+0x320>)
  403e6e:	4798      	blx	r3
		printf("Test is successful.\n\r");
  403e70:	4834      	ldr	r0, [pc, #208]	; (403f44 <main+0x324>)
  403e72:	47b0      	blx	r6
		printf("Create a file (f_open)...\r\n");
  403e74:	4827      	ldr	r0, [pc, #156]	; (403f14 <main+0x2f4>)
  403e76:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  403e78:	493a      	ldr	r1, [pc, #232]	; (403f64 <main+0x344>)
  403e7a:	2330      	movs	r3, #48	; 0x30
  403e7c:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
  403e7e:	220a      	movs	r2, #10
  403e80:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403e84:	3014      	adds	r0, #20
  403e86:	4b25      	ldr	r3, [pc, #148]	; (403f1c <main+0x2fc>)
  403e88:	4798      	blx	r3
		if (res != FR_OK) {
  403e8a:	4601      	mov	r1, r0
  403e8c:	2800      	cmp	r0, #0
  403e8e:	d077      	beq.n	403f80 <main+0x360>
			printf("[FAIL] res %d\r\n", res);
  403e90:	4823      	ldr	r0, [pc, #140]	; (403f20 <main+0x300>)
  403e92:	47b0      	blx	r6
			goto main_end_of_test;
  403e94:	e747      	b.n	403d26 <main+0x106>
  403e96:	bf00      	nop
  403e98:	200000b8 	.word	0x200000b8
  403e9c:	004012c5 	.word	0x004012c5
  403ea0:	00401621 	.word	0x00401621
  403ea4:	40034200 	.word	0x40034200
  403ea8:	20000b1c 	.word	0x20000b1c
  403eac:	00403b35 	.word	0x00403b35
  403eb0:	20000b18 	.word	0x20000b18
  403eb4:	00403a31 	.word	0x00403a31
  403eb8:	20000b14 	.word	0x20000b14
  403ebc:	40034000 	.word	0x40034000
  403ec0:	00401771 	.word	0x00401771
  403ec4:	004018fd 	.word	0x004018fd
  403ec8:	07270000 	.word	0x07270000
  403ecc:	00401d01 	.word	0x00401d01
  403ed0:	00401d55 	.word	0x00401d55
  403ed4:	00401d5b 	.word	0x00401d5b
  403ed8:	200000c0 	.word	0x200000c0
  403edc:	004042c9 	.word	0x004042c9
  403ee0:	004003b9 	.word	0x004003b9
  403ee4:	00407608 	.word	0x00407608
  403ee8:	004040d1 	.word	0x004040d1
  403eec:	00407638 	.word	0x00407638
  403ef0:	00407644 	.word	0x00407644
  403ef4:	00407650 	.word	0x00407650
  403ef8:	00400be1 	.word	0x00400be1
  403efc:	004076ac 	.word	0x004076ac
  403f00:	004003e5 	.word	0x004003e5
  403f04:	004076d4 	.word	0x004076d4
  403f08:	0040422d 	.word	0x0040422d
  403f0c:	004034e9 	.word	0x004034e9
  403f10:	00407700 	.word	0x00407700
  403f14:	00407708 	.word	0x00407708
  403f18:	00407724 	.word	0x00407724
  403f1c:	00403511 	.word	0x00403511
  403f20:	004076f0 	.word	0x004076f0
  403f24:	00407880 	.word	0x00407880
  403f28:	00407734 	.word	0x00407734
  403f2c:	0040789c 	.word	0x0040789c
  403f30:	004040f9 	.word	0x004040f9
  403f34:	0040398d 	.word	0x0040398d
  403f38:	0007a184 	.word	0x0007a184
  403f3c:	00407764 	.word	0x00407764
  403f40:	00403949 	.word	0x00403949
  403f44:	00407778 	.word	0x00407778
  403f48:	00407790 	.word	0x00407790
  403f4c:	00407758 	.word	0x00407758
  403f50:	004077a4 	.word	0x004077a4
  403f54:	004036a9 	.word	0x004036a9
  403f58:	004e2000 	.word	0x004e2000
  403f5c:	004077cc 	.word	0x004077cc
  403f60:	004077e0 	.word	0x004077e0
  403f64:	00407808 	.word	0x00407808
  403f68:	00407668 	.word	0x00407668
  403f6c:	00407698 	.word	0x00407698
				f_close(&file_object);
  403f70:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403f74:	3014      	adds	r0, #20
  403f76:	4b34      	ldr	r3, [pc, #208]	; (404048 <main+0x428>)
  403f78:	4798      	blx	r3
				printf("[FAIL]\r\n");
  403f7a:	4834      	ldr	r0, [pc, #208]	; (40404c <main+0x42c>)
  403f7c:	47b0      	blx	r6
				goto main_end_of_test;
  403f7e:	e6d2      	b.n	403d26 <main+0x106>
		printf("[OK]\r\n");
  403f80:	4833      	ldr	r0, [pc, #204]	; (404050 <main+0x430>)
  403f82:	47b0      	blx	r6
		printf("Write to test file (f_write 2048)...\r\n");
  403f84:	4833      	ldr	r0, [pc, #204]	; (404054 <main+0x434>)
  403f86:	47b0      	blx	r6
		counter = 0;
  403f88:	2400      	movs	r4, #0
			bw = 0;
  403f8a:	4625      	mov	r5, r4
  403f8c:	9501      	str	r5, [sp, #4]
			if (f_write(&file_object, data, btw, &bw)) {
  403f8e:	ab01      	add	r3, sp, #4
  403f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403f94:	a902      	add	r1, sp, #8
  403f96:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403f9a:	3014      	adds	r0, #20
  403f9c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 40407c <main+0x45c>
  403fa0:	47d0      	blx	sl
  403fa2:	b138      	cbz	r0, 403fb4 <main+0x394>
				f_close(&file_object);
  403fa4:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403fa8:	3014      	adds	r0, #20
  403faa:	4b27      	ldr	r3, [pc, #156]	; (404048 <main+0x428>)
  403fac:	4798      	blx	r3
				printf("[FAIL]\r\n");
  403fae:	4827      	ldr	r0, [pc, #156]	; (40404c <main+0x42c>)
  403fb0:	47b0      	blx	r6
				goto main_end_of_test;
  403fb2:	e6b8      	b.n	403d26 <main+0x106>
			counter++;
  403fb4:	3401      	adds	r4, #1
		for(uint32_t i = 0; i < 5000; i++)
  403fb6:	f241 3388 	movw	r3, #5000	; 0x1388
  403fba:	429c      	cmp	r4, r3
  403fbc:	d1e6      	bne.n	403f8c <main+0x36c>
		printf("[OK] I wrote %d\r\n", counter * btw);
  403fbe:	4926      	ldr	r1, [pc, #152]	; (404058 <main+0x438>)
  403fc0:	4826      	ldr	r0, [pc, #152]	; (40405c <main+0x43c>)
  403fc2:	47b0      	blx	r6
		f_close(&file_object);
  403fc4:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403fc8:	3014      	adds	r0, #20
  403fca:	4b1f      	ldr	r3, [pc, #124]	; (404048 <main+0x428>)
  403fcc:	4798      	blx	r3
		printf("Test is successful.\n\r");	
  403fce:	4824      	ldr	r0, [pc, #144]	; (404060 <main+0x440>)
  403fd0:	47b0      	blx	r6
		printf("Create a file (f_open)...\r\n");
  403fd2:	4824      	ldr	r0, [pc, #144]	; (404064 <main+0x444>)
  403fd4:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  403fd6:	4924      	ldr	r1, [pc, #144]	; (404068 <main+0x448>)
  403fd8:	2330      	movs	r3, #48	; 0x30
  403fda:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
  403fdc:	220a      	movs	r2, #10
  403fde:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  403fe2:	3014      	adds	r0, #20
  403fe4:	4b21      	ldr	r3, [pc, #132]	; (40406c <main+0x44c>)
  403fe6:	4798      	blx	r3
		if (res != FR_OK) {
  403fe8:	4601      	mov	r1, r0
  403fea:	b110      	cbz	r0, 403ff2 <main+0x3d2>
			printf("[FAIL] res %d\r\n", res);
  403fec:	4820      	ldr	r0, [pc, #128]	; (404070 <main+0x450>)
  403fee:	47b0      	blx	r6
			goto main_end_of_test;
  403ff0:	e699      	b.n	403d26 <main+0x106>
		printf("[OK]\r\n");
  403ff2:	4817      	ldr	r0, [pc, #92]	; (404050 <main+0x430>)
  403ff4:	47b0      	blx	r6
		printf("Write to test file (f_write 4096)...\r\n");
  403ff6:	481f      	ldr	r0, [pc, #124]	; (404074 <main+0x454>)
  403ff8:	47b0      	blx	r6
		counter = 0;
  403ffa:	2400      	movs	r4, #0
			bw = 0;
  403ffc:	4625      	mov	r5, r4
  403ffe:	9501      	str	r5, [sp, #4]
			if (f_write(&file_object, data, btw, &bw)) {
  404000:	ab01      	add	r3, sp, #4
  404002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404006:	a902      	add	r1, sp, #8
  404008:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  40400c:	3014      	adds	r0, #20
  40400e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 40407c <main+0x45c>
  404012:	47d0      	blx	sl
  404014:	b138      	cbz	r0, 404026 <main+0x406>
				f_close(&file_object);
  404016:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  40401a:	3014      	adds	r0, #20
  40401c:	4b0a      	ldr	r3, [pc, #40]	; (404048 <main+0x428>)
  40401e:	4798      	blx	r3
				printf("[FAIL]\r\n");
  404020:	480a      	ldr	r0, [pc, #40]	; (40404c <main+0x42c>)
  404022:	47b0      	blx	r6
				goto main_end_of_test;
  404024:	e67f      	b.n	403d26 <main+0x106>
			counter++;
  404026:	3401      	adds	r4, #1
		for(uint32_t i = 0; i < 5000; i++)
  404028:	f241 3388 	movw	r3, #5000	; 0x1388
  40402c:	429c      	cmp	r4, r3
  40402e:	d1e6      	bne.n	403ffe <main+0x3de>
		printf("[OK] I wrote %d\r\n", counter * btw);
  404030:	4911      	ldr	r1, [pc, #68]	; (404078 <main+0x458>)
  404032:	480a      	ldr	r0, [pc, #40]	; (40405c <main+0x43c>)
  404034:	47b0      	blx	r6
		f_close(&file_object);
  404036:	f50d 509c 	add.w	r0, sp, #4992	; 0x1380
  40403a:	3014      	adds	r0, #20
  40403c:	4b02      	ldr	r3, [pc, #8]	; (404048 <main+0x428>)
  40403e:	4798      	blx	r3
		printf("Test is successful.\n\r");
  404040:	4807      	ldr	r0, [pc, #28]	; (404060 <main+0x440>)
  404042:	47b0      	blx	r6
  404044:	e66f      	b.n	403d26 <main+0x106>
  404046:	bf00      	nop
  404048:	00403949 	.word	0x00403949
  40404c:	00407758 	.word	0x00407758
  404050:	00407700 	.word	0x00407700
  404054:	0040781c 	.word	0x0040781c
  404058:	009c4000 	.word	0x009c4000
  40405c:	00407764 	.word	0x00407764
  404060:	00407778 	.word	0x00407778
  404064:	00407708 	.word	0x00407708
  404068:	00407844 	.word	0x00407844
  40406c:	00403511 	.word	0x00403511
  404070:	004076f0 	.word	0x004076f0
  404074:	00407858 	.word	0x00407858
  404078:	01388000 	.word	0x01388000
  40407c:	004036a9 	.word	0x004036a9

00404080 <__libc_init_array>:
  404080:	b570      	push	{r4, r5, r6, lr}
  404082:	4e0f      	ldr	r6, [pc, #60]	; (4040c0 <__libc_init_array+0x40>)
  404084:	4d0f      	ldr	r5, [pc, #60]	; (4040c4 <__libc_init_array+0x44>)
  404086:	1b76      	subs	r6, r6, r5
  404088:	10b6      	asrs	r6, r6, #2
  40408a:	bf18      	it	ne
  40408c:	2400      	movne	r4, #0
  40408e:	d005      	beq.n	40409c <__libc_init_array+0x1c>
  404090:	3401      	adds	r4, #1
  404092:	f855 3b04 	ldr.w	r3, [r5], #4
  404096:	4798      	blx	r3
  404098:	42a6      	cmp	r6, r4
  40409a:	d1f9      	bne.n	404090 <__libc_init_array+0x10>
  40409c:	4e0a      	ldr	r6, [pc, #40]	; (4040c8 <__libc_init_array+0x48>)
  40409e:	4d0b      	ldr	r5, [pc, #44]	; (4040cc <__libc_init_array+0x4c>)
  4040a0:	1b76      	subs	r6, r6, r5
  4040a2:	f004 fe75 	bl	408d90 <_init>
  4040a6:	10b6      	asrs	r6, r6, #2
  4040a8:	bf18      	it	ne
  4040aa:	2400      	movne	r4, #0
  4040ac:	d006      	beq.n	4040bc <__libc_init_array+0x3c>
  4040ae:	3401      	adds	r4, #1
  4040b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4040b4:	4798      	blx	r3
  4040b6:	42a6      	cmp	r6, r4
  4040b8:	d1f9      	bne.n	4040ae <__libc_init_array+0x2e>
  4040ba:	bd70      	pop	{r4, r5, r6, pc}
  4040bc:	bd70      	pop	{r4, r5, r6, pc}
  4040be:	bf00      	nop
  4040c0:	00408d9c 	.word	0x00408d9c
  4040c4:	00408d9c 	.word	0x00408d9c
  4040c8:	00408da4 	.word	0x00408da4
  4040cc:	00408d9c 	.word	0x00408d9c

004040d0 <iprintf>:
  4040d0:	b40f      	push	{r0, r1, r2, r3}
  4040d2:	b500      	push	{lr}
  4040d4:	4907      	ldr	r1, [pc, #28]	; (4040f4 <iprintf+0x24>)
  4040d6:	b083      	sub	sp, #12
  4040d8:	ab04      	add	r3, sp, #16
  4040da:	6808      	ldr	r0, [r1, #0]
  4040dc:	f853 2b04 	ldr.w	r2, [r3], #4
  4040e0:	6881      	ldr	r1, [r0, #8]
  4040e2:	9301      	str	r3, [sp, #4]
  4040e4:	f000 fa00 	bl	4044e8 <_vfiprintf_r>
  4040e8:	b003      	add	sp, #12
  4040ea:	f85d eb04 	ldr.w	lr, [sp], #4
  4040ee:	b004      	add	sp, #16
  4040f0:	4770      	bx	lr
  4040f2:	bf00      	nop
  4040f4:	200000c0 	.word	0x200000c0

004040f8 <memcpy>:
  4040f8:	4684      	mov	ip, r0
  4040fa:	ea41 0300 	orr.w	r3, r1, r0
  4040fe:	f013 0303 	ands.w	r3, r3, #3
  404102:	d16d      	bne.n	4041e0 <memcpy+0xe8>
  404104:	3a40      	subs	r2, #64	; 0x40
  404106:	d341      	bcc.n	40418c <memcpy+0x94>
  404108:	f851 3b04 	ldr.w	r3, [r1], #4
  40410c:	f840 3b04 	str.w	r3, [r0], #4
  404110:	f851 3b04 	ldr.w	r3, [r1], #4
  404114:	f840 3b04 	str.w	r3, [r0], #4
  404118:	f851 3b04 	ldr.w	r3, [r1], #4
  40411c:	f840 3b04 	str.w	r3, [r0], #4
  404120:	f851 3b04 	ldr.w	r3, [r1], #4
  404124:	f840 3b04 	str.w	r3, [r0], #4
  404128:	f851 3b04 	ldr.w	r3, [r1], #4
  40412c:	f840 3b04 	str.w	r3, [r0], #4
  404130:	f851 3b04 	ldr.w	r3, [r1], #4
  404134:	f840 3b04 	str.w	r3, [r0], #4
  404138:	f851 3b04 	ldr.w	r3, [r1], #4
  40413c:	f840 3b04 	str.w	r3, [r0], #4
  404140:	f851 3b04 	ldr.w	r3, [r1], #4
  404144:	f840 3b04 	str.w	r3, [r0], #4
  404148:	f851 3b04 	ldr.w	r3, [r1], #4
  40414c:	f840 3b04 	str.w	r3, [r0], #4
  404150:	f851 3b04 	ldr.w	r3, [r1], #4
  404154:	f840 3b04 	str.w	r3, [r0], #4
  404158:	f851 3b04 	ldr.w	r3, [r1], #4
  40415c:	f840 3b04 	str.w	r3, [r0], #4
  404160:	f851 3b04 	ldr.w	r3, [r1], #4
  404164:	f840 3b04 	str.w	r3, [r0], #4
  404168:	f851 3b04 	ldr.w	r3, [r1], #4
  40416c:	f840 3b04 	str.w	r3, [r0], #4
  404170:	f851 3b04 	ldr.w	r3, [r1], #4
  404174:	f840 3b04 	str.w	r3, [r0], #4
  404178:	f851 3b04 	ldr.w	r3, [r1], #4
  40417c:	f840 3b04 	str.w	r3, [r0], #4
  404180:	f851 3b04 	ldr.w	r3, [r1], #4
  404184:	f840 3b04 	str.w	r3, [r0], #4
  404188:	3a40      	subs	r2, #64	; 0x40
  40418a:	d2bd      	bcs.n	404108 <memcpy+0x10>
  40418c:	3230      	adds	r2, #48	; 0x30
  40418e:	d311      	bcc.n	4041b4 <memcpy+0xbc>
  404190:	f851 3b04 	ldr.w	r3, [r1], #4
  404194:	f840 3b04 	str.w	r3, [r0], #4
  404198:	f851 3b04 	ldr.w	r3, [r1], #4
  40419c:	f840 3b04 	str.w	r3, [r0], #4
  4041a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041a4:	f840 3b04 	str.w	r3, [r0], #4
  4041a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041ac:	f840 3b04 	str.w	r3, [r0], #4
  4041b0:	3a10      	subs	r2, #16
  4041b2:	d2ed      	bcs.n	404190 <memcpy+0x98>
  4041b4:	320c      	adds	r2, #12
  4041b6:	d305      	bcc.n	4041c4 <memcpy+0xcc>
  4041b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041bc:	f840 3b04 	str.w	r3, [r0], #4
  4041c0:	3a04      	subs	r2, #4
  4041c2:	d2f9      	bcs.n	4041b8 <memcpy+0xc0>
  4041c4:	3204      	adds	r2, #4
  4041c6:	d008      	beq.n	4041da <memcpy+0xe2>
  4041c8:	07d2      	lsls	r2, r2, #31
  4041ca:	bf1c      	itt	ne
  4041cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4041d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4041d4:	d301      	bcc.n	4041da <memcpy+0xe2>
  4041d6:	880b      	ldrh	r3, [r1, #0]
  4041d8:	8003      	strh	r3, [r0, #0]
  4041da:	4660      	mov	r0, ip
  4041dc:	4770      	bx	lr
  4041de:	bf00      	nop
  4041e0:	2a08      	cmp	r2, #8
  4041e2:	d313      	bcc.n	40420c <memcpy+0x114>
  4041e4:	078b      	lsls	r3, r1, #30
  4041e6:	d08d      	beq.n	404104 <memcpy+0xc>
  4041e8:	f010 0303 	ands.w	r3, r0, #3
  4041ec:	d08a      	beq.n	404104 <memcpy+0xc>
  4041ee:	f1c3 0304 	rsb	r3, r3, #4
  4041f2:	1ad2      	subs	r2, r2, r3
  4041f4:	07db      	lsls	r3, r3, #31
  4041f6:	bf1c      	itt	ne
  4041f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4041fc:	f800 3b01 	strbne.w	r3, [r0], #1
  404200:	d380      	bcc.n	404104 <memcpy+0xc>
  404202:	f831 3b02 	ldrh.w	r3, [r1], #2
  404206:	f820 3b02 	strh.w	r3, [r0], #2
  40420a:	e77b      	b.n	404104 <memcpy+0xc>
  40420c:	3a04      	subs	r2, #4
  40420e:	d3d9      	bcc.n	4041c4 <memcpy+0xcc>
  404210:	3a01      	subs	r2, #1
  404212:	f811 3b01 	ldrb.w	r3, [r1], #1
  404216:	f800 3b01 	strb.w	r3, [r0], #1
  40421a:	d2f9      	bcs.n	404210 <memcpy+0x118>
  40421c:	780b      	ldrb	r3, [r1, #0]
  40421e:	7003      	strb	r3, [r0, #0]
  404220:	784b      	ldrb	r3, [r1, #1]
  404222:	7043      	strb	r3, [r0, #1]
  404224:	788b      	ldrb	r3, [r1, #2]
  404226:	7083      	strb	r3, [r0, #2]
  404228:	4660      	mov	r0, ip
  40422a:	4770      	bx	lr

0040422c <memset>:
  40422c:	b470      	push	{r4, r5, r6}
  40422e:	0786      	lsls	r6, r0, #30
  404230:	d046      	beq.n	4042c0 <memset+0x94>
  404232:	1e54      	subs	r4, r2, #1
  404234:	2a00      	cmp	r2, #0
  404236:	d041      	beq.n	4042bc <memset+0x90>
  404238:	b2ca      	uxtb	r2, r1
  40423a:	4603      	mov	r3, r0
  40423c:	e002      	b.n	404244 <memset+0x18>
  40423e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404242:	d33b      	bcc.n	4042bc <memset+0x90>
  404244:	f803 2b01 	strb.w	r2, [r3], #1
  404248:	079d      	lsls	r5, r3, #30
  40424a:	d1f8      	bne.n	40423e <memset+0x12>
  40424c:	2c03      	cmp	r4, #3
  40424e:	d92e      	bls.n	4042ae <memset+0x82>
  404250:	b2cd      	uxtb	r5, r1
  404252:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404256:	2c0f      	cmp	r4, #15
  404258:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40425c:	d919      	bls.n	404292 <memset+0x66>
  40425e:	f103 0210 	add.w	r2, r3, #16
  404262:	4626      	mov	r6, r4
  404264:	3e10      	subs	r6, #16
  404266:	2e0f      	cmp	r6, #15
  404268:	f842 5c10 	str.w	r5, [r2, #-16]
  40426c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404270:	f842 5c08 	str.w	r5, [r2, #-8]
  404274:	f842 5c04 	str.w	r5, [r2, #-4]
  404278:	f102 0210 	add.w	r2, r2, #16
  40427c:	d8f2      	bhi.n	404264 <memset+0x38>
  40427e:	f1a4 0210 	sub.w	r2, r4, #16
  404282:	f022 020f 	bic.w	r2, r2, #15
  404286:	f004 040f 	and.w	r4, r4, #15
  40428a:	3210      	adds	r2, #16
  40428c:	2c03      	cmp	r4, #3
  40428e:	4413      	add	r3, r2
  404290:	d90d      	bls.n	4042ae <memset+0x82>
  404292:	461e      	mov	r6, r3
  404294:	4622      	mov	r2, r4
  404296:	3a04      	subs	r2, #4
  404298:	2a03      	cmp	r2, #3
  40429a:	f846 5b04 	str.w	r5, [r6], #4
  40429e:	d8fa      	bhi.n	404296 <memset+0x6a>
  4042a0:	1f22      	subs	r2, r4, #4
  4042a2:	f022 0203 	bic.w	r2, r2, #3
  4042a6:	3204      	adds	r2, #4
  4042a8:	4413      	add	r3, r2
  4042aa:	f004 0403 	and.w	r4, r4, #3
  4042ae:	b12c      	cbz	r4, 4042bc <memset+0x90>
  4042b0:	b2c9      	uxtb	r1, r1
  4042b2:	441c      	add	r4, r3
  4042b4:	f803 1b01 	strb.w	r1, [r3], #1
  4042b8:	429c      	cmp	r4, r3
  4042ba:	d1fb      	bne.n	4042b4 <memset+0x88>
  4042bc:	bc70      	pop	{r4, r5, r6}
  4042be:	4770      	bx	lr
  4042c0:	4614      	mov	r4, r2
  4042c2:	4603      	mov	r3, r0
  4042c4:	e7c2      	b.n	40424c <memset+0x20>
  4042c6:	bf00      	nop

004042c8 <setbuf>:
  4042c8:	2900      	cmp	r1, #0
  4042ca:	bf0c      	ite	eq
  4042cc:	2202      	moveq	r2, #2
  4042ce:	2200      	movne	r2, #0
  4042d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4042d4:	f000 b800 	b.w	4042d8 <setvbuf>

004042d8 <setvbuf>:
  4042d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4042dc:	4c61      	ldr	r4, [pc, #388]	; (404464 <setvbuf+0x18c>)
  4042de:	6825      	ldr	r5, [r4, #0]
  4042e0:	b083      	sub	sp, #12
  4042e2:	4604      	mov	r4, r0
  4042e4:	460f      	mov	r7, r1
  4042e6:	4690      	mov	r8, r2
  4042e8:	461e      	mov	r6, r3
  4042ea:	b115      	cbz	r5, 4042f2 <setvbuf+0x1a>
  4042ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4042ee:	2b00      	cmp	r3, #0
  4042f0:	d064      	beq.n	4043bc <setvbuf+0xe4>
  4042f2:	f1b8 0f02 	cmp.w	r8, #2
  4042f6:	d006      	beq.n	404306 <setvbuf+0x2e>
  4042f8:	f1b8 0f01 	cmp.w	r8, #1
  4042fc:	f200 809f 	bhi.w	40443e <setvbuf+0x166>
  404300:	2e00      	cmp	r6, #0
  404302:	f2c0 809c 	blt.w	40443e <setvbuf+0x166>
  404306:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404308:	07d8      	lsls	r0, r3, #31
  40430a:	d534      	bpl.n	404376 <setvbuf+0x9e>
  40430c:	4621      	mov	r1, r4
  40430e:	4628      	mov	r0, r5
  404310:	f001 f888 	bl	405424 <_fflush_r>
  404314:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404316:	b141      	cbz	r1, 40432a <setvbuf+0x52>
  404318:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40431c:	4299      	cmp	r1, r3
  40431e:	d002      	beq.n	404326 <setvbuf+0x4e>
  404320:	4628      	mov	r0, r5
  404322:	f001 f9fd 	bl	405720 <_free_r>
  404326:	2300      	movs	r3, #0
  404328:	6323      	str	r3, [r4, #48]	; 0x30
  40432a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40432e:	2200      	movs	r2, #0
  404330:	61a2      	str	r2, [r4, #24]
  404332:	6062      	str	r2, [r4, #4]
  404334:	061a      	lsls	r2, r3, #24
  404336:	d43a      	bmi.n	4043ae <setvbuf+0xd6>
  404338:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40433c:	f023 0303 	bic.w	r3, r3, #3
  404340:	f1b8 0f02 	cmp.w	r8, #2
  404344:	81a3      	strh	r3, [r4, #12]
  404346:	d01d      	beq.n	404384 <setvbuf+0xac>
  404348:	ab01      	add	r3, sp, #4
  40434a:	466a      	mov	r2, sp
  40434c:	4621      	mov	r1, r4
  40434e:	4628      	mov	r0, r5
  404350:	f001 fc84 	bl	405c5c <__swhatbuf_r>
  404354:	89a3      	ldrh	r3, [r4, #12]
  404356:	4318      	orrs	r0, r3
  404358:	81a0      	strh	r0, [r4, #12]
  40435a:	2e00      	cmp	r6, #0
  40435c:	d132      	bne.n	4043c4 <setvbuf+0xec>
  40435e:	9e00      	ldr	r6, [sp, #0]
  404360:	4630      	mov	r0, r6
  404362:	f001 fcf3 	bl	405d4c <malloc>
  404366:	4607      	mov	r7, r0
  404368:	2800      	cmp	r0, #0
  40436a:	d06b      	beq.n	404444 <setvbuf+0x16c>
  40436c:	89a3      	ldrh	r3, [r4, #12]
  40436e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404372:	81a3      	strh	r3, [r4, #12]
  404374:	e028      	b.n	4043c8 <setvbuf+0xf0>
  404376:	89a3      	ldrh	r3, [r4, #12]
  404378:	0599      	lsls	r1, r3, #22
  40437a:	d4c7      	bmi.n	40430c <setvbuf+0x34>
  40437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40437e:	f001 fc69 	bl	405c54 <__retarget_lock_acquire_recursive>
  404382:	e7c3      	b.n	40430c <setvbuf+0x34>
  404384:	2500      	movs	r5, #0
  404386:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404388:	2600      	movs	r6, #0
  40438a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40438e:	f043 0302 	orr.w	r3, r3, #2
  404392:	2001      	movs	r0, #1
  404394:	60a6      	str	r6, [r4, #8]
  404396:	07ce      	lsls	r6, r1, #31
  404398:	81a3      	strh	r3, [r4, #12]
  40439a:	6022      	str	r2, [r4, #0]
  40439c:	6122      	str	r2, [r4, #16]
  40439e:	6160      	str	r0, [r4, #20]
  4043a0:	d401      	bmi.n	4043a6 <setvbuf+0xce>
  4043a2:	0598      	lsls	r0, r3, #22
  4043a4:	d53e      	bpl.n	404424 <setvbuf+0x14c>
  4043a6:	4628      	mov	r0, r5
  4043a8:	b003      	add	sp, #12
  4043aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4043ae:	6921      	ldr	r1, [r4, #16]
  4043b0:	4628      	mov	r0, r5
  4043b2:	f001 f9b5 	bl	405720 <_free_r>
  4043b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043ba:	e7bd      	b.n	404338 <setvbuf+0x60>
  4043bc:	4628      	mov	r0, r5
  4043be:	f001 f889 	bl	4054d4 <__sinit>
  4043c2:	e796      	b.n	4042f2 <setvbuf+0x1a>
  4043c4:	2f00      	cmp	r7, #0
  4043c6:	d0cb      	beq.n	404360 <setvbuf+0x88>
  4043c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4043ca:	2b00      	cmp	r3, #0
  4043cc:	d033      	beq.n	404436 <setvbuf+0x15e>
  4043ce:	9b00      	ldr	r3, [sp, #0]
  4043d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043d4:	6027      	str	r7, [r4, #0]
  4043d6:	429e      	cmp	r6, r3
  4043d8:	bf1c      	itt	ne
  4043da:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4043de:	81a2      	strhne	r2, [r4, #12]
  4043e0:	f1b8 0f01 	cmp.w	r8, #1
  4043e4:	bf04      	itt	eq
  4043e6:	f042 0201 	orreq.w	r2, r2, #1
  4043ea:	81a2      	strheq	r2, [r4, #12]
  4043ec:	b292      	uxth	r2, r2
  4043ee:	f012 0308 	ands.w	r3, r2, #8
  4043f2:	6127      	str	r7, [r4, #16]
  4043f4:	6166      	str	r6, [r4, #20]
  4043f6:	d00e      	beq.n	404416 <setvbuf+0x13e>
  4043f8:	07d1      	lsls	r1, r2, #31
  4043fa:	d51a      	bpl.n	404432 <setvbuf+0x15a>
  4043fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4043fe:	4276      	negs	r6, r6
  404400:	2300      	movs	r3, #0
  404402:	f015 0501 	ands.w	r5, r5, #1
  404406:	61a6      	str	r6, [r4, #24]
  404408:	60a3      	str	r3, [r4, #8]
  40440a:	d009      	beq.n	404420 <setvbuf+0x148>
  40440c:	2500      	movs	r5, #0
  40440e:	4628      	mov	r0, r5
  404410:	b003      	add	sp, #12
  404412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404416:	60a3      	str	r3, [r4, #8]
  404418:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40441a:	f015 0501 	ands.w	r5, r5, #1
  40441e:	d1f5      	bne.n	40440c <setvbuf+0x134>
  404420:	0593      	lsls	r3, r2, #22
  404422:	d4c0      	bmi.n	4043a6 <setvbuf+0xce>
  404424:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404426:	f001 fc17 	bl	405c58 <__retarget_lock_release_recursive>
  40442a:	4628      	mov	r0, r5
  40442c:	b003      	add	sp, #12
  40442e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404432:	60a6      	str	r6, [r4, #8]
  404434:	e7f0      	b.n	404418 <setvbuf+0x140>
  404436:	4628      	mov	r0, r5
  404438:	f001 f84c 	bl	4054d4 <__sinit>
  40443c:	e7c7      	b.n	4043ce <setvbuf+0xf6>
  40443e:	f04f 35ff 	mov.w	r5, #4294967295
  404442:	e7b0      	b.n	4043a6 <setvbuf+0xce>
  404444:	f8dd 9000 	ldr.w	r9, [sp]
  404448:	45b1      	cmp	r9, r6
  40444a:	d004      	beq.n	404456 <setvbuf+0x17e>
  40444c:	4648      	mov	r0, r9
  40444e:	f001 fc7d 	bl	405d4c <malloc>
  404452:	4607      	mov	r7, r0
  404454:	b920      	cbnz	r0, 404460 <setvbuf+0x188>
  404456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40445a:	f04f 35ff 	mov.w	r5, #4294967295
  40445e:	e792      	b.n	404386 <setvbuf+0xae>
  404460:	464e      	mov	r6, r9
  404462:	e783      	b.n	40436c <setvbuf+0x94>
  404464:	200000c0 	.word	0x200000c0

00404468 <__sprint_r.part.0>:
  404468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40446c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40446e:	049c      	lsls	r4, r3, #18
  404470:	4693      	mov	fp, r2
  404472:	d52f      	bpl.n	4044d4 <__sprint_r.part.0+0x6c>
  404474:	6893      	ldr	r3, [r2, #8]
  404476:	6812      	ldr	r2, [r2, #0]
  404478:	b353      	cbz	r3, 4044d0 <__sprint_r.part.0+0x68>
  40447a:	460e      	mov	r6, r1
  40447c:	4607      	mov	r7, r0
  40447e:	f102 0908 	add.w	r9, r2, #8
  404482:	e919 0420 	ldmdb	r9, {r5, sl}
  404486:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40448a:	d017      	beq.n	4044bc <__sprint_r.part.0+0x54>
  40448c:	3d04      	subs	r5, #4
  40448e:	2400      	movs	r4, #0
  404490:	e001      	b.n	404496 <__sprint_r.part.0+0x2e>
  404492:	45a0      	cmp	r8, r4
  404494:	d010      	beq.n	4044b8 <__sprint_r.part.0+0x50>
  404496:	4632      	mov	r2, r6
  404498:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40449c:	4638      	mov	r0, r7
  40449e:	f001 f8bb 	bl	405618 <_fputwc_r>
  4044a2:	1c43      	adds	r3, r0, #1
  4044a4:	f104 0401 	add.w	r4, r4, #1
  4044a8:	d1f3      	bne.n	404492 <__sprint_r.part.0+0x2a>
  4044aa:	2300      	movs	r3, #0
  4044ac:	f8cb 3008 	str.w	r3, [fp, #8]
  4044b0:	f8cb 3004 	str.w	r3, [fp, #4]
  4044b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044b8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4044bc:	f02a 0a03 	bic.w	sl, sl, #3
  4044c0:	eba3 030a 	sub.w	r3, r3, sl
  4044c4:	f8cb 3008 	str.w	r3, [fp, #8]
  4044c8:	f109 0908 	add.w	r9, r9, #8
  4044cc:	2b00      	cmp	r3, #0
  4044ce:	d1d8      	bne.n	404482 <__sprint_r.part.0+0x1a>
  4044d0:	2000      	movs	r0, #0
  4044d2:	e7ea      	b.n	4044aa <__sprint_r.part.0+0x42>
  4044d4:	f001 fa0a 	bl	4058ec <__sfvwrite_r>
  4044d8:	2300      	movs	r3, #0
  4044da:	f8cb 3008 	str.w	r3, [fp, #8]
  4044de:	f8cb 3004 	str.w	r3, [fp, #4]
  4044e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044e6:	bf00      	nop

004044e8 <_vfiprintf_r>:
  4044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044ec:	b0ad      	sub	sp, #180	; 0xb4
  4044ee:	461d      	mov	r5, r3
  4044f0:	468b      	mov	fp, r1
  4044f2:	4690      	mov	r8, r2
  4044f4:	9307      	str	r3, [sp, #28]
  4044f6:	9006      	str	r0, [sp, #24]
  4044f8:	b118      	cbz	r0, 404502 <_vfiprintf_r+0x1a>
  4044fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4044fc:	2b00      	cmp	r3, #0
  4044fe:	f000 80f3 	beq.w	4046e8 <_vfiprintf_r+0x200>
  404502:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404506:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40450a:	07df      	lsls	r7, r3, #31
  40450c:	b281      	uxth	r1, r0
  40450e:	d402      	bmi.n	404516 <_vfiprintf_r+0x2e>
  404510:	058e      	lsls	r6, r1, #22
  404512:	f140 80fc 	bpl.w	40470e <_vfiprintf_r+0x226>
  404516:	048c      	lsls	r4, r1, #18
  404518:	d40a      	bmi.n	404530 <_vfiprintf_r+0x48>
  40451a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40451e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404526:	f8ab 100c 	strh.w	r1, [fp, #12]
  40452a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40452e:	b289      	uxth	r1, r1
  404530:	0708      	lsls	r0, r1, #28
  404532:	f140 80b3 	bpl.w	40469c <_vfiprintf_r+0x1b4>
  404536:	f8db 3010 	ldr.w	r3, [fp, #16]
  40453a:	2b00      	cmp	r3, #0
  40453c:	f000 80ae 	beq.w	40469c <_vfiprintf_r+0x1b4>
  404540:	f001 031a 	and.w	r3, r1, #26
  404544:	2b0a      	cmp	r3, #10
  404546:	f000 80b5 	beq.w	4046b4 <_vfiprintf_r+0x1cc>
  40454a:	2300      	movs	r3, #0
  40454c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404550:	930b      	str	r3, [sp, #44]	; 0x2c
  404552:	9311      	str	r3, [sp, #68]	; 0x44
  404554:	9310      	str	r3, [sp, #64]	; 0x40
  404556:	9303      	str	r3, [sp, #12]
  404558:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40455c:	46ca      	mov	sl, r9
  40455e:	f8cd b010 	str.w	fp, [sp, #16]
  404562:	f898 3000 	ldrb.w	r3, [r8]
  404566:	4644      	mov	r4, r8
  404568:	b1fb      	cbz	r3, 4045aa <_vfiprintf_r+0xc2>
  40456a:	2b25      	cmp	r3, #37	; 0x25
  40456c:	d102      	bne.n	404574 <_vfiprintf_r+0x8c>
  40456e:	e01c      	b.n	4045aa <_vfiprintf_r+0xc2>
  404570:	2b25      	cmp	r3, #37	; 0x25
  404572:	d003      	beq.n	40457c <_vfiprintf_r+0x94>
  404574:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404578:	2b00      	cmp	r3, #0
  40457a:	d1f9      	bne.n	404570 <_vfiprintf_r+0x88>
  40457c:	eba4 0508 	sub.w	r5, r4, r8
  404580:	b19d      	cbz	r5, 4045aa <_vfiprintf_r+0xc2>
  404582:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404584:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404586:	f8ca 8000 	str.w	r8, [sl]
  40458a:	3301      	adds	r3, #1
  40458c:	442a      	add	r2, r5
  40458e:	2b07      	cmp	r3, #7
  404590:	f8ca 5004 	str.w	r5, [sl, #4]
  404594:	9211      	str	r2, [sp, #68]	; 0x44
  404596:	9310      	str	r3, [sp, #64]	; 0x40
  404598:	dd7a      	ble.n	404690 <_vfiprintf_r+0x1a8>
  40459a:	2a00      	cmp	r2, #0
  40459c:	f040 84b0 	bne.w	404f00 <_vfiprintf_r+0xa18>
  4045a0:	9b03      	ldr	r3, [sp, #12]
  4045a2:	9210      	str	r2, [sp, #64]	; 0x40
  4045a4:	442b      	add	r3, r5
  4045a6:	46ca      	mov	sl, r9
  4045a8:	9303      	str	r3, [sp, #12]
  4045aa:	7823      	ldrb	r3, [r4, #0]
  4045ac:	2b00      	cmp	r3, #0
  4045ae:	f000 83e0 	beq.w	404d72 <_vfiprintf_r+0x88a>
  4045b2:	2000      	movs	r0, #0
  4045b4:	f04f 0300 	mov.w	r3, #0
  4045b8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4045bc:	f104 0801 	add.w	r8, r4, #1
  4045c0:	7862      	ldrb	r2, [r4, #1]
  4045c2:	4605      	mov	r5, r0
  4045c4:	4606      	mov	r6, r0
  4045c6:	4603      	mov	r3, r0
  4045c8:	f04f 34ff 	mov.w	r4, #4294967295
  4045cc:	f108 0801 	add.w	r8, r8, #1
  4045d0:	f1a2 0120 	sub.w	r1, r2, #32
  4045d4:	2958      	cmp	r1, #88	; 0x58
  4045d6:	f200 82de 	bhi.w	404b96 <_vfiprintf_r+0x6ae>
  4045da:	e8df f011 	tbh	[pc, r1, lsl #1]
  4045de:	0221      	.short	0x0221
  4045e0:	02dc02dc 	.word	0x02dc02dc
  4045e4:	02dc0229 	.word	0x02dc0229
  4045e8:	02dc02dc 	.word	0x02dc02dc
  4045ec:	02dc02dc 	.word	0x02dc02dc
  4045f0:	028902dc 	.word	0x028902dc
  4045f4:	02dc0295 	.word	0x02dc0295
  4045f8:	02bd00a2 	.word	0x02bd00a2
  4045fc:	019f02dc 	.word	0x019f02dc
  404600:	01a401a4 	.word	0x01a401a4
  404604:	01a401a4 	.word	0x01a401a4
  404608:	01a401a4 	.word	0x01a401a4
  40460c:	01a401a4 	.word	0x01a401a4
  404610:	02dc01a4 	.word	0x02dc01a4
  404614:	02dc02dc 	.word	0x02dc02dc
  404618:	02dc02dc 	.word	0x02dc02dc
  40461c:	02dc02dc 	.word	0x02dc02dc
  404620:	02dc02dc 	.word	0x02dc02dc
  404624:	01b202dc 	.word	0x01b202dc
  404628:	02dc02dc 	.word	0x02dc02dc
  40462c:	02dc02dc 	.word	0x02dc02dc
  404630:	02dc02dc 	.word	0x02dc02dc
  404634:	02dc02dc 	.word	0x02dc02dc
  404638:	02dc02dc 	.word	0x02dc02dc
  40463c:	02dc0197 	.word	0x02dc0197
  404640:	02dc02dc 	.word	0x02dc02dc
  404644:	02dc02dc 	.word	0x02dc02dc
  404648:	02dc019b 	.word	0x02dc019b
  40464c:	025302dc 	.word	0x025302dc
  404650:	02dc02dc 	.word	0x02dc02dc
  404654:	02dc02dc 	.word	0x02dc02dc
  404658:	02dc02dc 	.word	0x02dc02dc
  40465c:	02dc02dc 	.word	0x02dc02dc
  404660:	02dc02dc 	.word	0x02dc02dc
  404664:	021b025a 	.word	0x021b025a
  404668:	02dc02dc 	.word	0x02dc02dc
  40466c:	026e02dc 	.word	0x026e02dc
  404670:	02dc021b 	.word	0x02dc021b
  404674:	027302dc 	.word	0x027302dc
  404678:	01f502dc 	.word	0x01f502dc
  40467c:	02090182 	.word	0x02090182
  404680:	02dc02d7 	.word	0x02dc02d7
  404684:	02dc029a 	.word	0x02dc029a
  404688:	02dc00a7 	.word	0x02dc00a7
  40468c:	022e02dc 	.word	0x022e02dc
  404690:	f10a 0a08 	add.w	sl, sl, #8
  404694:	9b03      	ldr	r3, [sp, #12]
  404696:	442b      	add	r3, r5
  404698:	9303      	str	r3, [sp, #12]
  40469a:	e786      	b.n	4045aa <_vfiprintf_r+0xc2>
  40469c:	4659      	mov	r1, fp
  40469e:	9806      	ldr	r0, [sp, #24]
  4046a0:	f000 fdac 	bl	4051fc <__swsetup_r>
  4046a4:	bb18      	cbnz	r0, 4046ee <_vfiprintf_r+0x206>
  4046a6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4046aa:	f001 031a 	and.w	r3, r1, #26
  4046ae:	2b0a      	cmp	r3, #10
  4046b0:	f47f af4b 	bne.w	40454a <_vfiprintf_r+0x62>
  4046b4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4046b8:	2b00      	cmp	r3, #0
  4046ba:	f6ff af46 	blt.w	40454a <_vfiprintf_r+0x62>
  4046be:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046c2:	07db      	lsls	r3, r3, #31
  4046c4:	d405      	bmi.n	4046d2 <_vfiprintf_r+0x1ea>
  4046c6:	058f      	lsls	r7, r1, #22
  4046c8:	d403      	bmi.n	4046d2 <_vfiprintf_r+0x1ea>
  4046ca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4046ce:	f001 fac3 	bl	405c58 <__retarget_lock_release_recursive>
  4046d2:	462b      	mov	r3, r5
  4046d4:	4642      	mov	r2, r8
  4046d6:	4659      	mov	r1, fp
  4046d8:	9806      	ldr	r0, [sp, #24]
  4046da:	f000 fd4d 	bl	405178 <__sbprintf>
  4046de:	9003      	str	r0, [sp, #12]
  4046e0:	9803      	ldr	r0, [sp, #12]
  4046e2:	b02d      	add	sp, #180	; 0xb4
  4046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046e8:	f000 fef4 	bl	4054d4 <__sinit>
  4046ec:	e709      	b.n	404502 <_vfiprintf_r+0x1a>
  4046ee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046f2:	07d9      	lsls	r1, r3, #31
  4046f4:	d404      	bmi.n	404700 <_vfiprintf_r+0x218>
  4046f6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4046fa:	059a      	lsls	r2, r3, #22
  4046fc:	f140 84aa 	bpl.w	405054 <_vfiprintf_r+0xb6c>
  404700:	f04f 33ff 	mov.w	r3, #4294967295
  404704:	9303      	str	r3, [sp, #12]
  404706:	9803      	ldr	r0, [sp, #12]
  404708:	b02d      	add	sp, #180	; 0xb4
  40470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40470e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404712:	f001 fa9f 	bl	405c54 <__retarget_lock_acquire_recursive>
  404716:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40471a:	b281      	uxth	r1, r0
  40471c:	e6fb      	b.n	404516 <_vfiprintf_r+0x2e>
  40471e:	4276      	negs	r6, r6
  404720:	9207      	str	r2, [sp, #28]
  404722:	f043 0304 	orr.w	r3, r3, #4
  404726:	f898 2000 	ldrb.w	r2, [r8]
  40472a:	e74f      	b.n	4045cc <_vfiprintf_r+0xe4>
  40472c:	9608      	str	r6, [sp, #32]
  40472e:	069e      	lsls	r6, r3, #26
  404730:	f100 8450 	bmi.w	404fd4 <_vfiprintf_r+0xaec>
  404734:	9907      	ldr	r1, [sp, #28]
  404736:	06dd      	lsls	r5, r3, #27
  404738:	460a      	mov	r2, r1
  40473a:	f100 83ef 	bmi.w	404f1c <_vfiprintf_r+0xa34>
  40473e:	0658      	lsls	r0, r3, #25
  404740:	f140 83ec 	bpl.w	404f1c <_vfiprintf_r+0xa34>
  404744:	880e      	ldrh	r6, [r1, #0]
  404746:	3104      	adds	r1, #4
  404748:	2700      	movs	r7, #0
  40474a:	2201      	movs	r2, #1
  40474c:	9107      	str	r1, [sp, #28]
  40474e:	f04f 0100 	mov.w	r1, #0
  404752:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404756:	2500      	movs	r5, #0
  404758:	1c61      	adds	r1, r4, #1
  40475a:	f000 8116 	beq.w	40498a <_vfiprintf_r+0x4a2>
  40475e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404762:	9102      	str	r1, [sp, #8]
  404764:	ea56 0107 	orrs.w	r1, r6, r7
  404768:	f040 8114 	bne.w	404994 <_vfiprintf_r+0x4ac>
  40476c:	2c00      	cmp	r4, #0
  40476e:	f040 835c 	bne.w	404e2a <_vfiprintf_r+0x942>
  404772:	2a00      	cmp	r2, #0
  404774:	f040 83b7 	bne.w	404ee6 <_vfiprintf_r+0x9fe>
  404778:	f013 0301 	ands.w	r3, r3, #1
  40477c:	9305      	str	r3, [sp, #20]
  40477e:	f000 8457 	beq.w	405030 <_vfiprintf_r+0xb48>
  404782:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404786:	2330      	movs	r3, #48	; 0x30
  404788:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40478c:	9b05      	ldr	r3, [sp, #20]
  40478e:	42a3      	cmp	r3, r4
  404790:	bfb8      	it	lt
  404792:	4623      	movlt	r3, r4
  404794:	9301      	str	r3, [sp, #4]
  404796:	b10d      	cbz	r5, 40479c <_vfiprintf_r+0x2b4>
  404798:	3301      	adds	r3, #1
  40479a:	9301      	str	r3, [sp, #4]
  40479c:	9b02      	ldr	r3, [sp, #8]
  40479e:	f013 0302 	ands.w	r3, r3, #2
  4047a2:	9309      	str	r3, [sp, #36]	; 0x24
  4047a4:	d002      	beq.n	4047ac <_vfiprintf_r+0x2c4>
  4047a6:	9b01      	ldr	r3, [sp, #4]
  4047a8:	3302      	adds	r3, #2
  4047aa:	9301      	str	r3, [sp, #4]
  4047ac:	9b02      	ldr	r3, [sp, #8]
  4047ae:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4047b2:	930a      	str	r3, [sp, #40]	; 0x28
  4047b4:	f040 8217 	bne.w	404be6 <_vfiprintf_r+0x6fe>
  4047b8:	9b08      	ldr	r3, [sp, #32]
  4047ba:	9a01      	ldr	r2, [sp, #4]
  4047bc:	1a9d      	subs	r5, r3, r2
  4047be:	2d00      	cmp	r5, #0
  4047c0:	f340 8211 	ble.w	404be6 <_vfiprintf_r+0x6fe>
  4047c4:	2d10      	cmp	r5, #16
  4047c6:	f340 8490 	ble.w	4050ea <_vfiprintf_r+0xc02>
  4047ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4047cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047ce:	4ec4      	ldr	r6, [pc, #784]	; (404ae0 <_vfiprintf_r+0x5f8>)
  4047d0:	46d6      	mov	lr, sl
  4047d2:	2710      	movs	r7, #16
  4047d4:	46a2      	mov	sl, r4
  4047d6:	4619      	mov	r1, r3
  4047d8:	9c06      	ldr	r4, [sp, #24]
  4047da:	e007      	b.n	4047ec <_vfiprintf_r+0x304>
  4047dc:	f101 0c02 	add.w	ip, r1, #2
  4047e0:	f10e 0e08 	add.w	lr, lr, #8
  4047e4:	4601      	mov	r1, r0
  4047e6:	3d10      	subs	r5, #16
  4047e8:	2d10      	cmp	r5, #16
  4047ea:	dd11      	ble.n	404810 <_vfiprintf_r+0x328>
  4047ec:	1c48      	adds	r0, r1, #1
  4047ee:	3210      	adds	r2, #16
  4047f0:	2807      	cmp	r0, #7
  4047f2:	9211      	str	r2, [sp, #68]	; 0x44
  4047f4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4047f8:	9010      	str	r0, [sp, #64]	; 0x40
  4047fa:	ddef      	ble.n	4047dc <_vfiprintf_r+0x2f4>
  4047fc:	2a00      	cmp	r2, #0
  4047fe:	f040 81e4 	bne.w	404bca <_vfiprintf_r+0x6e2>
  404802:	3d10      	subs	r5, #16
  404804:	2d10      	cmp	r5, #16
  404806:	4611      	mov	r1, r2
  404808:	f04f 0c01 	mov.w	ip, #1
  40480c:	46ce      	mov	lr, r9
  40480e:	dced      	bgt.n	4047ec <_vfiprintf_r+0x304>
  404810:	4654      	mov	r4, sl
  404812:	4661      	mov	r1, ip
  404814:	46f2      	mov	sl, lr
  404816:	442a      	add	r2, r5
  404818:	2907      	cmp	r1, #7
  40481a:	9211      	str	r2, [sp, #68]	; 0x44
  40481c:	f8ca 6000 	str.w	r6, [sl]
  404820:	f8ca 5004 	str.w	r5, [sl, #4]
  404824:	9110      	str	r1, [sp, #64]	; 0x40
  404826:	f300 82ec 	bgt.w	404e02 <_vfiprintf_r+0x91a>
  40482a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40482e:	f10a 0a08 	add.w	sl, sl, #8
  404832:	1c48      	adds	r0, r1, #1
  404834:	2d00      	cmp	r5, #0
  404836:	f040 81de 	bne.w	404bf6 <_vfiprintf_r+0x70e>
  40483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40483c:	2b00      	cmp	r3, #0
  40483e:	f000 81f8 	beq.w	404c32 <_vfiprintf_r+0x74a>
  404842:	3202      	adds	r2, #2
  404844:	a90e      	add	r1, sp, #56	; 0x38
  404846:	2302      	movs	r3, #2
  404848:	2807      	cmp	r0, #7
  40484a:	9211      	str	r2, [sp, #68]	; 0x44
  40484c:	9010      	str	r0, [sp, #64]	; 0x40
  40484e:	e88a 000a 	stmia.w	sl, {r1, r3}
  404852:	f340 81ea 	ble.w	404c2a <_vfiprintf_r+0x742>
  404856:	2a00      	cmp	r2, #0
  404858:	f040 838c 	bne.w	404f74 <_vfiprintf_r+0xa8c>
  40485c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40485e:	2b80      	cmp	r3, #128	; 0x80
  404860:	f04f 0001 	mov.w	r0, #1
  404864:	4611      	mov	r1, r2
  404866:	46ca      	mov	sl, r9
  404868:	f040 81e7 	bne.w	404c3a <_vfiprintf_r+0x752>
  40486c:	9b08      	ldr	r3, [sp, #32]
  40486e:	9d01      	ldr	r5, [sp, #4]
  404870:	1b5e      	subs	r6, r3, r5
  404872:	2e00      	cmp	r6, #0
  404874:	f340 81e1 	ble.w	404c3a <_vfiprintf_r+0x752>
  404878:	2e10      	cmp	r6, #16
  40487a:	4d9a      	ldr	r5, [pc, #616]	; (404ae4 <_vfiprintf_r+0x5fc>)
  40487c:	f340 8450 	ble.w	405120 <_vfiprintf_r+0xc38>
  404880:	46d4      	mov	ip, sl
  404882:	2710      	movs	r7, #16
  404884:	46a2      	mov	sl, r4
  404886:	9c06      	ldr	r4, [sp, #24]
  404888:	e007      	b.n	40489a <_vfiprintf_r+0x3b2>
  40488a:	f101 0e02 	add.w	lr, r1, #2
  40488e:	f10c 0c08 	add.w	ip, ip, #8
  404892:	4601      	mov	r1, r0
  404894:	3e10      	subs	r6, #16
  404896:	2e10      	cmp	r6, #16
  404898:	dd11      	ble.n	4048be <_vfiprintf_r+0x3d6>
  40489a:	1c48      	adds	r0, r1, #1
  40489c:	3210      	adds	r2, #16
  40489e:	2807      	cmp	r0, #7
  4048a0:	9211      	str	r2, [sp, #68]	; 0x44
  4048a2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4048a6:	9010      	str	r0, [sp, #64]	; 0x40
  4048a8:	ddef      	ble.n	40488a <_vfiprintf_r+0x3a2>
  4048aa:	2a00      	cmp	r2, #0
  4048ac:	f040 829d 	bne.w	404dea <_vfiprintf_r+0x902>
  4048b0:	3e10      	subs	r6, #16
  4048b2:	2e10      	cmp	r6, #16
  4048b4:	f04f 0e01 	mov.w	lr, #1
  4048b8:	4611      	mov	r1, r2
  4048ba:	46cc      	mov	ip, r9
  4048bc:	dced      	bgt.n	40489a <_vfiprintf_r+0x3b2>
  4048be:	4654      	mov	r4, sl
  4048c0:	46e2      	mov	sl, ip
  4048c2:	4432      	add	r2, r6
  4048c4:	f1be 0f07 	cmp.w	lr, #7
  4048c8:	9211      	str	r2, [sp, #68]	; 0x44
  4048ca:	e88a 0060 	stmia.w	sl, {r5, r6}
  4048ce:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4048d2:	f300 8369 	bgt.w	404fa8 <_vfiprintf_r+0xac0>
  4048d6:	f10a 0a08 	add.w	sl, sl, #8
  4048da:	f10e 0001 	add.w	r0, lr, #1
  4048de:	4671      	mov	r1, lr
  4048e0:	e1ab      	b.n	404c3a <_vfiprintf_r+0x752>
  4048e2:	9608      	str	r6, [sp, #32]
  4048e4:	f013 0220 	ands.w	r2, r3, #32
  4048e8:	f040 838c 	bne.w	405004 <_vfiprintf_r+0xb1c>
  4048ec:	f013 0110 	ands.w	r1, r3, #16
  4048f0:	f040 831a 	bne.w	404f28 <_vfiprintf_r+0xa40>
  4048f4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4048f8:	f000 8316 	beq.w	404f28 <_vfiprintf_r+0xa40>
  4048fc:	9807      	ldr	r0, [sp, #28]
  4048fe:	460a      	mov	r2, r1
  404900:	4601      	mov	r1, r0
  404902:	3104      	adds	r1, #4
  404904:	8806      	ldrh	r6, [r0, #0]
  404906:	9107      	str	r1, [sp, #28]
  404908:	2700      	movs	r7, #0
  40490a:	e720      	b.n	40474e <_vfiprintf_r+0x266>
  40490c:	9608      	str	r6, [sp, #32]
  40490e:	f043 0310 	orr.w	r3, r3, #16
  404912:	e7e7      	b.n	4048e4 <_vfiprintf_r+0x3fc>
  404914:	9608      	str	r6, [sp, #32]
  404916:	f043 0310 	orr.w	r3, r3, #16
  40491a:	e708      	b.n	40472e <_vfiprintf_r+0x246>
  40491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404920:	f898 2000 	ldrb.w	r2, [r8]
  404924:	e652      	b.n	4045cc <_vfiprintf_r+0xe4>
  404926:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40492a:	2600      	movs	r6, #0
  40492c:	f818 2b01 	ldrb.w	r2, [r8], #1
  404930:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404934:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404938:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40493c:	2909      	cmp	r1, #9
  40493e:	d9f5      	bls.n	40492c <_vfiprintf_r+0x444>
  404940:	e646      	b.n	4045d0 <_vfiprintf_r+0xe8>
  404942:	9608      	str	r6, [sp, #32]
  404944:	2800      	cmp	r0, #0
  404946:	f040 8408 	bne.w	40515a <_vfiprintf_r+0xc72>
  40494a:	f043 0310 	orr.w	r3, r3, #16
  40494e:	069e      	lsls	r6, r3, #26
  404950:	f100 834c 	bmi.w	404fec <_vfiprintf_r+0xb04>
  404954:	06dd      	lsls	r5, r3, #27
  404956:	f100 82f3 	bmi.w	404f40 <_vfiprintf_r+0xa58>
  40495a:	0658      	lsls	r0, r3, #25
  40495c:	f140 82f0 	bpl.w	404f40 <_vfiprintf_r+0xa58>
  404960:	9d07      	ldr	r5, [sp, #28]
  404962:	f9b5 6000 	ldrsh.w	r6, [r5]
  404966:	462a      	mov	r2, r5
  404968:	17f7      	asrs	r7, r6, #31
  40496a:	3204      	adds	r2, #4
  40496c:	4630      	mov	r0, r6
  40496e:	4639      	mov	r1, r7
  404970:	9207      	str	r2, [sp, #28]
  404972:	2800      	cmp	r0, #0
  404974:	f171 0200 	sbcs.w	r2, r1, #0
  404978:	f2c0 835d 	blt.w	405036 <_vfiprintf_r+0xb4e>
  40497c:	1c61      	adds	r1, r4, #1
  40497e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404982:	f04f 0201 	mov.w	r2, #1
  404986:	f47f aeea 	bne.w	40475e <_vfiprintf_r+0x276>
  40498a:	ea56 0107 	orrs.w	r1, r6, r7
  40498e:	f000 824d 	beq.w	404e2c <_vfiprintf_r+0x944>
  404992:	9302      	str	r3, [sp, #8]
  404994:	2a01      	cmp	r2, #1
  404996:	f000 828c 	beq.w	404eb2 <_vfiprintf_r+0x9ca>
  40499a:	2a02      	cmp	r2, #2
  40499c:	f040 825c 	bne.w	404e58 <_vfiprintf_r+0x970>
  4049a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4049a2:	46cb      	mov	fp, r9
  4049a4:	0933      	lsrs	r3, r6, #4
  4049a6:	f006 010f 	and.w	r1, r6, #15
  4049aa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4049ae:	093a      	lsrs	r2, r7, #4
  4049b0:	461e      	mov	r6, r3
  4049b2:	4617      	mov	r7, r2
  4049b4:	5c43      	ldrb	r3, [r0, r1]
  4049b6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4049ba:	ea56 0307 	orrs.w	r3, r6, r7
  4049be:	d1f1      	bne.n	4049a4 <_vfiprintf_r+0x4bc>
  4049c0:	eba9 030b 	sub.w	r3, r9, fp
  4049c4:	9305      	str	r3, [sp, #20]
  4049c6:	e6e1      	b.n	40478c <_vfiprintf_r+0x2a4>
  4049c8:	2800      	cmp	r0, #0
  4049ca:	f040 83c0 	bne.w	40514e <_vfiprintf_r+0xc66>
  4049ce:	0699      	lsls	r1, r3, #26
  4049d0:	f100 8367 	bmi.w	4050a2 <_vfiprintf_r+0xbba>
  4049d4:	06da      	lsls	r2, r3, #27
  4049d6:	f100 80f1 	bmi.w	404bbc <_vfiprintf_r+0x6d4>
  4049da:	065b      	lsls	r3, r3, #25
  4049dc:	f140 80ee 	bpl.w	404bbc <_vfiprintf_r+0x6d4>
  4049e0:	9a07      	ldr	r2, [sp, #28]
  4049e2:	6813      	ldr	r3, [r2, #0]
  4049e4:	3204      	adds	r2, #4
  4049e6:	9207      	str	r2, [sp, #28]
  4049e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4049ec:	801a      	strh	r2, [r3, #0]
  4049ee:	e5b8      	b.n	404562 <_vfiprintf_r+0x7a>
  4049f0:	9807      	ldr	r0, [sp, #28]
  4049f2:	4a3d      	ldr	r2, [pc, #244]	; (404ae8 <_vfiprintf_r+0x600>)
  4049f4:	9608      	str	r6, [sp, #32]
  4049f6:	920b      	str	r2, [sp, #44]	; 0x2c
  4049f8:	6806      	ldr	r6, [r0, #0]
  4049fa:	2278      	movs	r2, #120	; 0x78
  4049fc:	2130      	movs	r1, #48	; 0x30
  4049fe:	3004      	adds	r0, #4
  404a00:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404a04:	f043 0302 	orr.w	r3, r3, #2
  404a08:	9007      	str	r0, [sp, #28]
  404a0a:	2700      	movs	r7, #0
  404a0c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404a10:	2202      	movs	r2, #2
  404a12:	e69c      	b.n	40474e <_vfiprintf_r+0x266>
  404a14:	9608      	str	r6, [sp, #32]
  404a16:	2800      	cmp	r0, #0
  404a18:	d099      	beq.n	40494e <_vfiprintf_r+0x466>
  404a1a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404a1e:	e796      	b.n	40494e <_vfiprintf_r+0x466>
  404a20:	f898 2000 	ldrb.w	r2, [r8]
  404a24:	2d00      	cmp	r5, #0
  404a26:	f47f add1 	bne.w	4045cc <_vfiprintf_r+0xe4>
  404a2a:	2001      	movs	r0, #1
  404a2c:	2520      	movs	r5, #32
  404a2e:	e5cd      	b.n	4045cc <_vfiprintf_r+0xe4>
  404a30:	f043 0301 	orr.w	r3, r3, #1
  404a34:	f898 2000 	ldrb.w	r2, [r8]
  404a38:	e5c8      	b.n	4045cc <_vfiprintf_r+0xe4>
  404a3a:	9608      	str	r6, [sp, #32]
  404a3c:	2800      	cmp	r0, #0
  404a3e:	f040 8393 	bne.w	405168 <_vfiprintf_r+0xc80>
  404a42:	4929      	ldr	r1, [pc, #164]	; (404ae8 <_vfiprintf_r+0x600>)
  404a44:	910b      	str	r1, [sp, #44]	; 0x2c
  404a46:	069f      	lsls	r7, r3, #26
  404a48:	f100 82e8 	bmi.w	40501c <_vfiprintf_r+0xb34>
  404a4c:	9807      	ldr	r0, [sp, #28]
  404a4e:	06de      	lsls	r6, r3, #27
  404a50:	4601      	mov	r1, r0
  404a52:	f100 8270 	bmi.w	404f36 <_vfiprintf_r+0xa4e>
  404a56:	065d      	lsls	r5, r3, #25
  404a58:	f140 826d 	bpl.w	404f36 <_vfiprintf_r+0xa4e>
  404a5c:	3104      	adds	r1, #4
  404a5e:	8806      	ldrh	r6, [r0, #0]
  404a60:	9107      	str	r1, [sp, #28]
  404a62:	2700      	movs	r7, #0
  404a64:	07d8      	lsls	r0, r3, #31
  404a66:	f140 8222 	bpl.w	404eae <_vfiprintf_r+0x9c6>
  404a6a:	ea56 0107 	orrs.w	r1, r6, r7
  404a6e:	f000 821e 	beq.w	404eae <_vfiprintf_r+0x9c6>
  404a72:	2130      	movs	r1, #48	; 0x30
  404a74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404a78:	f043 0302 	orr.w	r3, r3, #2
  404a7c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404a80:	2202      	movs	r2, #2
  404a82:	e664      	b.n	40474e <_vfiprintf_r+0x266>
  404a84:	9608      	str	r6, [sp, #32]
  404a86:	2800      	cmp	r0, #0
  404a88:	f040 836b 	bne.w	405162 <_vfiprintf_r+0xc7a>
  404a8c:	4917      	ldr	r1, [pc, #92]	; (404aec <_vfiprintf_r+0x604>)
  404a8e:	910b      	str	r1, [sp, #44]	; 0x2c
  404a90:	e7d9      	b.n	404a46 <_vfiprintf_r+0x55e>
  404a92:	9907      	ldr	r1, [sp, #28]
  404a94:	9608      	str	r6, [sp, #32]
  404a96:	680a      	ldr	r2, [r1, #0]
  404a98:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404a9c:	f04f 0000 	mov.w	r0, #0
  404aa0:	460a      	mov	r2, r1
  404aa2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404aa6:	3204      	adds	r2, #4
  404aa8:	2001      	movs	r0, #1
  404aaa:	9001      	str	r0, [sp, #4]
  404aac:	9207      	str	r2, [sp, #28]
  404aae:	9005      	str	r0, [sp, #20]
  404ab0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404ab4:	9302      	str	r3, [sp, #8]
  404ab6:	2400      	movs	r4, #0
  404ab8:	e670      	b.n	40479c <_vfiprintf_r+0x2b4>
  404aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404abe:	f898 2000 	ldrb.w	r2, [r8]
  404ac2:	e583      	b.n	4045cc <_vfiprintf_r+0xe4>
  404ac4:	f898 2000 	ldrb.w	r2, [r8]
  404ac8:	2a6c      	cmp	r2, #108	; 0x6c
  404aca:	bf03      	ittte	eq
  404acc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404ad0:	f043 0320 	orreq.w	r3, r3, #32
  404ad4:	f108 0801 	addeq.w	r8, r8, #1
  404ad8:	f043 0310 	orrne.w	r3, r3, #16
  404adc:	e576      	b.n	4045cc <_vfiprintf_r+0xe4>
  404ade:	bf00      	nop
  404ae0:	00408c5c 	.word	0x00408c5c
  404ae4:	00408c6c 	.word	0x00408c6c
  404ae8:	00408c40 	.word	0x00408c40
  404aec:	00408c2c 	.word	0x00408c2c
  404af0:	9907      	ldr	r1, [sp, #28]
  404af2:	680e      	ldr	r6, [r1, #0]
  404af4:	460a      	mov	r2, r1
  404af6:	2e00      	cmp	r6, #0
  404af8:	f102 0204 	add.w	r2, r2, #4
  404afc:	f6ff ae0f 	blt.w	40471e <_vfiprintf_r+0x236>
  404b00:	9207      	str	r2, [sp, #28]
  404b02:	f898 2000 	ldrb.w	r2, [r8]
  404b06:	e561      	b.n	4045cc <_vfiprintf_r+0xe4>
  404b08:	f898 2000 	ldrb.w	r2, [r8]
  404b0c:	2001      	movs	r0, #1
  404b0e:	252b      	movs	r5, #43	; 0x2b
  404b10:	e55c      	b.n	4045cc <_vfiprintf_r+0xe4>
  404b12:	9907      	ldr	r1, [sp, #28]
  404b14:	9608      	str	r6, [sp, #32]
  404b16:	f8d1 b000 	ldr.w	fp, [r1]
  404b1a:	f04f 0200 	mov.w	r2, #0
  404b1e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404b22:	1d0e      	adds	r6, r1, #4
  404b24:	f1bb 0f00 	cmp.w	fp, #0
  404b28:	f000 82e5 	beq.w	4050f6 <_vfiprintf_r+0xc0e>
  404b2c:	1c67      	adds	r7, r4, #1
  404b2e:	f000 82c4 	beq.w	4050ba <_vfiprintf_r+0xbd2>
  404b32:	4622      	mov	r2, r4
  404b34:	2100      	movs	r1, #0
  404b36:	4658      	mov	r0, fp
  404b38:	9301      	str	r3, [sp, #4]
  404b3a:	f001 fbd9 	bl	4062f0 <memchr>
  404b3e:	9b01      	ldr	r3, [sp, #4]
  404b40:	2800      	cmp	r0, #0
  404b42:	f000 82e5 	beq.w	405110 <_vfiprintf_r+0xc28>
  404b46:	eba0 020b 	sub.w	r2, r0, fp
  404b4a:	9205      	str	r2, [sp, #20]
  404b4c:	9607      	str	r6, [sp, #28]
  404b4e:	9302      	str	r3, [sp, #8]
  404b50:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b54:	2400      	movs	r4, #0
  404b56:	e619      	b.n	40478c <_vfiprintf_r+0x2a4>
  404b58:	f898 2000 	ldrb.w	r2, [r8]
  404b5c:	2a2a      	cmp	r2, #42	; 0x2a
  404b5e:	f108 0701 	add.w	r7, r8, #1
  404b62:	f000 82e9 	beq.w	405138 <_vfiprintf_r+0xc50>
  404b66:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b6a:	2909      	cmp	r1, #9
  404b6c:	46b8      	mov	r8, r7
  404b6e:	f04f 0400 	mov.w	r4, #0
  404b72:	f63f ad2d 	bhi.w	4045d0 <_vfiprintf_r+0xe8>
  404b76:	f818 2b01 	ldrb.w	r2, [r8], #1
  404b7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b7e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404b82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b86:	2909      	cmp	r1, #9
  404b88:	d9f5      	bls.n	404b76 <_vfiprintf_r+0x68e>
  404b8a:	e521      	b.n	4045d0 <_vfiprintf_r+0xe8>
  404b8c:	f043 0320 	orr.w	r3, r3, #32
  404b90:	f898 2000 	ldrb.w	r2, [r8]
  404b94:	e51a      	b.n	4045cc <_vfiprintf_r+0xe4>
  404b96:	9608      	str	r6, [sp, #32]
  404b98:	2800      	cmp	r0, #0
  404b9a:	f040 82db 	bne.w	405154 <_vfiprintf_r+0xc6c>
  404b9e:	2a00      	cmp	r2, #0
  404ba0:	f000 80e7 	beq.w	404d72 <_vfiprintf_r+0x88a>
  404ba4:	2101      	movs	r1, #1
  404ba6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404baa:	f04f 0200 	mov.w	r2, #0
  404bae:	9101      	str	r1, [sp, #4]
  404bb0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404bb4:	9105      	str	r1, [sp, #20]
  404bb6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404bba:	e77b      	b.n	404ab4 <_vfiprintf_r+0x5cc>
  404bbc:	9a07      	ldr	r2, [sp, #28]
  404bbe:	6813      	ldr	r3, [r2, #0]
  404bc0:	3204      	adds	r2, #4
  404bc2:	9207      	str	r2, [sp, #28]
  404bc4:	9a03      	ldr	r2, [sp, #12]
  404bc6:	601a      	str	r2, [r3, #0]
  404bc8:	e4cb      	b.n	404562 <_vfiprintf_r+0x7a>
  404bca:	aa0f      	add	r2, sp, #60	; 0x3c
  404bcc:	9904      	ldr	r1, [sp, #16]
  404bce:	4620      	mov	r0, r4
  404bd0:	f7ff fc4a 	bl	404468 <__sprint_r.part.0>
  404bd4:	2800      	cmp	r0, #0
  404bd6:	f040 8139 	bne.w	404e4c <_vfiprintf_r+0x964>
  404bda:	9910      	ldr	r1, [sp, #64]	; 0x40
  404bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bde:	f101 0c01 	add.w	ip, r1, #1
  404be2:	46ce      	mov	lr, r9
  404be4:	e5ff      	b.n	4047e6 <_vfiprintf_r+0x2fe>
  404be6:	9910      	ldr	r1, [sp, #64]	; 0x40
  404be8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bea:	1c48      	adds	r0, r1, #1
  404bec:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404bf0:	2d00      	cmp	r5, #0
  404bf2:	f43f ae22 	beq.w	40483a <_vfiprintf_r+0x352>
  404bf6:	3201      	adds	r2, #1
  404bf8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404bfc:	2101      	movs	r1, #1
  404bfe:	2807      	cmp	r0, #7
  404c00:	9211      	str	r2, [sp, #68]	; 0x44
  404c02:	9010      	str	r0, [sp, #64]	; 0x40
  404c04:	f8ca 5000 	str.w	r5, [sl]
  404c08:	f8ca 1004 	str.w	r1, [sl, #4]
  404c0c:	f340 8108 	ble.w	404e20 <_vfiprintf_r+0x938>
  404c10:	2a00      	cmp	r2, #0
  404c12:	f040 81bc 	bne.w	404f8e <_vfiprintf_r+0xaa6>
  404c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c18:	2b00      	cmp	r3, #0
  404c1a:	f43f ae1f 	beq.w	40485c <_vfiprintf_r+0x374>
  404c1e:	ab0e      	add	r3, sp, #56	; 0x38
  404c20:	2202      	movs	r2, #2
  404c22:	4608      	mov	r0, r1
  404c24:	931c      	str	r3, [sp, #112]	; 0x70
  404c26:	921d      	str	r2, [sp, #116]	; 0x74
  404c28:	46ca      	mov	sl, r9
  404c2a:	4601      	mov	r1, r0
  404c2c:	f10a 0a08 	add.w	sl, sl, #8
  404c30:	3001      	adds	r0, #1
  404c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c34:	2b80      	cmp	r3, #128	; 0x80
  404c36:	f43f ae19 	beq.w	40486c <_vfiprintf_r+0x384>
  404c3a:	9b05      	ldr	r3, [sp, #20]
  404c3c:	1ae4      	subs	r4, r4, r3
  404c3e:	2c00      	cmp	r4, #0
  404c40:	dd2e      	ble.n	404ca0 <_vfiprintf_r+0x7b8>
  404c42:	2c10      	cmp	r4, #16
  404c44:	4db3      	ldr	r5, [pc, #716]	; (404f14 <_vfiprintf_r+0xa2c>)
  404c46:	dd1e      	ble.n	404c86 <_vfiprintf_r+0x79e>
  404c48:	46d6      	mov	lr, sl
  404c4a:	2610      	movs	r6, #16
  404c4c:	9f06      	ldr	r7, [sp, #24]
  404c4e:	f8dd a010 	ldr.w	sl, [sp, #16]
  404c52:	e006      	b.n	404c62 <_vfiprintf_r+0x77a>
  404c54:	1c88      	adds	r0, r1, #2
  404c56:	f10e 0e08 	add.w	lr, lr, #8
  404c5a:	4619      	mov	r1, r3
  404c5c:	3c10      	subs	r4, #16
  404c5e:	2c10      	cmp	r4, #16
  404c60:	dd10      	ble.n	404c84 <_vfiprintf_r+0x79c>
  404c62:	1c4b      	adds	r3, r1, #1
  404c64:	3210      	adds	r2, #16
  404c66:	2b07      	cmp	r3, #7
  404c68:	9211      	str	r2, [sp, #68]	; 0x44
  404c6a:	e88e 0060 	stmia.w	lr, {r5, r6}
  404c6e:	9310      	str	r3, [sp, #64]	; 0x40
  404c70:	ddf0      	ble.n	404c54 <_vfiprintf_r+0x76c>
  404c72:	2a00      	cmp	r2, #0
  404c74:	d165      	bne.n	404d42 <_vfiprintf_r+0x85a>
  404c76:	3c10      	subs	r4, #16
  404c78:	2c10      	cmp	r4, #16
  404c7a:	f04f 0001 	mov.w	r0, #1
  404c7e:	4611      	mov	r1, r2
  404c80:	46ce      	mov	lr, r9
  404c82:	dcee      	bgt.n	404c62 <_vfiprintf_r+0x77a>
  404c84:	46f2      	mov	sl, lr
  404c86:	4422      	add	r2, r4
  404c88:	2807      	cmp	r0, #7
  404c8a:	9211      	str	r2, [sp, #68]	; 0x44
  404c8c:	f8ca 5000 	str.w	r5, [sl]
  404c90:	f8ca 4004 	str.w	r4, [sl, #4]
  404c94:	9010      	str	r0, [sp, #64]	; 0x40
  404c96:	f300 8085 	bgt.w	404da4 <_vfiprintf_r+0x8bc>
  404c9a:	f10a 0a08 	add.w	sl, sl, #8
  404c9e:	3001      	adds	r0, #1
  404ca0:	9905      	ldr	r1, [sp, #20]
  404ca2:	f8ca b000 	str.w	fp, [sl]
  404ca6:	440a      	add	r2, r1
  404ca8:	2807      	cmp	r0, #7
  404caa:	9211      	str	r2, [sp, #68]	; 0x44
  404cac:	f8ca 1004 	str.w	r1, [sl, #4]
  404cb0:	9010      	str	r0, [sp, #64]	; 0x40
  404cb2:	f340 8082 	ble.w	404dba <_vfiprintf_r+0x8d2>
  404cb6:	2a00      	cmp	r2, #0
  404cb8:	f040 8118 	bne.w	404eec <_vfiprintf_r+0xa04>
  404cbc:	9b02      	ldr	r3, [sp, #8]
  404cbe:	9210      	str	r2, [sp, #64]	; 0x40
  404cc0:	0758      	lsls	r0, r3, #29
  404cc2:	d535      	bpl.n	404d30 <_vfiprintf_r+0x848>
  404cc4:	9b08      	ldr	r3, [sp, #32]
  404cc6:	9901      	ldr	r1, [sp, #4]
  404cc8:	1a5c      	subs	r4, r3, r1
  404cca:	2c00      	cmp	r4, #0
  404ccc:	f340 80e7 	ble.w	404e9e <_vfiprintf_r+0x9b6>
  404cd0:	46ca      	mov	sl, r9
  404cd2:	2c10      	cmp	r4, #16
  404cd4:	f340 8218 	ble.w	405108 <_vfiprintf_r+0xc20>
  404cd8:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cda:	4e8f      	ldr	r6, [pc, #572]	; (404f18 <_vfiprintf_r+0xa30>)
  404cdc:	9f06      	ldr	r7, [sp, #24]
  404cde:	f8dd b010 	ldr.w	fp, [sp, #16]
  404ce2:	2510      	movs	r5, #16
  404ce4:	e006      	b.n	404cf4 <_vfiprintf_r+0x80c>
  404ce6:	1c88      	adds	r0, r1, #2
  404ce8:	f10a 0a08 	add.w	sl, sl, #8
  404cec:	4619      	mov	r1, r3
  404cee:	3c10      	subs	r4, #16
  404cf0:	2c10      	cmp	r4, #16
  404cf2:	dd11      	ble.n	404d18 <_vfiprintf_r+0x830>
  404cf4:	1c4b      	adds	r3, r1, #1
  404cf6:	3210      	adds	r2, #16
  404cf8:	2b07      	cmp	r3, #7
  404cfa:	9211      	str	r2, [sp, #68]	; 0x44
  404cfc:	f8ca 6000 	str.w	r6, [sl]
  404d00:	f8ca 5004 	str.w	r5, [sl, #4]
  404d04:	9310      	str	r3, [sp, #64]	; 0x40
  404d06:	ddee      	ble.n	404ce6 <_vfiprintf_r+0x7fe>
  404d08:	bb42      	cbnz	r2, 404d5c <_vfiprintf_r+0x874>
  404d0a:	3c10      	subs	r4, #16
  404d0c:	2c10      	cmp	r4, #16
  404d0e:	f04f 0001 	mov.w	r0, #1
  404d12:	4611      	mov	r1, r2
  404d14:	46ca      	mov	sl, r9
  404d16:	dced      	bgt.n	404cf4 <_vfiprintf_r+0x80c>
  404d18:	4422      	add	r2, r4
  404d1a:	2807      	cmp	r0, #7
  404d1c:	9211      	str	r2, [sp, #68]	; 0x44
  404d1e:	f8ca 6000 	str.w	r6, [sl]
  404d22:	f8ca 4004 	str.w	r4, [sl, #4]
  404d26:	9010      	str	r0, [sp, #64]	; 0x40
  404d28:	dd51      	ble.n	404dce <_vfiprintf_r+0x8e6>
  404d2a:	2a00      	cmp	r2, #0
  404d2c:	f040 819b 	bne.w	405066 <_vfiprintf_r+0xb7e>
  404d30:	9b03      	ldr	r3, [sp, #12]
  404d32:	9a08      	ldr	r2, [sp, #32]
  404d34:	9901      	ldr	r1, [sp, #4]
  404d36:	428a      	cmp	r2, r1
  404d38:	bfac      	ite	ge
  404d3a:	189b      	addge	r3, r3, r2
  404d3c:	185b      	addlt	r3, r3, r1
  404d3e:	9303      	str	r3, [sp, #12]
  404d40:	e04e      	b.n	404de0 <_vfiprintf_r+0x8f8>
  404d42:	aa0f      	add	r2, sp, #60	; 0x3c
  404d44:	4651      	mov	r1, sl
  404d46:	4638      	mov	r0, r7
  404d48:	f7ff fb8e 	bl	404468 <__sprint_r.part.0>
  404d4c:	2800      	cmp	r0, #0
  404d4e:	f040 813f 	bne.w	404fd0 <_vfiprintf_r+0xae8>
  404d52:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d56:	1c48      	adds	r0, r1, #1
  404d58:	46ce      	mov	lr, r9
  404d5a:	e77f      	b.n	404c5c <_vfiprintf_r+0x774>
  404d5c:	aa0f      	add	r2, sp, #60	; 0x3c
  404d5e:	4659      	mov	r1, fp
  404d60:	4638      	mov	r0, r7
  404d62:	f7ff fb81 	bl	404468 <__sprint_r.part.0>
  404d66:	b960      	cbnz	r0, 404d82 <_vfiprintf_r+0x89a>
  404d68:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d6c:	1c48      	adds	r0, r1, #1
  404d6e:	46ca      	mov	sl, r9
  404d70:	e7bd      	b.n	404cee <_vfiprintf_r+0x806>
  404d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d74:	f8dd b010 	ldr.w	fp, [sp, #16]
  404d78:	2b00      	cmp	r3, #0
  404d7a:	f040 81d4 	bne.w	405126 <_vfiprintf_r+0xc3e>
  404d7e:	2300      	movs	r3, #0
  404d80:	9310      	str	r3, [sp, #64]	; 0x40
  404d82:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d86:	f013 0f01 	tst.w	r3, #1
  404d8a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d8e:	d102      	bne.n	404d96 <_vfiprintf_r+0x8ae>
  404d90:	059a      	lsls	r2, r3, #22
  404d92:	f140 80de 	bpl.w	404f52 <_vfiprintf_r+0xa6a>
  404d96:	065b      	lsls	r3, r3, #25
  404d98:	f53f acb2 	bmi.w	404700 <_vfiprintf_r+0x218>
  404d9c:	9803      	ldr	r0, [sp, #12]
  404d9e:	b02d      	add	sp, #180	; 0xb4
  404da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404da4:	2a00      	cmp	r2, #0
  404da6:	f040 8106 	bne.w	404fb6 <_vfiprintf_r+0xace>
  404daa:	9a05      	ldr	r2, [sp, #20]
  404dac:	921d      	str	r2, [sp, #116]	; 0x74
  404dae:	2301      	movs	r3, #1
  404db0:	9211      	str	r2, [sp, #68]	; 0x44
  404db2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404db6:	9310      	str	r3, [sp, #64]	; 0x40
  404db8:	46ca      	mov	sl, r9
  404dba:	f10a 0a08 	add.w	sl, sl, #8
  404dbe:	9b02      	ldr	r3, [sp, #8]
  404dc0:	0759      	lsls	r1, r3, #29
  404dc2:	d504      	bpl.n	404dce <_vfiprintf_r+0x8e6>
  404dc4:	9b08      	ldr	r3, [sp, #32]
  404dc6:	9901      	ldr	r1, [sp, #4]
  404dc8:	1a5c      	subs	r4, r3, r1
  404dca:	2c00      	cmp	r4, #0
  404dcc:	dc81      	bgt.n	404cd2 <_vfiprintf_r+0x7ea>
  404dce:	9b03      	ldr	r3, [sp, #12]
  404dd0:	9908      	ldr	r1, [sp, #32]
  404dd2:	9801      	ldr	r0, [sp, #4]
  404dd4:	4281      	cmp	r1, r0
  404dd6:	bfac      	ite	ge
  404dd8:	185b      	addge	r3, r3, r1
  404dda:	181b      	addlt	r3, r3, r0
  404ddc:	9303      	str	r3, [sp, #12]
  404dde:	bb72      	cbnz	r2, 404e3e <_vfiprintf_r+0x956>
  404de0:	2300      	movs	r3, #0
  404de2:	9310      	str	r3, [sp, #64]	; 0x40
  404de4:	46ca      	mov	sl, r9
  404de6:	f7ff bbbc 	b.w	404562 <_vfiprintf_r+0x7a>
  404dea:	aa0f      	add	r2, sp, #60	; 0x3c
  404dec:	9904      	ldr	r1, [sp, #16]
  404dee:	4620      	mov	r0, r4
  404df0:	f7ff fb3a 	bl	404468 <__sprint_r.part.0>
  404df4:	bb50      	cbnz	r0, 404e4c <_vfiprintf_r+0x964>
  404df6:	9910      	ldr	r1, [sp, #64]	; 0x40
  404df8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dfa:	f101 0e01 	add.w	lr, r1, #1
  404dfe:	46cc      	mov	ip, r9
  404e00:	e548      	b.n	404894 <_vfiprintf_r+0x3ac>
  404e02:	2a00      	cmp	r2, #0
  404e04:	f040 8140 	bne.w	405088 <_vfiprintf_r+0xba0>
  404e08:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404e0c:	2900      	cmp	r1, #0
  404e0e:	f000 811b 	beq.w	405048 <_vfiprintf_r+0xb60>
  404e12:	2201      	movs	r2, #1
  404e14:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404e18:	4610      	mov	r0, r2
  404e1a:	921d      	str	r2, [sp, #116]	; 0x74
  404e1c:	911c      	str	r1, [sp, #112]	; 0x70
  404e1e:	46ca      	mov	sl, r9
  404e20:	4601      	mov	r1, r0
  404e22:	f10a 0a08 	add.w	sl, sl, #8
  404e26:	3001      	adds	r0, #1
  404e28:	e507      	b.n	40483a <_vfiprintf_r+0x352>
  404e2a:	9b02      	ldr	r3, [sp, #8]
  404e2c:	2a01      	cmp	r2, #1
  404e2e:	f000 8098 	beq.w	404f62 <_vfiprintf_r+0xa7a>
  404e32:	2a02      	cmp	r2, #2
  404e34:	d10d      	bne.n	404e52 <_vfiprintf_r+0x96a>
  404e36:	9302      	str	r3, [sp, #8]
  404e38:	2600      	movs	r6, #0
  404e3a:	2700      	movs	r7, #0
  404e3c:	e5b0      	b.n	4049a0 <_vfiprintf_r+0x4b8>
  404e3e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e40:	9904      	ldr	r1, [sp, #16]
  404e42:	9806      	ldr	r0, [sp, #24]
  404e44:	f7ff fb10 	bl	404468 <__sprint_r.part.0>
  404e48:	2800      	cmp	r0, #0
  404e4a:	d0c9      	beq.n	404de0 <_vfiprintf_r+0x8f8>
  404e4c:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e50:	e797      	b.n	404d82 <_vfiprintf_r+0x89a>
  404e52:	9302      	str	r3, [sp, #8]
  404e54:	2600      	movs	r6, #0
  404e56:	2700      	movs	r7, #0
  404e58:	4649      	mov	r1, r9
  404e5a:	e000      	b.n	404e5e <_vfiprintf_r+0x976>
  404e5c:	4659      	mov	r1, fp
  404e5e:	08f2      	lsrs	r2, r6, #3
  404e60:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404e64:	08f8      	lsrs	r0, r7, #3
  404e66:	f006 0307 	and.w	r3, r6, #7
  404e6a:	4607      	mov	r7, r0
  404e6c:	4616      	mov	r6, r2
  404e6e:	3330      	adds	r3, #48	; 0x30
  404e70:	ea56 0207 	orrs.w	r2, r6, r7
  404e74:	f801 3c01 	strb.w	r3, [r1, #-1]
  404e78:	f101 3bff 	add.w	fp, r1, #4294967295
  404e7c:	d1ee      	bne.n	404e5c <_vfiprintf_r+0x974>
  404e7e:	9a02      	ldr	r2, [sp, #8]
  404e80:	07d6      	lsls	r6, r2, #31
  404e82:	f57f ad9d 	bpl.w	4049c0 <_vfiprintf_r+0x4d8>
  404e86:	2b30      	cmp	r3, #48	; 0x30
  404e88:	f43f ad9a 	beq.w	4049c0 <_vfiprintf_r+0x4d8>
  404e8c:	3902      	subs	r1, #2
  404e8e:	2330      	movs	r3, #48	; 0x30
  404e90:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404e94:	eba9 0301 	sub.w	r3, r9, r1
  404e98:	9305      	str	r3, [sp, #20]
  404e9a:	468b      	mov	fp, r1
  404e9c:	e476      	b.n	40478c <_vfiprintf_r+0x2a4>
  404e9e:	9b03      	ldr	r3, [sp, #12]
  404ea0:	9a08      	ldr	r2, [sp, #32]
  404ea2:	428a      	cmp	r2, r1
  404ea4:	bfac      	ite	ge
  404ea6:	189b      	addge	r3, r3, r2
  404ea8:	185b      	addlt	r3, r3, r1
  404eaa:	9303      	str	r3, [sp, #12]
  404eac:	e798      	b.n	404de0 <_vfiprintf_r+0x8f8>
  404eae:	2202      	movs	r2, #2
  404eb0:	e44d      	b.n	40474e <_vfiprintf_r+0x266>
  404eb2:	2f00      	cmp	r7, #0
  404eb4:	bf08      	it	eq
  404eb6:	2e0a      	cmpeq	r6, #10
  404eb8:	d352      	bcc.n	404f60 <_vfiprintf_r+0xa78>
  404eba:	46cb      	mov	fp, r9
  404ebc:	4630      	mov	r0, r6
  404ebe:	4639      	mov	r1, r7
  404ec0:	220a      	movs	r2, #10
  404ec2:	2300      	movs	r3, #0
  404ec4:	f001 ff18 	bl	406cf8 <__aeabi_uldivmod>
  404ec8:	3230      	adds	r2, #48	; 0x30
  404eca:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404ece:	4630      	mov	r0, r6
  404ed0:	4639      	mov	r1, r7
  404ed2:	2300      	movs	r3, #0
  404ed4:	220a      	movs	r2, #10
  404ed6:	f001 ff0f 	bl	406cf8 <__aeabi_uldivmod>
  404eda:	4606      	mov	r6, r0
  404edc:	460f      	mov	r7, r1
  404ede:	ea56 0307 	orrs.w	r3, r6, r7
  404ee2:	d1eb      	bne.n	404ebc <_vfiprintf_r+0x9d4>
  404ee4:	e56c      	b.n	4049c0 <_vfiprintf_r+0x4d8>
  404ee6:	9405      	str	r4, [sp, #20]
  404ee8:	46cb      	mov	fp, r9
  404eea:	e44f      	b.n	40478c <_vfiprintf_r+0x2a4>
  404eec:	aa0f      	add	r2, sp, #60	; 0x3c
  404eee:	9904      	ldr	r1, [sp, #16]
  404ef0:	9806      	ldr	r0, [sp, #24]
  404ef2:	f7ff fab9 	bl	404468 <__sprint_r.part.0>
  404ef6:	2800      	cmp	r0, #0
  404ef8:	d1a8      	bne.n	404e4c <_vfiprintf_r+0x964>
  404efa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404efc:	46ca      	mov	sl, r9
  404efe:	e75e      	b.n	404dbe <_vfiprintf_r+0x8d6>
  404f00:	aa0f      	add	r2, sp, #60	; 0x3c
  404f02:	9904      	ldr	r1, [sp, #16]
  404f04:	9806      	ldr	r0, [sp, #24]
  404f06:	f7ff faaf 	bl	404468 <__sprint_r.part.0>
  404f0a:	2800      	cmp	r0, #0
  404f0c:	d19e      	bne.n	404e4c <_vfiprintf_r+0x964>
  404f0e:	46ca      	mov	sl, r9
  404f10:	f7ff bbc0 	b.w	404694 <_vfiprintf_r+0x1ac>
  404f14:	00408c6c 	.word	0x00408c6c
  404f18:	00408c5c 	.word	0x00408c5c
  404f1c:	3104      	adds	r1, #4
  404f1e:	6816      	ldr	r6, [r2, #0]
  404f20:	9107      	str	r1, [sp, #28]
  404f22:	2201      	movs	r2, #1
  404f24:	2700      	movs	r7, #0
  404f26:	e412      	b.n	40474e <_vfiprintf_r+0x266>
  404f28:	9807      	ldr	r0, [sp, #28]
  404f2a:	4601      	mov	r1, r0
  404f2c:	3104      	adds	r1, #4
  404f2e:	6806      	ldr	r6, [r0, #0]
  404f30:	9107      	str	r1, [sp, #28]
  404f32:	2700      	movs	r7, #0
  404f34:	e40b      	b.n	40474e <_vfiprintf_r+0x266>
  404f36:	680e      	ldr	r6, [r1, #0]
  404f38:	3104      	adds	r1, #4
  404f3a:	9107      	str	r1, [sp, #28]
  404f3c:	2700      	movs	r7, #0
  404f3e:	e591      	b.n	404a64 <_vfiprintf_r+0x57c>
  404f40:	9907      	ldr	r1, [sp, #28]
  404f42:	680e      	ldr	r6, [r1, #0]
  404f44:	460a      	mov	r2, r1
  404f46:	17f7      	asrs	r7, r6, #31
  404f48:	3204      	adds	r2, #4
  404f4a:	9207      	str	r2, [sp, #28]
  404f4c:	4630      	mov	r0, r6
  404f4e:	4639      	mov	r1, r7
  404f50:	e50f      	b.n	404972 <_vfiprintf_r+0x48a>
  404f52:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f56:	f000 fe7f 	bl	405c58 <__retarget_lock_release_recursive>
  404f5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f5e:	e71a      	b.n	404d96 <_vfiprintf_r+0x8ae>
  404f60:	9b02      	ldr	r3, [sp, #8]
  404f62:	9302      	str	r3, [sp, #8]
  404f64:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404f68:	3630      	adds	r6, #48	; 0x30
  404f6a:	2301      	movs	r3, #1
  404f6c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404f70:	9305      	str	r3, [sp, #20]
  404f72:	e40b      	b.n	40478c <_vfiprintf_r+0x2a4>
  404f74:	aa0f      	add	r2, sp, #60	; 0x3c
  404f76:	9904      	ldr	r1, [sp, #16]
  404f78:	9806      	ldr	r0, [sp, #24]
  404f7a:	f7ff fa75 	bl	404468 <__sprint_r.part.0>
  404f7e:	2800      	cmp	r0, #0
  404f80:	f47f af64 	bne.w	404e4c <_vfiprintf_r+0x964>
  404f84:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f88:	1c48      	adds	r0, r1, #1
  404f8a:	46ca      	mov	sl, r9
  404f8c:	e651      	b.n	404c32 <_vfiprintf_r+0x74a>
  404f8e:	aa0f      	add	r2, sp, #60	; 0x3c
  404f90:	9904      	ldr	r1, [sp, #16]
  404f92:	9806      	ldr	r0, [sp, #24]
  404f94:	f7ff fa68 	bl	404468 <__sprint_r.part.0>
  404f98:	2800      	cmp	r0, #0
  404f9a:	f47f af57 	bne.w	404e4c <_vfiprintf_r+0x964>
  404f9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fa2:	1c48      	adds	r0, r1, #1
  404fa4:	46ca      	mov	sl, r9
  404fa6:	e448      	b.n	40483a <_vfiprintf_r+0x352>
  404fa8:	2a00      	cmp	r2, #0
  404faa:	f040 8091 	bne.w	4050d0 <_vfiprintf_r+0xbe8>
  404fae:	2001      	movs	r0, #1
  404fb0:	4611      	mov	r1, r2
  404fb2:	46ca      	mov	sl, r9
  404fb4:	e641      	b.n	404c3a <_vfiprintf_r+0x752>
  404fb6:	aa0f      	add	r2, sp, #60	; 0x3c
  404fb8:	9904      	ldr	r1, [sp, #16]
  404fba:	9806      	ldr	r0, [sp, #24]
  404fbc:	f7ff fa54 	bl	404468 <__sprint_r.part.0>
  404fc0:	2800      	cmp	r0, #0
  404fc2:	f47f af43 	bne.w	404e4c <_vfiprintf_r+0x964>
  404fc6:	9810      	ldr	r0, [sp, #64]	; 0x40
  404fc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fca:	3001      	adds	r0, #1
  404fcc:	46ca      	mov	sl, r9
  404fce:	e667      	b.n	404ca0 <_vfiprintf_r+0x7b8>
  404fd0:	46d3      	mov	fp, sl
  404fd2:	e6d6      	b.n	404d82 <_vfiprintf_r+0x89a>
  404fd4:	9e07      	ldr	r6, [sp, #28]
  404fd6:	3607      	adds	r6, #7
  404fd8:	f026 0207 	bic.w	r2, r6, #7
  404fdc:	f102 0108 	add.w	r1, r2, #8
  404fe0:	e9d2 6700 	ldrd	r6, r7, [r2]
  404fe4:	9107      	str	r1, [sp, #28]
  404fe6:	2201      	movs	r2, #1
  404fe8:	f7ff bbb1 	b.w	40474e <_vfiprintf_r+0x266>
  404fec:	9e07      	ldr	r6, [sp, #28]
  404fee:	3607      	adds	r6, #7
  404ff0:	f026 0607 	bic.w	r6, r6, #7
  404ff4:	e9d6 0100 	ldrd	r0, r1, [r6]
  404ff8:	f106 0208 	add.w	r2, r6, #8
  404ffc:	9207      	str	r2, [sp, #28]
  404ffe:	4606      	mov	r6, r0
  405000:	460f      	mov	r7, r1
  405002:	e4b6      	b.n	404972 <_vfiprintf_r+0x48a>
  405004:	9e07      	ldr	r6, [sp, #28]
  405006:	3607      	adds	r6, #7
  405008:	f026 0207 	bic.w	r2, r6, #7
  40500c:	f102 0108 	add.w	r1, r2, #8
  405010:	e9d2 6700 	ldrd	r6, r7, [r2]
  405014:	9107      	str	r1, [sp, #28]
  405016:	2200      	movs	r2, #0
  405018:	f7ff bb99 	b.w	40474e <_vfiprintf_r+0x266>
  40501c:	9e07      	ldr	r6, [sp, #28]
  40501e:	3607      	adds	r6, #7
  405020:	f026 0107 	bic.w	r1, r6, #7
  405024:	f101 0008 	add.w	r0, r1, #8
  405028:	9007      	str	r0, [sp, #28]
  40502a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40502e:	e519      	b.n	404a64 <_vfiprintf_r+0x57c>
  405030:	46cb      	mov	fp, r9
  405032:	f7ff bbab 	b.w	40478c <_vfiprintf_r+0x2a4>
  405036:	252d      	movs	r5, #45	; 0x2d
  405038:	4276      	negs	r6, r6
  40503a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40503e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405042:	2201      	movs	r2, #1
  405044:	f7ff bb88 	b.w	404758 <_vfiprintf_r+0x270>
  405048:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40504a:	b9b3      	cbnz	r3, 40507a <_vfiprintf_r+0xb92>
  40504c:	4611      	mov	r1, r2
  40504e:	2001      	movs	r0, #1
  405050:	46ca      	mov	sl, r9
  405052:	e5f2      	b.n	404c3a <_vfiprintf_r+0x752>
  405054:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405058:	f000 fdfe 	bl	405c58 <__retarget_lock_release_recursive>
  40505c:	f04f 33ff 	mov.w	r3, #4294967295
  405060:	9303      	str	r3, [sp, #12]
  405062:	f7ff bb50 	b.w	404706 <_vfiprintf_r+0x21e>
  405066:	aa0f      	add	r2, sp, #60	; 0x3c
  405068:	9904      	ldr	r1, [sp, #16]
  40506a:	9806      	ldr	r0, [sp, #24]
  40506c:	f7ff f9fc 	bl	404468 <__sprint_r.part.0>
  405070:	2800      	cmp	r0, #0
  405072:	f47f aeeb 	bne.w	404e4c <_vfiprintf_r+0x964>
  405076:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405078:	e6a9      	b.n	404dce <_vfiprintf_r+0x8e6>
  40507a:	ab0e      	add	r3, sp, #56	; 0x38
  40507c:	2202      	movs	r2, #2
  40507e:	931c      	str	r3, [sp, #112]	; 0x70
  405080:	921d      	str	r2, [sp, #116]	; 0x74
  405082:	2001      	movs	r0, #1
  405084:	46ca      	mov	sl, r9
  405086:	e5d0      	b.n	404c2a <_vfiprintf_r+0x742>
  405088:	aa0f      	add	r2, sp, #60	; 0x3c
  40508a:	9904      	ldr	r1, [sp, #16]
  40508c:	9806      	ldr	r0, [sp, #24]
  40508e:	f7ff f9eb 	bl	404468 <__sprint_r.part.0>
  405092:	2800      	cmp	r0, #0
  405094:	f47f aeda 	bne.w	404e4c <_vfiprintf_r+0x964>
  405098:	9910      	ldr	r1, [sp, #64]	; 0x40
  40509a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40509c:	1c48      	adds	r0, r1, #1
  40509e:	46ca      	mov	sl, r9
  4050a0:	e5a4      	b.n	404bec <_vfiprintf_r+0x704>
  4050a2:	9a07      	ldr	r2, [sp, #28]
  4050a4:	9903      	ldr	r1, [sp, #12]
  4050a6:	6813      	ldr	r3, [r2, #0]
  4050a8:	17cd      	asrs	r5, r1, #31
  4050aa:	4608      	mov	r0, r1
  4050ac:	3204      	adds	r2, #4
  4050ae:	4629      	mov	r1, r5
  4050b0:	9207      	str	r2, [sp, #28]
  4050b2:	e9c3 0100 	strd	r0, r1, [r3]
  4050b6:	f7ff ba54 	b.w	404562 <_vfiprintf_r+0x7a>
  4050ba:	4658      	mov	r0, fp
  4050bc:	9607      	str	r6, [sp, #28]
  4050be:	9302      	str	r3, [sp, #8]
  4050c0:	f001 fbde 	bl	406880 <strlen>
  4050c4:	2400      	movs	r4, #0
  4050c6:	9005      	str	r0, [sp, #20]
  4050c8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050cc:	f7ff bb5e 	b.w	40478c <_vfiprintf_r+0x2a4>
  4050d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4050d2:	9904      	ldr	r1, [sp, #16]
  4050d4:	9806      	ldr	r0, [sp, #24]
  4050d6:	f7ff f9c7 	bl	404468 <__sprint_r.part.0>
  4050da:	2800      	cmp	r0, #0
  4050dc:	f47f aeb6 	bne.w	404e4c <_vfiprintf_r+0x964>
  4050e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050e4:	1c48      	adds	r0, r1, #1
  4050e6:	46ca      	mov	sl, r9
  4050e8:	e5a7      	b.n	404c3a <_vfiprintf_r+0x752>
  4050ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050ee:	4e20      	ldr	r6, [pc, #128]	; (405170 <_vfiprintf_r+0xc88>)
  4050f0:	3101      	adds	r1, #1
  4050f2:	f7ff bb90 	b.w	404816 <_vfiprintf_r+0x32e>
  4050f6:	2c06      	cmp	r4, #6
  4050f8:	bf28      	it	cs
  4050fa:	2406      	movcs	r4, #6
  4050fc:	9405      	str	r4, [sp, #20]
  4050fe:	9607      	str	r6, [sp, #28]
  405100:	9401      	str	r4, [sp, #4]
  405102:	f8df b070 	ldr.w	fp, [pc, #112]	; 405174 <_vfiprintf_r+0xc8c>
  405106:	e4d5      	b.n	404ab4 <_vfiprintf_r+0x5cc>
  405108:	9810      	ldr	r0, [sp, #64]	; 0x40
  40510a:	4e19      	ldr	r6, [pc, #100]	; (405170 <_vfiprintf_r+0xc88>)
  40510c:	3001      	adds	r0, #1
  40510e:	e603      	b.n	404d18 <_vfiprintf_r+0x830>
  405110:	9405      	str	r4, [sp, #20]
  405112:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405116:	9607      	str	r6, [sp, #28]
  405118:	9302      	str	r3, [sp, #8]
  40511a:	4604      	mov	r4, r0
  40511c:	f7ff bb36 	b.w	40478c <_vfiprintf_r+0x2a4>
  405120:	4686      	mov	lr, r0
  405122:	f7ff bbce 	b.w	4048c2 <_vfiprintf_r+0x3da>
  405126:	9806      	ldr	r0, [sp, #24]
  405128:	aa0f      	add	r2, sp, #60	; 0x3c
  40512a:	4659      	mov	r1, fp
  40512c:	f7ff f99c 	bl	404468 <__sprint_r.part.0>
  405130:	2800      	cmp	r0, #0
  405132:	f43f ae24 	beq.w	404d7e <_vfiprintf_r+0x896>
  405136:	e624      	b.n	404d82 <_vfiprintf_r+0x89a>
  405138:	9907      	ldr	r1, [sp, #28]
  40513a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40513e:	680c      	ldr	r4, [r1, #0]
  405140:	3104      	adds	r1, #4
  405142:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405146:	46b8      	mov	r8, r7
  405148:	9107      	str	r1, [sp, #28]
  40514a:	f7ff ba3f 	b.w	4045cc <_vfiprintf_r+0xe4>
  40514e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405152:	e43c      	b.n	4049ce <_vfiprintf_r+0x4e6>
  405154:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405158:	e521      	b.n	404b9e <_vfiprintf_r+0x6b6>
  40515a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40515e:	f7ff bbf4 	b.w	40494a <_vfiprintf_r+0x462>
  405162:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405166:	e491      	b.n	404a8c <_vfiprintf_r+0x5a4>
  405168:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40516c:	e469      	b.n	404a42 <_vfiprintf_r+0x55a>
  40516e:	bf00      	nop
  405170:	00408c5c 	.word	0x00408c5c
  405174:	00408c54 	.word	0x00408c54

00405178 <__sbprintf>:
  405178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40517c:	460c      	mov	r4, r1
  40517e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405182:	8989      	ldrh	r1, [r1, #12]
  405184:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405186:	89e5      	ldrh	r5, [r4, #14]
  405188:	9619      	str	r6, [sp, #100]	; 0x64
  40518a:	f021 0102 	bic.w	r1, r1, #2
  40518e:	4606      	mov	r6, r0
  405190:	69e0      	ldr	r0, [r4, #28]
  405192:	f8ad 100c 	strh.w	r1, [sp, #12]
  405196:	4617      	mov	r7, r2
  405198:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40519c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40519e:	f8ad 500e 	strh.w	r5, [sp, #14]
  4051a2:	4698      	mov	r8, r3
  4051a4:	ad1a      	add	r5, sp, #104	; 0x68
  4051a6:	2300      	movs	r3, #0
  4051a8:	9007      	str	r0, [sp, #28]
  4051aa:	a816      	add	r0, sp, #88	; 0x58
  4051ac:	9209      	str	r2, [sp, #36]	; 0x24
  4051ae:	9306      	str	r3, [sp, #24]
  4051b0:	9500      	str	r5, [sp, #0]
  4051b2:	9504      	str	r5, [sp, #16]
  4051b4:	9102      	str	r1, [sp, #8]
  4051b6:	9105      	str	r1, [sp, #20]
  4051b8:	f000 fd48 	bl	405c4c <__retarget_lock_init_recursive>
  4051bc:	4643      	mov	r3, r8
  4051be:	463a      	mov	r2, r7
  4051c0:	4669      	mov	r1, sp
  4051c2:	4630      	mov	r0, r6
  4051c4:	f7ff f990 	bl	4044e8 <_vfiprintf_r>
  4051c8:	1e05      	subs	r5, r0, #0
  4051ca:	db07      	blt.n	4051dc <__sbprintf+0x64>
  4051cc:	4630      	mov	r0, r6
  4051ce:	4669      	mov	r1, sp
  4051d0:	f000 f928 	bl	405424 <_fflush_r>
  4051d4:	2800      	cmp	r0, #0
  4051d6:	bf18      	it	ne
  4051d8:	f04f 35ff 	movne.w	r5, #4294967295
  4051dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4051e0:	065b      	lsls	r3, r3, #25
  4051e2:	d503      	bpl.n	4051ec <__sbprintf+0x74>
  4051e4:	89a3      	ldrh	r3, [r4, #12]
  4051e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051ea:	81a3      	strh	r3, [r4, #12]
  4051ec:	9816      	ldr	r0, [sp, #88]	; 0x58
  4051ee:	f000 fd2f 	bl	405c50 <__retarget_lock_close_recursive>
  4051f2:	4628      	mov	r0, r5
  4051f4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4051f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004051fc <__swsetup_r>:
  4051fc:	b538      	push	{r3, r4, r5, lr}
  4051fe:	4b30      	ldr	r3, [pc, #192]	; (4052c0 <__swsetup_r+0xc4>)
  405200:	681b      	ldr	r3, [r3, #0]
  405202:	4605      	mov	r5, r0
  405204:	460c      	mov	r4, r1
  405206:	b113      	cbz	r3, 40520e <__swsetup_r+0x12>
  405208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40520a:	2a00      	cmp	r2, #0
  40520c:	d038      	beq.n	405280 <__swsetup_r+0x84>
  40520e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405212:	b293      	uxth	r3, r2
  405214:	0718      	lsls	r0, r3, #28
  405216:	d50c      	bpl.n	405232 <__swsetup_r+0x36>
  405218:	6920      	ldr	r0, [r4, #16]
  40521a:	b1a8      	cbz	r0, 405248 <__swsetup_r+0x4c>
  40521c:	f013 0201 	ands.w	r2, r3, #1
  405220:	d01e      	beq.n	405260 <__swsetup_r+0x64>
  405222:	6963      	ldr	r3, [r4, #20]
  405224:	2200      	movs	r2, #0
  405226:	425b      	negs	r3, r3
  405228:	61a3      	str	r3, [r4, #24]
  40522a:	60a2      	str	r2, [r4, #8]
  40522c:	b1f0      	cbz	r0, 40526c <__swsetup_r+0x70>
  40522e:	2000      	movs	r0, #0
  405230:	bd38      	pop	{r3, r4, r5, pc}
  405232:	06d9      	lsls	r1, r3, #27
  405234:	d53c      	bpl.n	4052b0 <__swsetup_r+0xb4>
  405236:	0758      	lsls	r0, r3, #29
  405238:	d426      	bmi.n	405288 <__swsetup_r+0x8c>
  40523a:	6920      	ldr	r0, [r4, #16]
  40523c:	f042 0308 	orr.w	r3, r2, #8
  405240:	81a3      	strh	r3, [r4, #12]
  405242:	b29b      	uxth	r3, r3
  405244:	2800      	cmp	r0, #0
  405246:	d1e9      	bne.n	40521c <__swsetup_r+0x20>
  405248:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40524c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405250:	d0e4      	beq.n	40521c <__swsetup_r+0x20>
  405252:	4628      	mov	r0, r5
  405254:	4621      	mov	r1, r4
  405256:	f000 fd2f 	bl	405cb8 <__smakebuf_r>
  40525a:	89a3      	ldrh	r3, [r4, #12]
  40525c:	6920      	ldr	r0, [r4, #16]
  40525e:	e7dd      	b.n	40521c <__swsetup_r+0x20>
  405260:	0799      	lsls	r1, r3, #30
  405262:	bf58      	it	pl
  405264:	6962      	ldrpl	r2, [r4, #20]
  405266:	60a2      	str	r2, [r4, #8]
  405268:	2800      	cmp	r0, #0
  40526a:	d1e0      	bne.n	40522e <__swsetup_r+0x32>
  40526c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405270:	061a      	lsls	r2, r3, #24
  405272:	d5dd      	bpl.n	405230 <__swsetup_r+0x34>
  405274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405278:	81a3      	strh	r3, [r4, #12]
  40527a:	f04f 30ff 	mov.w	r0, #4294967295
  40527e:	bd38      	pop	{r3, r4, r5, pc}
  405280:	4618      	mov	r0, r3
  405282:	f000 f927 	bl	4054d4 <__sinit>
  405286:	e7c2      	b.n	40520e <__swsetup_r+0x12>
  405288:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40528a:	b151      	cbz	r1, 4052a2 <__swsetup_r+0xa6>
  40528c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405290:	4299      	cmp	r1, r3
  405292:	d004      	beq.n	40529e <__swsetup_r+0xa2>
  405294:	4628      	mov	r0, r5
  405296:	f000 fa43 	bl	405720 <_free_r>
  40529a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40529e:	2300      	movs	r3, #0
  4052a0:	6323      	str	r3, [r4, #48]	; 0x30
  4052a2:	2300      	movs	r3, #0
  4052a4:	6920      	ldr	r0, [r4, #16]
  4052a6:	6063      	str	r3, [r4, #4]
  4052a8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4052ac:	6020      	str	r0, [r4, #0]
  4052ae:	e7c5      	b.n	40523c <__swsetup_r+0x40>
  4052b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4052b4:	2309      	movs	r3, #9
  4052b6:	602b      	str	r3, [r5, #0]
  4052b8:	f04f 30ff 	mov.w	r0, #4294967295
  4052bc:	81a2      	strh	r2, [r4, #12]
  4052be:	bd38      	pop	{r3, r4, r5, pc}
  4052c0:	200000c0 	.word	0x200000c0

004052c4 <register_fini>:
  4052c4:	4b02      	ldr	r3, [pc, #8]	; (4052d0 <register_fini+0xc>)
  4052c6:	b113      	cbz	r3, 4052ce <register_fini+0xa>
  4052c8:	4802      	ldr	r0, [pc, #8]	; (4052d4 <register_fini+0x10>)
  4052ca:	f000 b805 	b.w	4052d8 <atexit>
  4052ce:	4770      	bx	lr
  4052d0:	00000000 	.word	0x00000000
  4052d4:	00405545 	.word	0x00405545

004052d8 <atexit>:
  4052d8:	2300      	movs	r3, #0
  4052da:	4601      	mov	r1, r0
  4052dc:	461a      	mov	r2, r3
  4052de:	4618      	mov	r0, r3
  4052e0:	f001 bbe2 	b.w	406aa8 <__register_exitproc>

004052e4 <__sflush_r>:
  4052e4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4052e8:	b29a      	uxth	r2, r3
  4052ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052ee:	460d      	mov	r5, r1
  4052f0:	0711      	lsls	r1, r2, #28
  4052f2:	4680      	mov	r8, r0
  4052f4:	d43a      	bmi.n	40536c <__sflush_r+0x88>
  4052f6:	686a      	ldr	r2, [r5, #4]
  4052f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4052fc:	2a00      	cmp	r2, #0
  4052fe:	81ab      	strh	r3, [r5, #12]
  405300:	dd6f      	ble.n	4053e2 <__sflush_r+0xfe>
  405302:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405304:	2c00      	cmp	r4, #0
  405306:	d049      	beq.n	40539c <__sflush_r+0xb8>
  405308:	2200      	movs	r2, #0
  40530a:	b29b      	uxth	r3, r3
  40530c:	f8d8 6000 	ldr.w	r6, [r8]
  405310:	f8c8 2000 	str.w	r2, [r8]
  405314:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405318:	d067      	beq.n	4053ea <__sflush_r+0x106>
  40531a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40531c:	075f      	lsls	r7, r3, #29
  40531e:	d505      	bpl.n	40532c <__sflush_r+0x48>
  405320:	6869      	ldr	r1, [r5, #4]
  405322:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405324:	1a52      	subs	r2, r2, r1
  405326:	b10b      	cbz	r3, 40532c <__sflush_r+0x48>
  405328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40532a:	1ad2      	subs	r2, r2, r3
  40532c:	2300      	movs	r3, #0
  40532e:	69e9      	ldr	r1, [r5, #28]
  405330:	4640      	mov	r0, r8
  405332:	47a0      	blx	r4
  405334:	1c44      	adds	r4, r0, #1
  405336:	d03c      	beq.n	4053b2 <__sflush_r+0xce>
  405338:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40533c:	692a      	ldr	r2, [r5, #16]
  40533e:	602a      	str	r2, [r5, #0]
  405340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405344:	2200      	movs	r2, #0
  405346:	81ab      	strh	r3, [r5, #12]
  405348:	04db      	lsls	r3, r3, #19
  40534a:	606a      	str	r2, [r5, #4]
  40534c:	d447      	bmi.n	4053de <__sflush_r+0xfa>
  40534e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405350:	f8c8 6000 	str.w	r6, [r8]
  405354:	b311      	cbz	r1, 40539c <__sflush_r+0xb8>
  405356:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40535a:	4299      	cmp	r1, r3
  40535c:	d002      	beq.n	405364 <__sflush_r+0x80>
  40535e:	4640      	mov	r0, r8
  405360:	f000 f9de 	bl	405720 <_free_r>
  405364:	2000      	movs	r0, #0
  405366:	6328      	str	r0, [r5, #48]	; 0x30
  405368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40536c:	692e      	ldr	r6, [r5, #16]
  40536e:	b1ae      	cbz	r6, 40539c <__sflush_r+0xb8>
  405370:	682c      	ldr	r4, [r5, #0]
  405372:	602e      	str	r6, [r5, #0]
  405374:	0791      	lsls	r1, r2, #30
  405376:	bf0c      	ite	eq
  405378:	696b      	ldreq	r3, [r5, #20]
  40537a:	2300      	movne	r3, #0
  40537c:	1ba4      	subs	r4, r4, r6
  40537e:	60ab      	str	r3, [r5, #8]
  405380:	e00a      	b.n	405398 <__sflush_r+0xb4>
  405382:	4623      	mov	r3, r4
  405384:	4632      	mov	r2, r6
  405386:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405388:	69e9      	ldr	r1, [r5, #28]
  40538a:	4640      	mov	r0, r8
  40538c:	47b8      	blx	r7
  40538e:	2800      	cmp	r0, #0
  405390:	eba4 0400 	sub.w	r4, r4, r0
  405394:	4406      	add	r6, r0
  405396:	dd04      	ble.n	4053a2 <__sflush_r+0xbe>
  405398:	2c00      	cmp	r4, #0
  40539a:	dcf2      	bgt.n	405382 <__sflush_r+0x9e>
  40539c:	2000      	movs	r0, #0
  40539e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053a2:	89ab      	ldrh	r3, [r5, #12]
  4053a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053a8:	81ab      	strh	r3, [r5, #12]
  4053aa:	f04f 30ff 	mov.w	r0, #4294967295
  4053ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053b2:	f8d8 4000 	ldr.w	r4, [r8]
  4053b6:	2c1d      	cmp	r4, #29
  4053b8:	d8f3      	bhi.n	4053a2 <__sflush_r+0xbe>
  4053ba:	4b19      	ldr	r3, [pc, #100]	; (405420 <__sflush_r+0x13c>)
  4053bc:	40e3      	lsrs	r3, r4
  4053be:	43db      	mvns	r3, r3
  4053c0:	f013 0301 	ands.w	r3, r3, #1
  4053c4:	d1ed      	bne.n	4053a2 <__sflush_r+0xbe>
  4053c6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4053ca:	606b      	str	r3, [r5, #4]
  4053cc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4053d0:	6929      	ldr	r1, [r5, #16]
  4053d2:	81ab      	strh	r3, [r5, #12]
  4053d4:	04da      	lsls	r2, r3, #19
  4053d6:	6029      	str	r1, [r5, #0]
  4053d8:	d5b9      	bpl.n	40534e <__sflush_r+0x6a>
  4053da:	2c00      	cmp	r4, #0
  4053dc:	d1b7      	bne.n	40534e <__sflush_r+0x6a>
  4053de:	6528      	str	r0, [r5, #80]	; 0x50
  4053e0:	e7b5      	b.n	40534e <__sflush_r+0x6a>
  4053e2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4053e4:	2a00      	cmp	r2, #0
  4053e6:	dc8c      	bgt.n	405302 <__sflush_r+0x1e>
  4053e8:	e7d8      	b.n	40539c <__sflush_r+0xb8>
  4053ea:	2301      	movs	r3, #1
  4053ec:	69e9      	ldr	r1, [r5, #28]
  4053ee:	4640      	mov	r0, r8
  4053f0:	47a0      	blx	r4
  4053f2:	1c43      	adds	r3, r0, #1
  4053f4:	4602      	mov	r2, r0
  4053f6:	d002      	beq.n	4053fe <__sflush_r+0x11a>
  4053f8:	89ab      	ldrh	r3, [r5, #12]
  4053fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4053fc:	e78e      	b.n	40531c <__sflush_r+0x38>
  4053fe:	f8d8 3000 	ldr.w	r3, [r8]
  405402:	2b00      	cmp	r3, #0
  405404:	d0f8      	beq.n	4053f8 <__sflush_r+0x114>
  405406:	2b1d      	cmp	r3, #29
  405408:	d001      	beq.n	40540e <__sflush_r+0x12a>
  40540a:	2b16      	cmp	r3, #22
  40540c:	d102      	bne.n	405414 <__sflush_r+0x130>
  40540e:	f8c8 6000 	str.w	r6, [r8]
  405412:	e7c3      	b.n	40539c <__sflush_r+0xb8>
  405414:	89ab      	ldrh	r3, [r5, #12]
  405416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40541a:	81ab      	strh	r3, [r5, #12]
  40541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405420:	20400001 	.word	0x20400001

00405424 <_fflush_r>:
  405424:	b538      	push	{r3, r4, r5, lr}
  405426:	460d      	mov	r5, r1
  405428:	4604      	mov	r4, r0
  40542a:	b108      	cbz	r0, 405430 <_fflush_r+0xc>
  40542c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40542e:	b1bb      	cbz	r3, 405460 <_fflush_r+0x3c>
  405430:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405434:	b188      	cbz	r0, 40545a <_fflush_r+0x36>
  405436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405438:	07db      	lsls	r3, r3, #31
  40543a:	d401      	bmi.n	405440 <_fflush_r+0x1c>
  40543c:	0581      	lsls	r1, r0, #22
  40543e:	d517      	bpl.n	405470 <_fflush_r+0x4c>
  405440:	4620      	mov	r0, r4
  405442:	4629      	mov	r1, r5
  405444:	f7ff ff4e 	bl	4052e4 <__sflush_r>
  405448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40544a:	07da      	lsls	r2, r3, #31
  40544c:	4604      	mov	r4, r0
  40544e:	d402      	bmi.n	405456 <_fflush_r+0x32>
  405450:	89ab      	ldrh	r3, [r5, #12]
  405452:	059b      	lsls	r3, r3, #22
  405454:	d507      	bpl.n	405466 <_fflush_r+0x42>
  405456:	4620      	mov	r0, r4
  405458:	bd38      	pop	{r3, r4, r5, pc}
  40545a:	4604      	mov	r4, r0
  40545c:	4620      	mov	r0, r4
  40545e:	bd38      	pop	{r3, r4, r5, pc}
  405460:	f000 f838 	bl	4054d4 <__sinit>
  405464:	e7e4      	b.n	405430 <_fflush_r+0xc>
  405466:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405468:	f000 fbf6 	bl	405c58 <__retarget_lock_release_recursive>
  40546c:	4620      	mov	r0, r4
  40546e:	bd38      	pop	{r3, r4, r5, pc}
  405470:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405472:	f000 fbef 	bl	405c54 <__retarget_lock_acquire_recursive>
  405476:	e7e3      	b.n	405440 <_fflush_r+0x1c>

00405478 <_cleanup_r>:
  405478:	4901      	ldr	r1, [pc, #4]	; (405480 <_cleanup_r+0x8>)
  40547a:	f000 bbaf 	b.w	405bdc <_fwalk_reent>
  40547e:	bf00      	nop
  405480:	00406b91 	.word	0x00406b91

00405484 <std.isra.0>:
  405484:	b510      	push	{r4, lr}
  405486:	2300      	movs	r3, #0
  405488:	4604      	mov	r4, r0
  40548a:	8181      	strh	r1, [r0, #12]
  40548c:	81c2      	strh	r2, [r0, #14]
  40548e:	6003      	str	r3, [r0, #0]
  405490:	6043      	str	r3, [r0, #4]
  405492:	6083      	str	r3, [r0, #8]
  405494:	6643      	str	r3, [r0, #100]	; 0x64
  405496:	6103      	str	r3, [r0, #16]
  405498:	6143      	str	r3, [r0, #20]
  40549a:	6183      	str	r3, [r0, #24]
  40549c:	4619      	mov	r1, r3
  40549e:	2208      	movs	r2, #8
  4054a0:	305c      	adds	r0, #92	; 0x5c
  4054a2:	f7fe fec3 	bl	40422c <memset>
  4054a6:	4807      	ldr	r0, [pc, #28]	; (4054c4 <std.isra.0+0x40>)
  4054a8:	4907      	ldr	r1, [pc, #28]	; (4054c8 <std.isra.0+0x44>)
  4054aa:	4a08      	ldr	r2, [pc, #32]	; (4054cc <std.isra.0+0x48>)
  4054ac:	4b08      	ldr	r3, [pc, #32]	; (4054d0 <std.isra.0+0x4c>)
  4054ae:	6220      	str	r0, [r4, #32]
  4054b0:	61e4      	str	r4, [r4, #28]
  4054b2:	6261      	str	r1, [r4, #36]	; 0x24
  4054b4:	62a2      	str	r2, [r4, #40]	; 0x28
  4054b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4054b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4054bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4054c0:	f000 bbc4 	b.w	405c4c <__retarget_lock_init_recursive>
  4054c4:	004067e1 	.word	0x004067e1
  4054c8:	00406805 	.word	0x00406805
  4054cc:	00406841 	.word	0x00406841
  4054d0:	00406861 	.word	0x00406861

004054d4 <__sinit>:
  4054d4:	b510      	push	{r4, lr}
  4054d6:	4604      	mov	r4, r0
  4054d8:	4812      	ldr	r0, [pc, #72]	; (405524 <__sinit+0x50>)
  4054da:	f000 fbbb 	bl	405c54 <__retarget_lock_acquire_recursive>
  4054de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4054e0:	b9d2      	cbnz	r2, 405518 <__sinit+0x44>
  4054e2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4054e6:	4810      	ldr	r0, [pc, #64]	; (405528 <__sinit+0x54>)
  4054e8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4054ec:	2103      	movs	r1, #3
  4054ee:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4054f2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4054f4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4054f8:	6860      	ldr	r0, [r4, #4]
  4054fa:	2104      	movs	r1, #4
  4054fc:	f7ff ffc2 	bl	405484 <std.isra.0>
  405500:	2201      	movs	r2, #1
  405502:	2109      	movs	r1, #9
  405504:	68a0      	ldr	r0, [r4, #8]
  405506:	f7ff ffbd 	bl	405484 <std.isra.0>
  40550a:	2202      	movs	r2, #2
  40550c:	2112      	movs	r1, #18
  40550e:	68e0      	ldr	r0, [r4, #12]
  405510:	f7ff ffb8 	bl	405484 <std.isra.0>
  405514:	2301      	movs	r3, #1
  405516:	63a3      	str	r3, [r4, #56]	; 0x38
  405518:	4802      	ldr	r0, [pc, #8]	; (405524 <__sinit+0x50>)
  40551a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40551e:	f000 bb9b 	b.w	405c58 <__retarget_lock_release_recursive>
  405522:	bf00      	nop
  405524:	20000b2c 	.word	0x20000b2c
  405528:	00405479 	.word	0x00405479

0040552c <__sfp_lock_acquire>:
  40552c:	4801      	ldr	r0, [pc, #4]	; (405534 <__sfp_lock_acquire+0x8>)
  40552e:	f000 bb91 	b.w	405c54 <__retarget_lock_acquire_recursive>
  405532:	bf00      	nop
  405534:	20000b40 	.word	0x20000b40

00405538 <__sfp_lock_release>:
  405538:	4801      	ldr	r0, [pc, #4]	; (405540 <__sfp_lock_release+0x8>)
  40553a:	f000 bb8d 	b.w	405c58 <__retarget_lock_release_recursive>
  40553e:	bf00      	nop
  405540:	20000b40 	.word	0x20000b40

00405544 <__libc_fini_array>:
  405544:	b538      	push	{r3, r4, r5, lr}
  405546:	4c0a      	ldr	r4, [pc, #40]	; (405570 <__libc_fini_array+0x2c>)
  405548:	4d0a      	ldr	r5, [pc, #40]	; (405574 <__libc_fini_array+0x30>)
  40554a:	1b64      	subs	r4, r4, r5
  40554c:	10a4      	asrs	r4, r4, #2
  40554e:	d00a      	beq.n	405566 <__libc_fini_array+0x22>
  405550:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405554:	3b01      	subs	r3, #1
  405556:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40555a:	3c01      	subs	r4, #1
  40555c:	f855 3904 	ldr.w	r3, [r5], #-4
  405560:	4798      	blx	r3
  405562:	2c00      	cmp	r4, #0
  405564:	d1f9      	bne.n	40555a <__libc_fini_array+0x16>
  405566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40556a:	f003 bc1b 	b.w	408da4 <_fini>
  40556e:	bf00      	nop
  405570:	00408db4 	.word	0x00408db4
  405574:	00408db0 	.word	0x00408db0

00405578 <__fputwc>:
  405578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40557c:	b082      	sub	sp, #8
  40557e:	4680      	mov	r8, r0
  405580:	4689      	mov	r9, r1
  405582:	4614      	mov	r4, r2
  405584:	f000 fb54 	bl	405c30 <__locale_mb_cur_max>
  405588:	2801      	cmp	r0, #1
  40558a:	d036      	beq.n	4055fa <__fputwc+0x82>
  40558c:	464a      	mov	r2, r9
  40558e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405592:	a901      	add	r1, sp, #4
  405594:	4640      	mov	r0, r8
  405596:	f001 fa39 	bl	406a0c <_wcrtomb_r>
  40559a:	1c42      	adds	r2, r0, #1
  40559c:	4606      	mov	r6, r0
  40559e:	d025      	beq.n	4055ec <__fputwc+0x74>
  4055a0:	b3a8      	cbz	r0, 40560e <__fputwc+0x96>
  4055a2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4055a6:	2500      	movs	r5, #0
  4055a8:	f10d 0a04 	add.w	sl, sp, #4
  4055ac:	e009      	b.n	4055c2 <__fputwc+0x4a>
  4055ae:	6823      	ldr	r3, [r4, #0]
  4055b0:	1c5a      	adds	r2, r3, #1
  4055b2:	6022      	str	r2, [r4, #0]
  4055b4:	f883 e000 	strb.w	lr, [r3]
  4055b8:	3501      	adds	r5, #1
  4055ba:	42b5      	cmp	r5, r6
  4055bc:	d227      	bcs.n	40560e <__fputwc+0x96>
  4055be:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4055c2:	68a3      	ldr	r3, [r4, #8]
  4055c4:	3b01      	subs	r3, #1
  4055c6:	2b00      	cmp	r3, #0
  4055c8:	60a3      	str	r3, [r4, #8]
  4055ca:	daf0      	bge.n	4055ae <__fputwc+0x36>
  4055cc:	69a7      	ldr	r7, [r4, #24]
  4055ce:	42bb      	cmp	r3, r7
  4055d0:	4671      	mov	r1, lr
  4055d2:	4622      	mov	r2, r4
  4055d4:	4640      	mov	r0, r8
  4055d6:	db02      	blt.n	4055de <__fputwc+0x66>
  4055d8:	f1be 0f0a 	cmp.w	lr, #10
  4055dc:	d1e7      	bne.n	4055ae <__fputwc+0x36>
  4055de:	f001 f9bd 	bl	40695c <__swbuf_r>
  4055e2:	1c43      	adds	r3, r0, #1
  4055e4:	d1e8      	bne.n	4055b8 <__fputwc+0x40>
  4055e6:	b002      	add	sp, #8
  4055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055ec:	89a3      	ldrh	r3, [r4, #12]
  4055ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055f2:	81a3      	strh	r3, [r4, #12]
  4055f4:	b002      	add	sp, #8
  4055f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055fa:	f109 33ff 	add.w	r3, r9, #4294967295
  4055fe:	2bfe      	cmp	r3, #254	; 0xfe
  405600:	d8c4      	bhi.n	40558c <__fputwc+0x14>
  405602:	fa5f fe89 	uxtb.w	lr, r9
  405606:	4606      	mov	r6, r0
  405608:	f88d e004 	strb.w	lr, [sp, #4]
  40560c:	e7cb      	b.n	4055a6 <__fputwc+0x2e>
  40560e:	4648      	mov	r0, r9
  405610:	b002      	add	sp, #8
  405612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405616:	bf00      	nop

00405618 <_fputwc_r>:
  405618:	b530      	push	{r4, r5, lr}
  40561a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40561c:	f013 0f01 	tst.w	r3, #1
  405620:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405624:	4614      	mov	r4, r2
  405626:	b083      	sub	sp, #12
  405628:	4605      	mov	r5, r0
  40562a:	b29a      	uxth	r2, r3
  40562c:	d101      	bne.n	405632 <_fputwc_r+0x1a>
  40562e:	0590      	lsls	r0, r2, #22
  405630:	d51c      	bpl.n	40566c <_fputwc_r+0x54>
  405632:	0490      	lsls	r0, r2, #18
  405634:	d406      	bmi.n	405644 <_fputwc_r+0x2c>
  405636:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40563c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405640:	81a3      	strh	r3, [r4, #12]
  405642:	6662      	str	r2, [r4, #100]	; 0x64
  405644:	4628      	mov	r0, r5
  405646:	4622      	mov	r2, r4
  405648:	f7ff ff96 	bl	405578 <__fputwc>
  40564c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40564e:	07da      	lsls	r2, r3, #31
  405650:	4605      	mov	r5, r0
  405652:	d402      	bmi.n	40565a <_fputwc_r+0x42>
  405654:	89a3      	ldrh	r3, [r4, #12]
  405656:	059b      	lsls	r3, r3, #22
  405658:	d502      	bpl.n	405660 <_fputwc_r+0x48>
  40565a:	4628      	mov	r0, r5
  40565c:	b003      	add	sp, #12
  40565e:	bd30      	pop	{r4, r5, pc}
  405660:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405662:	f000 faf9 	bl	405c58 <__retarget_lock_release_recursive>
  405666:	4628      	mov	r0, r5
  405668:	b003      	add	sp, #12
  40566a:	bd30      	pop	{r4, r5, pc}
  40566c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40566e:	9101      	str	r1, [sp, #4]
  405670:	f000 faf0 	bl	405c54 <__retarget_lock_acquire_recursive>
  405674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405678:	9901      	ldr	r1, [sp, #4]
  40567a:	b29a      	uxth	r2, r3
  40567c:	e7d9      	b.n	405632 <_fputwc_r+0x1a>
  40567e:	bf00      	nop

00405680 <_malloc_trim_r>:
  405680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405682:	4f24      	ldr	r7, [pc, #144]	; (405714 <_malloc_trim_r+0x94>)
  405684:	460c      	mov	r4, r1
  405686:	4606      	mov	r6, r0
  405688:	f000 fee6 	bl	406458 <__malloc_lock>
  40568c:	68bb      	ldr	r3, [r7, #8]
  40568e:	685d      	ldr	r5, [r3, #4]
  405690:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405694:	310f      	adds	r1, #15
  405696:	f025 0503 	bic.w	r5, r5, #3
  40569a:	4429      	add	r1, r5
  40569c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4056a0:	f021 010f 	bic.w	r1, r1, #15
  4056a4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4056a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4056ac:	db07      	blt.n	4056be <_malloc_trim_r+0x3e>
  4056ae:	2100      	movs	r1, #0
  4056b0:	4630      	mov	r0, r6
  4056b2:	f001 f883 	bl	4067bc <_sbrk_r>
  4056b6:	68bb      	ldr	r3, [r7, #8]
  4056b8:	442b      	add	r3, r5
  4056ba:	4298      	cmp	r0, r3
  4056bc:	d004      	beq.n	4056c8 <_malloc_trim_r+0x48>
  4056be:	4630      	mov	r0, r6
  4056c0:	f000 fed0 	bl	406464 <__malloc_unlock>
  4056c4:	2000      	movs	r0, #0
  4056c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056c8:	4261      	negs	r1, r4
  4056ca:	4630      	mov	r0, r6
  4056cc:	f001 f876 	bl	4067bc <_sbrk_r>
  4056d0:	3001      	adds	r0, #1
  4056d2:	d00d      	beq.n	4056f0 <_malloc_trim_r+0x70>
  4056d4:	4b10      	ldr	r3, [pc, #64]	; (405718 <_malloc_trim_r+0x98>)
  4056d6:	68ba      	ldr	r2, [r7, #8]
  4056d8:	6819      	ldr	r1, [r3, #0]
  4056da:	1b2d      	subs	r5, r5, r4
  4056dc:	f045 0501 	orr.w	r5, r5, #1
  4056e0:	4630      	mov	r0, r6
  4056e2:	1b09      	subs	r1, r1, r4
  4056e4:	6055      	str	r5, [r2, #4]
  4056e6:	6019      	str	r1, [r3, #0]
  4056e8:	f000 febc 	bl	406464 <__malloc_unlock>
  4056ec:	2001      	movs	r0, #1
  4056ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056f0:	2100      	movs	r1, #0
  4056f2:	4630      	mov	r0, r6
  4056f4:	f001 f862 	bl	4067bc <_sbrk_r>
  4056f8:	68ba      	ldr	r2, [r7, #8]
  4056fa:	1a83      	subs	r3, r0, r2
  4056fc:	2b0f      	cmp	r3, #15
  4056fe:	ddde      	ble.n	4056be <_malloc_trim_r+0x3e>
  405700:	4c06      	ldr	r4, [pc, #24]	; (40571c <_malloc_trim_r+0x9c>)
  405702:	4905      	ldr	r1, [pc, #20]	; (405718 <_malloc_trim_r+0x98>)
  405704:	6824      	ldr	r4, [r4, #0]
  405706:	f043 0301 	orr.w	r3, r3, #1
  40570a:	1b00      	subs	r0, r0, r4
  40570c:	6053      	str	r3, [r2, #4]
  40570e:	6008      	str	r0, [r1, #0]
  405710:	e7d5      	b.n	4056be <_malloc_trim_r+0x3e>
  405712:	bf00      	nop
  405714:	20000660 	.word	0x20000660
  405718:	20000ad8 	.word	0x20000ad8
  40571c:	20000a68 	.word	0x20000a68

00405720 <_free_r>:
  405720:	2900      	cmp	r1, #0
  405722:	d044      	beq.n	4057ae <_free_r+0x8e>
  405724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405728:	460d      	mov	r5, r1
  40572a:	4680      	mov	r8, r0
  40572c:	f000 fe94 	bl	406458 <__malloc_lock>
  405730:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405734:	4969      	ldr	r1, [pc, #420]	; (4058dc <_free_r+0x1bc>)
  405736:	f027 0301 	bic.w	r3, r7, #1
  40573a:	f1a5 0408 	sub.w	r4, r5, #8
  40573e:	18e2      	adds	r2, r4, r3
  405740:	688e      	ldr	r6, [r1, #8]
  405742:	6850      	ldr	r0, [r2, #4]
  405744:	42b2      	cmp	r2, r6
  405746:	f020 0003 	bic.w	r0, r0, #3
  40574a:	d05e      	beq.n	40580a <_free_r+0xea>
  40574c:	07fe      	lsls	r6, r7, #31
  40574e:	6050      	str	r0, [r2, #4]
  405750:	d40b      	bmi.n	40576a <_free_r+0x4a>
  405752:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405756:	1be4      	subs	r4, r4, r7
  405758:	f101 0e08 	add.w	lr, r1, #8
  40575c:	68a5      	ldr	r5, [r4, #8]
  40575e:	4575      	cmp	r5, lr
  405760:	443b      	add	r3, r7
  405762:	d06d      	beq.n	405840 <_free_r+0x120>
  405764:	68e7      	ldr	r7, [r4, #12]
  405766:	60ef      	str	r7, [r5, #12]
  405768:	60bd      	str	r5, [r7, #8]
  40576a:	1815      	adds	r5, r2, r0
  40576c:	686d      	ldr	r5, [r5, #4]
  40576e:	07ed      	lsls	r5, r5, #31
  405770:	d53e      	bpl.n	4057f0 <_free_r+0xd0>
  405772:	f043 0201 	orr.w	r2, r3, #1
  405776:	6062      	str	r2, [r4, #4]
  405778:	50e3      	str	r3, [r4, r3]
  40577a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40577e:	d217      	bcs.n	4057b0 <_free_r+0x90>
  405780:	08db      	lsrs	r3, r3, #3
  405782:	1c58      	adds	r0, r3, #1
  405784:	109a      	asrs	r2, r3, #2
  405786:	684d      	ldr	r5, [r1, #4]
  405788:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40578c:	60a7      	str	r7, [r4, #8]
  40578e:	2301      	movs	r3, #1
  405790:	4093      	lsls	r3, r2
  405792:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405796:	432b      	orrs	r3, r5
  405798:	3a08      	subs	r2, #8
  40579a:	60e2      	str	r2, [r4, #12]
  40579c:	604b      	str	r3, [r1, #4]
  40579e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4057a2:	60fc      	str	r4, [r7, #12]
  4057a4:	4640      	mov	r0, r8
  4057a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057aa:	f000 be5b 	b.w	406464 <__malloc_unlock>
  4057ae:	4770      	bx	lr
  4057b0:	0a5a      	lsrs	r2, r3, #9
  4057b2:	2a04      	cmp	r2, #4
  4057b4:	d852      	bhi.n	40585c <_free_r+0x13c>
  4057b6:	099a      	lsrs	r2, r3, #6
  4057b8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4057bc:	00ff      	lsls	r7, r7, #3
  4057be:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4057c2:	19c8      	adds	r0, r1, r7
  4057c4:	59ca      	ldr	r2, [r1, r7]
  4057c6:	3808      	subs	r0, #8
  4057c8:	4290      	cmp	r0, r2
  4057ca:	d04f      	beq.n	40586c <_free_r+0x14c>
  4057cc:	6851      	ldr	r1, [r2, #4]
  4057ce:	f021 0103 	bic.w	r1, r1, #3
  4057d2:	428b      	cmp	r3, r1
  4057d4:	d232      	bcs.n	40583c <_free_r+0x11c>
  4057d6:	6892      	ldr	r2, [r2, #8]
  4057d8:	4290      	cmp	r0, r2
  4057da:	d1f7      	bne.n	4057cc <_free_r+0xac>
  4057dc:	68c3      	ldr	r3, [r0, #12]
  4057de:	60a0      	str	r0, [r4, #8]
  4057e0:	60e3      	str	r3, [r4, #12]
  4057e2:	609c      	str	r4, [r3, #8]
  4057e4:	60c4      	str	r4, [r0, #12]
  4057e6:	4640      	mov	r0, r8
  4057e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057ec:	f000 be3a 	b.w	406464 <__malloc_unlock>
  4057f0:	6895      	ldr	r5, [r2, #8]
  4057f2:	4f3b      	ldr	r7, [pc, #236]	; (4058e0 <_free_r+0x1c0>)
  4057f4:	42bd      	cmp	r5, r7
  4057f6:	4403      	add	r3, r0
  4057f8:	d040      	beq.n	40587c <_free_r+0x15c>
  4057fa:	68d0      	ldr	r0, [r2, #12]
  4057fc:	60e8      	str	r0, [r5, #12]
  4057fe:	f043 0201 	orr.w	r2, r3, #1
  405802:	6085      	str	r5, [r0, #8]
  405804:	6062      	str	r2, [r4, #4]
  405806:	50e3      	str	r3, [r4, r3]
  405808:	e7b7      	b.n	40577a <_free_r+0x5a>
  40580a:	07ff      	lsls	r7, r7, #31
  40580c:	4403      	add	r3, r0
  40580e:	d407      	bmi.n	405820 <_free_r+0x100>
  405810:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405814:	1aa4      	subs	r4, r4, r2
  405816:	4413      	add	r3, r2
  405818:	68a0      	ldr	r0, [r4, #8]
  40581a:	68e2      	ldr	r2, [r4, #12]
  40581c:	60c2      	str	r2, [r0, #12]
  40581e:	6090      	str	r0, [r2, #8]
  405820:	4a30      	ldr	r2, [pc, #192]	; (4058e4 <_free_r+0x1c4>)
  405822:	6812      	ldr	r2, [r2, #0]
  405824:	f043 0001 	orr.w	r0, r3, #1
  405828:	4293      	cmp	r3, r2
  40582a:	6060      	str	r0, [r4, #4]
  40582c:	608c      	str	r4, [r1, #8]
  40582e:	d3b9      	bcc.n	4057a4 <_free_r+0x84>
  405830:	4b2d      	ldr	r3, [pc, #180]	; (4058e8 <_free_r+0x1c8>)
  405832:	4640      	mov	r0, r8
  405834:	6819      	ldr	r1, [r3, #0]
  405836:	f7ff ff23 	bl	405680 <_malloc_trim_r>
  40583a:	e7b3      	b.n	4057a4 <_free_r+0x84>
  40583c:	4610      	mov	r0, r2
  40583e:	e7cd      	b.n	4057dc <_free_r+0xbc>
  405840:	1811      	adds	r1, r2, r0
  405842:	6849      	ldr	r1, [r1, #4]
  405844:	07c9      	lsls	r1, r1, #31
  405846:	d444      	bmi.n	4058d2 <_free_r+0x1b2>
  405848:	6891      	ldr	r1, [r2, #8]
  40584a:	68d2      	ldr	r2, [r2, #12]
  40584c:	60ca      	str	r2, [r1, #12]
  40584e:	4403      	add	r3, r0
  405850:	f043 0001 	orr.w	r0, r3, #1
  405854:	6091      	str	r1, [r2, #8]
  405856:	6060      	str	r0, [r4, #4]
  405858:	50e3      	str	r3, [r4, r3]
  40585a:	e7a3      	b.n	4057a4 <_free_r+0x84>
  40585c:	2a14      	cmp	r2, #20
  40585e:	d816      	bhi.n	40588e <_free_r+0x16e>
  405860:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405864:	00ff      	lsls	r7, r7, #3
  405866:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40586a:	e7aa      	b.n	4057c2 <_free_r+0xa2>
  40586c:	10aa      	asrs	r2, r5, #2
  40586e:	2301      	movs	r3, #1
  405870:	684d      	ldr	r5, [r1, #4]
  405872:	4093      	lsls	r3, r2
  405874:	432b      	orrs	r3, r5
  405876:	604b      	str	r3, [r1, #4]
  405878:	4603      	mov	r3, r0
  40587a:	e7b0      	b.n	4057de <_free_r+0xbe>
  40587c:	f043 0201 	orr.w	r2, r3, #1
  405880:	614c      	str	r4, [r1, #20]
  405882:	610c      	str	r4, [r1, #16]
  405884:	60e5      	str	r5, [r4, #12]
  405886:	60a5      	str	r5, [r4, #8]
  405888:	6062      	str	r2, [r4, #4]
  40588a:	50e3      	str	r3, [r4, r3]
  40588c:	e78a      	b.n	4057a4 <_free_r+0x84>
  40588e:	2a54      	cmp	r2, #84	; 0x54
  405890:	d806      	bhi.n	4058a0 <_free_r+0x180>
  405892:	0b1a      	lsrs	r2, r3, #12
  405894:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405898:	00ff      	lsls	r7, r7, #3
  40589a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40589e:	e790      	b.n	4057c2 <_free_r+0xa2>
  4058a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4058a4:	d806      	bhi.n	4058b4 <_free_r+0x194>
  4058a6:	0bda      	lsrs	r2, r3, #15
  4058a8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4058ac:	00ff      	lsls	r7, r7, #3
  4058ae:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4058b2:	e786      	b.n	4057c2 <_free_r+0xa2>
  4058b4:	f240 5054 	movw	r0, #1364	; 0x554
  4058b8:	4282      	cmp	r2, r0
  4058ba:	d806      	bhi.n	4058ca <_free_r+0x1aa>
  4058bc:	0c9a      	lsrs	r2, r3, #18
  4058be:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4058c2:	00ff      	lsls	r7, r7, #3
  4058c4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4058c8:	e77b      	b.n	4057c2 <_free_r+0xa2>
  4058ca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4058ce:	257e      	movs	r5, #126	; 0x7e
  4058d0:	e777      	b.n	4057c2 <_free_r+0xa2>
  4058d2:	f043 0101 	orr.w	r1, r3, #1
  4058d6:	6061      	str	r1, [r4, #4]
  4058d8:	6013      	str	r3, [r2, #0]
  4058da:	e763      	b.n	4057a4 <_free_r+0x84>
  4058dc:	20000660 	.word	0x20000660
  4058e0:	20000668 	.word	0x20000668
  4058e4:	20000a6c 	.word	0x20000a6c
  4058e8:	20000b08 	.word	0x20000b08

004058ec <__sfvwrite_r>:
  4058ec:	6893      	ldr	r3, [r2, #8]
  4058ee:	2b00      	cmp	r3, #0
  4058f0:	d073      	beq.n	4059da <__sfvwrite_r+0xee>
  4058f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058f6:	898b      	ldrh	r3, [r1, #12]
  4058f8:	b083      	sub	sp, #12
  4058fa:	460c      	mov	r4, r1
  4058fc:	0719      	lsls	r1, r3, #28
  4058fe:	9000      	str	r0, [sp, #0]
  405900:	4616      	mov	r6, r2
  405902:	d526      	bpl.n	405952 <__sfvwrite_r+0x66>
  405904:	6922      	ldr	r2, [r4, #16]
  405906:	b322      	cbz	r2, 405952 <__sfvwrite_r+0x66>
  405908:	f013 0002 	ands.w	r0, r3, #2
  40590c:	6835      	ldr	r5, [r6, #0]
  40590e:	d02c      	beq.n	40596a <__sfvwrite_r+0x7e>
  405910:	f04f 0900 	mov.w	r9, #0
  405914:	4fb0      	ldr	r7, [pc, #704]	; (405bd8 <__sfvwrite_r+0x2ec>)
  405916:	46c8      	mov	r8, r9
  405918:	46b2      	mov	sl, r6
  40591a:	45b8      	cmp	r8, r7
  40591c:	4643      	mov	r3, r8
  40591e:	464a      	mov	r2, r9
  405920:	bf28      	it	cs
  405922:	463b      	movcs	r3, r7
  405924:	9800      	ldr	r0, [sp, #0]
  405926:	f1b8 0f00 	cmp.w	r8, #0
  40592a:	d050      	beq.n	4059ce <__sfvwrite_r+0xe2>
  40592c:	69e1      	ldr	r1, [r4, #28]
  40592e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405930:	47b0      	blx	r6
  405932:	2800      	cmp	r0, #0
  405934:	dd58      	ble.n	4059e8 <__sfvwrite_r+0xfc>
  405936:	f8da 3008 	ldr.w	r3, [sl, #8]
  40593a:	1a1b      	subs	r3, r3, r0
  40593c:	4481      	add	r9, r0
  40593e:	eba8 0800 	sub.w	r8, r8, r0
  405942:	f8ca 3008 	str.w	r3, [sl, #8]
  405946:	2b00      	cmp	r3, #0
  405948:	d1e7      	bne.n	40591a <__sfvwrite_r+0x2e>
  40594a:	2000      	movs	r0, #0
  40594c:	b003      	add	sp, #12
  40594e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405952:	4621      	mov	r1, r4
  405954:	9800      	ldr	r0, [sp, #0]
  405956:	f7ff fc51 	bl	4051fc <__swsetup_r>
  40595a:	2800      	cmp	r0, #0
  40595c:	f040 8133 	bne.w	405bc6 <__sfvwrite_r+0x2da>
  405960:	89a3      	ldrh	r3, [r4, #12]
  405962:	6835      	ldr	r5, [r6, #0]
  405964:	f013 0002 	ands.w	r0, r3, #2
  405968:	d1d2      	bne.n	405910 <__sfvwrite_r+0x24>
  40596a:	f013 0901 	ands.w	r9, r3, #1
  40596e:	d145      	bne.n	4059fc <__sfvwrite_r+0x110>
  405970:	464f      	mov	r7, r9
  405972:	9601      	str	r6, [sp, #4]
  405974:	b337      	cbz	r7, 4059c4 <__sfvwrite_r+0xd8>
  405976:	059a      	lsls	r2, r3, #22
  405978:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40597c:	f140 8083 	bpl.w	405a86 <__sfvwrite_r+0x19a>
  405980:	4547      	cmp	r7, r8
  405982:	46c3      	mov	fp, r8
  405984:	f0c0 80ab 	bcc.w	405ade <__sfvwrite_r+0x1f2>
  405988:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40598c:	f040 80ac 	bne.w	405ae8 <__sfvwrite_r+0x1fc>
  405990:	6820      	ldr	r0, [r4, #0]
  405992:	46ba      	mov	sl, r7
  405994:	465a      	mov	r2, fp
  405996:	4649      	mov	r1, r9
  405998:	f000 fcfa 	bl	406390 <memmove>
  40599c:	68a2      	ldr	r2, [r4, #8]
  40599e:	6823      	ldr	r3, [r4, #0]
  4059a0:	eba2 0208 	sub.w	r2, r2, r8
  4059a4:	445b      	add	r3, fp
  4059a6:	60a2      	str	r2, [r4, #8]
  4059a8:	6023      	str	r3, [r4, #0]
  4059aa:	9a01      	ldr	r2, [sp, #4]
  4059ac:	6893      	ldr	r3, [r2, #8]
  4059ae:	eba3 030a 	sub.w	r3, r3, sl
  4059b2:	44d1      	add	r9, sl
  4059b4:	eba7 070a 	sub.w	r7, r7, sl
  4059b8:	6093      	str	r3, [r2, #8]
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	d0c5      	beq.n	40594a <__sfvwrite_r+0x5e>
  4059be:	89a3      	ldrh	r3, [r4, #12]
  4059c0:	2f00      	cmp	r7, #0
  4059c2:	d1d8      	bne.n	405976 <__sfvwrite_r+0x8a>
  4059c4:	f8d5 9000 	ldr.w	r9, [r5]
  4059c8:	686f      	ldr	r7, [r5, #4]
  4059ca:	3508      	adds	r5, #8
  4059cc:	e7d2      	b.n	405974 <__sfvwrite_r+0x88>
  4059ce:	f8d5 9000 	ldr.w	r9, [r5]
  4059d2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4059d6:	3508      	adds	r5, #8
  4059d8:	e79f      	b.n	40591a <__sfvwrite_r+0x2e>
  4059da:	2000      	movs	r0, #0
  4059dc:	4770      	bx	lr
  4059de:	4621      	mov	r1, r4
  4059e0:	9800      	ldr	r0, [sp, #0]
  4059e2:	f7ff fd1f 	bl	405424 <_fflush_r>
  4059e6:	b370      	cbz	r0, 405a46 <__sfvwrite_r+0x15a>
  4059e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059f0:	f04f 30ff 	mov.w	r0, #4294967295
  4059f4:	81a3      	strh	r3, [r4, #12]
  4059f6:	b003      	add	sp, #12
  4059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059fc:	4681      	mov	r9, r0
  4059fe:	4633      	mov	r3, r6
  405a00:	464e      	mov	r6, r9
  405a02:	46a8      	mov	r8, r5
  405a04:	469a      	mov	sl, r3
  405a06:	464d      	mov	r5, r9
  405a08:	b34e      	cbz	r6, 405a5e <__sfvwrite_r+0x172>
  405a0a:	b380      	cbz	r0, 405a6e <__sfvwrite_r+0x182>
  405a0c:	6820      	ldr	r0, [r4, #0]
  405a0e:	6923      	ldr	r3, [r4, #16]
  405a10:	6962      	ldr	r2, [r4, #20]
  405a12:	45b1      	cmp	r9, r6
  405a14:	46cb      	mov	fp, r9
  405a16:	bf28      	it	cs
  405a18:	46b3      	movcs	fp, r6
  405a1a:	4298      	cmp	r0, r3
  405a1c:	465f      	mov	r7, fp
  405a1e:	d904      	bls.n	405a2a <__sfvwrite_r+0x13e>
  405a20:	68a3      	ldr	r3, [r4, #8]
  405a22:	4413      	add	r3, r2
  405a24:	459b      	cmp	fp, r3
  405a26:	f300 80a6 	bgt.w	405b76 <__sfvwrite_r+0x28a>
  405a2a:	4593      	cmp	fp, r2
  405a2c:	db4b      	blt.n	405ac6 <__sfvwrite_r+0x1da>
  405a2e:	4613      	mov	r3, r2
  405a30:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405a32:	69e1      	ldr	r1, [r4, #28]
  405a34:	9800      	ldr	r0, [sp, #0]
  405a36:	462a      	mov	r2, r5
  405a38:	47b8      	blx	r7
  405a3a:	1e07      	subs	r7, r0, #0
  405a3c:	ddd4      	ble.n	4059e8 <__sfvwrite_r+0xfc>
  405a3e:	ebb9 0907 	subs.w	r9, r9, r7
  405a42:	d0cc      	beq.n	4059de <__sfvwrite_r+0xf2>
  405a44:	2001      	movs	r0, #1
  405a46:	f8da 3008 	ldr.w	r3, [sl, #8]
  405a4a:	1bdb      	subs	r3, r3, r7
  405a4c:	443d      	add	r5, r7
  405a4e:	1bf6      	subs	r6, r6, r7
  405a50:	f8ca 3008 	str.w	r3, [sl, #8]
  405a54:	2b00      	cmp	r3, #0
  405a56:	f43f af78 	beq.w	40594a <__sfvwrite_r+0x5e>
  405a5a:	2e00      	cmp	r6, #0
  405a5c:	d1d5      	bne.n	405a0a <__sfvwrite_r+0x11e>
  405a5e:	f108 0308 	add.w	r3, r8, #8
  405a62:	e913 0060 	ldmdb	r3, {r5, r6}
  405a66:	4698      	mov	r8, r3
  405a68:	3308      	adds	r3, #8
  405a6a:	2e00      	cmp	r6, #0
  405a6c:	d0f9      	beq.n	405a62 <__sfvwrite_r+0x176>
  405a6e:	4632      	mov	r2, r6
  405a70:	210a      	movs	r1, #10
  405a72:	4628      	mov	r0, r5
  405a74:	f000 fc3c 	bl	4062f0 <memchr>
  405a78:	2800      	cmp	r0, #0
  405a7a:	f000 80a1 	beq.w	405bc0 <__sfvwrite_r+0x2d4>
  405a7e:	3001      	adds	r0, #1
  405a80:	eba0 0905 	sub.w	r9, r0, r5
  405a84:	e7c2      	b.n	405a0c <__sfvwrite_r+0x120>
  405a86:	6820      	ldr	r0, [r4, #0]
  405a88:	6923      	ldr	r3, [r4, #16]
  405a8a:	4298      	cmp	r0, r3
  405a8c:	d802      	bhi.n	405a94 <__sfvwrite_r+0x1a8>
  405a8e:	6963      	ldr	r3, [r4, #20]
  405a90:	429f      	cmp	r7, r3
  405a92:	d25d      	bcs.n	405b50 <__sfvwrite_r+0x264>
  405a94:	45b8      	cmp	r8, r7
  405a96:	bf28      	it	cs
  405a98:	46b8      	movcs	r8, r7
  405a9a:	4642      	mov	r2, r8
  405a9c:	4649      	mov	r1, r9
  405a9e:	f000 fc77 	bl	406390 <memmove>
  405aa2:	68a3      	ldr	r3, [r4, #8]
  405aa4:	6822      	ldr	r2, [r4, #0]
  405aa6:	eba3 0308 	sub.w	r3, r3, r8
  405aaa:	4442      	add	r2, r8
  405aac:	60a3      	str	r3, [r4, #8]
  405aae:	6022      	str	r2, [r4, #0]
  405ab0:	b10b      	cbz	r3, 405ab6 <__sfvwrite_r+0x1ca>
  405ab2:	46c2      	mov	sl, r8
  405ab4:	e779      	b.n	4059aa <__sfvwrite_r+0xbe>
  405ab6:	4621      	mov	r1, r4
  405ab8:	9800      	ldr	r0, [sp, #0]
  405aba:	f7ff fcb3 	bl	405424 <_fflush_r>
  405abe:	2800      	cmp	r0, #0
  405ac0:	d192      	bne.n	4059e8 <__sfvwrite_r+0xfc>
  405ac2:	46c2      	mov	sl, r8
  405ac4:	e771      	b.n	4059aa <__sfvwrite_r+0xbe>
  405ac6:	465a      	mov	r2, fp
  405ac8:	4629      	mov	r1, r5
  405aca:	f000 fc61 	bl	406390 <memmove>
  405ace:	68a2      	ldr	r2, [r4, #8]
  405ad0:	6823      	ldr	r3, [r4, #0]
  405ad2:	eba2 020b 	sub.w	r2, r2, fp
  405ad6:	445b      	add	r3, fp
  405ad8:	60a2      	str	r2, [r4, #8]
  405ada:	6023      	str	r3, [r4, #0]
  405adc:	e7af      	b.n	405a3e <__sfvwrite_r+0x152>
  405ade:	6820      	ldr	r0, [r4, #0]
  405ae0:	46b8      	mov	r8, r7
  405ae2:	46ba      	mov	sl, r7
  405ae4:	46bb      	mov	fp, r7
  405ae6:	e755      	b.n	405994 <__sfvwrite_r+0xa8>
  405ae8:	6962      	ldr	r2, [r4, #20]
  405aea:	6820      	ldr	r0, [r4, #0]
  405aec:	6921      	ldr	r1, [r4, #16]
  405aee:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405af2:	eba0 0a01 	sub.w	sl, r0, r1
  405af6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405afa:	f10a 0001 	add.w	r0, sl, #1
  405afe:	ea4f 0868 	mov.w	r8, r8, asr #1
  405b02:	4438      	add	r0, r7
  405b04:	4540      	cmp	r0, r8
  405b06:	4642      	mov	r2, r8
  405b08:	bf84      	itt	hi
  405b0a:	4680      	movhi	r8, r0
  405b0c:	4642      	movhi	r2, r8
  405b0e:	055b      	lsls	r3, r3, #21
  405b10:	d544      	bpl.n	405b9c <__sfvwrite_r+0x2b0>
  405b12:	4611      	mov	r1, r2
  405b14:	9800      	ldr	r0, [sp, #0]
  405b16:	f000 f921 	bl	405d5c <_malloc_r>
  405b1a:	4683      	mov	fp, r0
  405b1c:	2800      	cmp	r0, #0
  405b1e:	d055      	beq.n	405bcc <__sfvwrite_r+0x2e0>
  405b20:	4652      	mov	r2, sl
  405b22:	6921      	ldr	r1, [r4, #16]
  405b24:	f7fe fae8 	bl	4040f8 <memcpy>
  405b28:	89a3      	ldrh	r3, [r4, #12]
  405b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405b32:	81a3      	strh	r3, [r4, #12]
  405b34:	eb0b 000a 	add.w	r0, fp, sl
  405b38:	eba8 030a 	sub.w	r3, r8, sl
  405b3c:	f8c4 b010 	str.w	fp, [r4, #16]
  405b40:	f8c4 8014 	str.w	r8, [r4, #20]
  405b44:	6020      	str	r0, [r4, #0]
  405b46:	60a3      	str	r3, [r4, #8]
  405b48:	46b8      	mov	r8, r7
  405b4a:	46ba      	mov	sl, r7
  405b4c:	46bb      	mov	fp, r7
  405b4e:	e721      	b.n	405994 <__sfvwrite_r+0xa8>
  405b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405b54:	42b9      	cmp	r1, r7
  405b56:	bf28      	it	cs
  405b58:	4639      	movcs	r1, r7
  405b5a:	464a      	mov	r2, r9
  405b5c:	fb91 f1f3 	sdiv	r1, r1, r3
  405b60:	9800      	ldr	r0, [sp, #0]
  405b62:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405b64:	fb03 f301 	mul.w	r3, r3, r1
  405b68:	69e1      	ldr	r1, [r4, #28]
  405b6a:	47b0      	blx	r6
  405b6c:	f1b0 0a00 	subs.w	sl, r0, #0
  405b70:	f73f af1b 	bgt.w	4059aa <__sfvwrite_r+0xbe>
  405b74:	e738      	b.n	4059e8 <__sfvwrite_r+0xfc>
  405b76:	461a      	mov	r2, r3
  405b78:	4629      	mov	r1, r5
  405b7a:	9301      	str	r3, [sp, #4]
  405b7c:	f000 fc08 	bl	406390 <memmove>
  405b80:	6822      	ldr	r2, [r4, #0]
  405b82:	9b01      	ldr	r3, [sp, #4]
  405b84:	9800      	ldr	r0, [sp, #0]
  405b86:	441a      	add	r2, r3
  405b88:	6022      	str	r2, [r4, #0]
  405b8a:	4621      	mov	r1, r4
  405b8c:	f7ff fc4a 	bl	405424 <_fflush_r>
  405b90:	9b01      	ldr	r3, [sp, #4]
  405b92:	2800      	cmp	r0, #0
  405b94:	f47f af28 	bne.w	4059e8 <__sfvwrite_r+0xfc>
  405b98:	461f      	mov	r7, r3
  405b9a:	e750      	b.n	405a3e <__sfvwrite_r+0x152>
  405b9c:	9800      	ldr	r0, [sp, #0]
  405b9e:	f000 fc67 	bl	406470 <_realloc_r>
  405ba2:	4683      	mov	fp, r0
  405ba4:	2800      	cmp	r0, #0
  405ba6:	d1c5      	bne.n	405b34 <__sfvwrite_r+0x248>
  405ba8:	9d00      	ldr	r5, [sp, #0]
  405baa:	6921      	ldr	r1, [r4, #16]
  405bac:	4628      	mov	r0, r5
  405bae:	f7ff fdb7 	bl	405720 <_free_r>
  405bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bb6:	220c      	movs	r2, #12
  405bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405bbc:	602a      	str	r2, [r5, #0]
  405bbe:	e715      	b.n	4059ec <__sfvwrite_r+0x100>
  405bc0:	f106 0901 	add.w	r9, r6, #1
  405bc4:	e722      	b.n	405a0c <__sfvwrite_r+0x120>
  405bc6:	f04f 30ff 	mov.w	r0, #4294967295
  405bca:	e6bf      	b.n	40594c <__sfvwrite_r+0x60>
  405bcc:	9a00      	ldr	r2, [sp, #0]
  405bce:	230c      	movs	r3, #12
  405bd0:	6013      	str	r3, [r2, #0]
  405bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bd6:	e709      	b.n	4059ec <__sfvwrite_r+0x100>
  405bd8:	7ffffc00 	.word	0x7ffffc00

00405bdc <_fwalk_reent>:
  405bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405be0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405be4:	d01f      	beq.n	405c26 <_fwalk_reent+0x4a>
  405be6:	4688      	mov	r8, r1
  405be8:	4606      	mov	r6, r0
  405bea:	f04f 0900 	mov.w	r9, #0
  405bee:	687d      	ldr	r5, [r7, #4]
  405bf0:	68bc      	ldr	r4, [r7, #8]
  405bf2:	3d01      	subs	r5, #1
  405bf4:	d411      	bmi.n	405c1a <_fwalk_reent+0x3e>
  405bf6:	89a3      	ldrh	r3, [r4, #12]
  405bf8:	2b01      	cmp	r3, #1
  405bfa:	f105 35ff 	add.w	r5, r5, #4294967295
  405bfe:	d908      	bls.n	405c12 <_fwalk_reent+0x36>
  405c00:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405c04:	3301      	adds	r3, #1
  405c06:	4621      	mov	r1, r4
  405c08:	4630      	mov	r0, r6
  405c0a:	d002      	beq.n	405c12 <_fwalk_reent+0x36>
  405c0c:	47c0      	blx	r8
  405c0e:	ea49 0900 	orr.w	r9, r9, r0
  405c12:	1c6b      	adds	r3, r5, #1
  405c14:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405c18:	d1ed      	bne.n	405bf6 <_fwalk_reent+0x1a>
  405c1a:	683f      	ldr	r7, [r7, #0]
  405c1c:	2f00      	cmp	r7, #0
  405c1e:	d1e6      	bne.n	405bee <_fwalk_reent+0x12>
  405c20:	4648      	mov	r0, r9
  405c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c26:	46b9      	mov	r9, r7
  405c28:	4648      	mov	r0, r9
  405c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c2e:	bf00      	nop

00405c30 <__locale_mb_cur_max>:
  405c30:	4b04      	ldr	r3, [pc, #16]	; (405c44 <__locale_mb_cur_max+0x14>)
  405c32:	4a05      	ldr	r2, [pc, #20]	; (405c48 <__locale_mb_cur_max+0x18>)
  405c34:	681b      	ldr	r3, [r3, #0]
  405c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405c38:	2b00      	cmp	r3, #0
  405c3a:	bf08      	it	eq
  405c3c:	4613      	moveq	r3, r2
  405c3e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405c42:	4770      	bx	lr
  405c44:	200000c0 	.word	0x200000c0
  405c48:	200004f4 	.word	0x200004f4

00405c4c <__retarget_lock_init_recursive>:
  405c4c:	4770      	bx	lr
  405c4e:	bf00      	nop

00405c50 <__retarget_lock_close_recursive>:
  405c50:	4770      	bx	lr
  405c52:	bf00      	nop

00405c54 <__retarget_lock_acquire_recursive>:
  405c54:	4770      	bx	lr
  405c56:	bf00      	nop

00405c58 <__retarget_lock_release_recursive>:
  405c58:	4770      	bx	lr
  405c5a:	bf00      	nop

00405c5c <__swhatbuf_r>:
  405c5c:	b570      	push	{r4, r5, r6, lr}
  405c5e:	460c      	mov	r4, r1
  405c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c64:	2900      	cmp	r1, #0
  405c66:	b090      	sub	sp, #64	; 0x40
  405c68:	4615      	mov	r5, r2
  405c6a:	461e      	mov	r6, r3
  405c6c:	db14      	blt.n	405c98 <__swhatbuf_r+0x3c>
  405c6e:	aa01      	add	r2, sp, #4
  405c70:	f000 fff0 	bl	406c54 <_fstat_r>
  405c74:	2800      	cmp	r0, #0
  405c76:	db0f      	blt.n	405c98 <__swhatbuf_r+0x3c>
  405c78:	9a02      	ldr	r2, [sp, #8]
  405c7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405c7e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405c82:	fab2 f282 	clz	r2, r2
  405c86:	0952      	lsrs	r2, r2, #5
  405c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405c90:	6032      	str	r2, [r6, #0]
  405c92:	602b      	str	r3, [r5, #0]
  405c94:	b010      	add	sp, #64	; 0x40
  405c96:	bd70      	pop	{r4, r5, r6, pc}
  405c98:	89a2      	ldrh	r2, [r4, #12]
  405c9a:	2300      	movs	r3, #0
  405c9c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405ca0:	6033      	str	r3, [r6, #0]
  405ca2:	d004      	beq.n	405cae <__swhatbuf_r+0x52>
  405ca4:	2240      	movs	r2, #64	; 0x40
  405ca6:	4618      	mov	r0, r3
  405ca8:	602a      	str	r2, [r5, #0]
  405caa:	b010      	add	sp, #64	; 0x40
  405cac:	bd70      	pop	{r4, r5, r6, pc}
  405cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405cb2:	602b      	str	r3, [r5, #0]
  405cb4:	b010      	add	sp, #64	; 0x40
  405cb6:	bd70      	pop	{r4, r5, r6, pc}

00405cb8 <__smakebuf_r>:
  405cb8:	898a      	ldrh	r2, [r1, #12]
  405cba:	0792      	lsls	r2, r2, #30
  405cbc:	460b      	mov	r3, r1
  405cbe:	d506      	bpl.n	405cce <__smakebuf_r+0x16>
  405cc0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405cc4:	2101      	movs	r1, #1
  405cc6:	601a      	str	r2, [r3, #0]
  405cc8:	611a      	str	r2, [r3, #16]
  405cca:	6159      	str	r1, [r3, #20]
  405ccc:	4770      	bx	lr
  405cce:	b5f0      	push	{r4, r5, r6, r7, lr}
  405cd0:	b083      	sub	sp, #12
  405cd2:	ab01      	add	r3, sp, #4
  405cd4:	466a      	mov	r2, sp
  405cd6:	460c      	mov	r4, r1
  405cd8:	4606      	mov	r6, r0
  405cda:	f7ff ffbf 	bl	405c5c <__swhatbuf_r>
  405cde:	9900      	ldr	r1, [sp, #0]
  405ce0:	4605      	mov	r5, r0
  405ce2:	4630      	mov	r0, r6
  405ce4:	f000 f83a 	bl	405d5c <_malloc_r>
  405ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405cec:	b1d8      	cbz	r0, 405d26 <__smakebuf_r+0x6e>
  405cee:	9a01      	ldr	r2, [sp, #4]
  405cf0:	4f15      	ldr	r7, [pc, #84]	; (405d48 <__smakebuf_r+0x90>)
  405cf2:	9900      	ldr	r1, [sp, #0]
  405cf4:	63f7      	str	r7, [r6, #60]	; 0x3c
  405cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405cfa:	81a3      	strh	r3, [r4, #12]
  405cfc:	6020      	str	r0, [r4, #0]
  405cfe:	6120      	str	r0, [r4, #16]
  405d00:	6161      	str	r1, [r4, #20]
  405d02:	b91a      	cbnz	r2, 405d0c <__smakebuf_r+0x54>
  405d04:	432b      	orrs	r3, r5
  405d06:	81a3      	strh	r3, [r4, #12]
  405d08:	b003      	add	sp, #12
  405d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d0c:	4630      	mov	r0, r6
  405d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405d12:	f000 ffb3 	bl	406c7c <_isatty_r>
  405d16:	b1a0      	cbz	r0, 405d42 <__smakebuf_r+0x8a>
  405d18:	89a3      	ldrh	r3, [r4, #12]
  405d1a:	f023 0303 	bic.w	r3, r3, #3
  405d1e:	f043 0301 	orr.w	r3, r3, #1
  405d22:	b21b      	sxth	r3, r3
  405d24:	e7ee      	b.n	405d04 <__smakebuf_r+0x4c>
  405d26:	059a      	lsls	r2, r3, #22
  405d28:	d4ee      	bmi.n	405d08 <__smakebuf_r+0x50>
  405d2a:	f023 0303 	bic.w	r3, r3, #3
  405d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405d32:	f043 0302 	orr.w	r3, r3, #2
  405d36:	2101      	movs	r1, #1
  405d38:	81a3      	strh	r3, [r4, #12]
  405d3a:	6022      	str	r2, [r4, #0]
  405d3c:	6122      	str	r2, [r4, #16]
  405d3e:	6161      	str	r1, [r4, #20]
  405d40:	e7e2      	b.n	405d08 <__smakebuf_r+0x50>
  405d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d46:	e7dd      	b.n	405d04 <__smakebuf_r+0x4c>
  405d48:	00405479 	.word	0x00405479

00405d4c <malloc>:
  405d4c:	4b02      	ldr	r3, [pc, #8]	; (405d58 <malloc+0xc>)
  405d4e:	4601      	mov	r1, r0
  405d50:	6818      	ldr	r0, [r3, #0]
  405d52:	f000 b803 	b.w	405d5c <_malloc_r>
  405d56:	bf00      	nop
  405d58:	200000c0 	.word	0x200000c0

00405d5c <_malloc_r>:
  405d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d60:	f101 060b 	add.w	r6, r1, #11
  405d64:	2e16      	cmp	r6, #22
  405d66:	b083      	sub	sp, #12
  405d68:	4605      	mov	r5, r0
  405d6a:	f240 809e 	bls.w	405eaa <_malloc_r+0x14e>
  405d6e:	f036 0607 	bics.w	r6, r6, #7
  405d72:	f100 80bd 	bmi.w	405ef0 <_malloc_r+0x194>
  405d76:	42b1      	cmp	r1, r6
  405d78:	f200 80ba 	bhi.w	405ef0 <_malloc_r+0x194>
  405d7c:	f000 fb6c 	bl	406458 <__malloc_lock>
  405d80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405d84:	f0c0 8293 	bcc.w	4062ae <_malloc_r+0x552>
  405d88:	0a73      	lsrs	r3, r6, #9
  405d8a:	f000 80b8 	beq.w	405efe <_malloc_r+0x1a2>
  405d8e:	2b04      	cmp	r3, #4
  405d90:	f200 8179 	bhi.w	406086 <_malloc_r+0x32a>
  405d94:	09b3      	lsrs	r3, r6, #6
  405d96:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405d9a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405d9e:	00c3      	lsls	r3, r0, #3
  405da0:	4fbf      	ldr	r7, [pc, #764]	; (4060a0 <_malloc_r+0x344>)
  405da2:	443b      	add	r3, r7
  405da4:	f1a3 0108 	sub.w	r1, r3, #8
  405da8:	685c      	ldr	r4, [r3, #4]
  405daa:	42a1      	cmp	r1, r4
  405dac:	d106      	bne.n	405dbc <_malloc_r+0x60>
  405dae:	e00c      	b.n	405dca <_malloc_r+0x6e>
  405db0:	2a00      	cmp	r2, #0
  405db2:	f280 80aa 	bge.w	405f0a <_malloc_r+0x1ae>
  405db6:	68e4      	ldr	r4, [r4, #12]
  405db8:	42a1      	cmp	r1, r4
  405dba:	d006      	beq.n	405dca <_malloc_r+0x6e>
  405dbc:	6863      	ldr	r3, [r4, #4]
  405dbe:	f023 0303 	bic.w	r3, r3, #3
  405dc2:	1b9a      	subs	r2, r3, r6
  405dc4:	2a0f      	cmp	r2, #15
  405dc6:	ddf3      	ble.n	405db0 <_malloc_r+0x54>
  405dc8:	4670      	mov	r0, lr
  405dca:	693c      	ldr	r4, [r7, #16]
  405dcc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4060b4 <_malloc_r+0x358>
  405dd0:	4574      	cmp	r4, lr
  405dd2:	f000 81ab 	beq.w	40612c <_malloc_r+0x3d0>
  405dd6:	6863      	ldr	r3, [r4, #4]
  405dd8:	f023 0303 	bic.w	r3, r3, #3
  405ddc:	1b9a      	subs	r2, r3, r6
  405dde:	2a0f      	cmp	r2, #15
  405de0:	f300 8190 	bgt.w	406104 <_malloc_r+0x3a8>
  405de4:	2a00      	cmp	r2, #0
  405de6:	f8c7 e014 	str.w	lr, [r7, #20]
  405dea:	f8c7 e010 	str.w	lr, [r7, #16]
  405dee:	f280 809d 	bge.w	405f2c <_malloc_r+0x1d0>
  405df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405df6:	f080 8161 	bcs.w	4060bc <_malloc_r+0x360>
  405dfa:	08db      	lsrs	r3, r3, #3
  405dfc:	f103 0c01 	add.w	ip, r3, #1
  405e00:	1099      	asrs	r1, r3, #2
  405e02:	687a      	ldr	r2, [r7, #4]
  405e04:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405e08:	f8c4 8008 	str.w	r8, [r4, #8]
  405e0c:	2301      	movs	r3, #1
  405e0e:	408b      	lsls	r3, r1
  405e10:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405e14:	4313      	orrs	r3, r2
  405e16:	3908      	subs	r1, #8
  405e18:	60e1      	str	r1, [r4, #12]
  405e1a:	607b      	str	r3, [r7, #4]
  405e1c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405e20:	f8c8 400c 	str.w	r4, [r8, #12]
  405e24:	1082      	asrs	r2, r0, #2
  405e26:	2401      	movs	r4, #1
  405e28:	4094      	lsls	r4, r2
  405e2a:	429c      	cmp	r4, r3
  405e2c:	f200 808b 	bhi.w	405f46 <_malloc_r+0x1ea>
  405e30:	421c      	tst	r4, r3
  405e32:	d106      	bne.n	405e42 <_malloc_r+0xe6>
  405e34:	f020 0003 	bic.w	r0, r0, #3
  405e38:	0064      	lsls	r4, r4, #1
  405e3a:	421c      	tst	r4, r3
  405e3c:	f100 0004 	add.w	r0, r0, #4
  405e40:	d0fa      	beq.n	405e38 <_malloc_r+0xdc>
  405e42:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405e46:	46cc      	mov	ip, r9
  405e48:	4680      	mov	r8, r0
  405e4a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405e4e:	459c      	cmp	ip, r3
  405e50:	d107      	bne.n	405e62 <_malloc_r+0x106>
  405e52:	e16d      	b.n	406130 <_malloc_r+0x3d4>
  405e54:	2a00      	cmp	r2, #0
  405e56:	f280 817b 	bge.w	406150 <_malloc_r+0x3f4>
  405e5a:	68db      	ldr	r3, [r3, #12]
  405e5c:	459c      	cmp	ip, r3
  405e5e:	f000 8167 	beq.w	406130 <_malloc_r+0x3d4>
  405e62:	6859      	ldr	r1, [r3, #4]
  405e64:	f021 0103 	bic.w	r1, r1, #3
  405e68:	1b8a      	subs	r2, r1, r6
  405e6a:	2a0f      	cmp	r2, #15
  405e6c:	ddf2      	ble.n	405e54 <_malloc_r+0xf8>
  405e6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405e72:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405e76:	9300      	str	r3, [sp, #0]
  405e78:	199c      	adds	r4, r3, r6
  405e7a:	4628      	mov	r0, r5
  405e7c:	f046 0601 	orr.w	r6, r6, #1
  405e80:	f042 0501 	orr.w	r5, r2, #1
  405e84:	605e      	str	r6, [r3, #4]
  405e86:	f8c8 c00c 	str.w	ip, [r8, #12]
  405e8a:	f8cc 8008 	str.w	r8, [ip, #8]
  405e8e:	617c      	str	r4, [r7, #20]
  405e90:	613c      	str	r4, [r7, #16]
  405e92:	f8c4 e00c 	str.w	lr, [r4, #12]
  405e96:	f8c4 e008 	str.w	lr, [r4, #8]
  405e9a:	6065      	str	r5, [r4, #4]
  405e9c:	505a      	str	r2, [r3, r1]
  405e9e:	f000 fae1 	bl	406464 <__malloc_unlock>
  405ea2:	9b00      	ldr	r3, [sp, #0]
  405ea4:	f103 0408 	add.w	r4, r3, #8
  405ea8:	e01e      	b.n	405ee8 <_malloc_r+0x18c>
  405eaa:	2910      	cmp	r1, #16
  405eac:	d820      	bhi.n	405ef0 <_malloc_r+0x194>
  405eae:	f000 fad3 	bl	406458 <__malloc_lock>
  405eb2:	2610      	movs	r6, #16
  405eb4:	2318      	movs	r3, #24
  405eb6:	2002      	movs	r0, #2
  405eb8:	4f79      	ldr	r7, [pc, #484]	; (4060a0 <_malloc_r+0x344>)
  405eba:	443b      	add	r3, r7
  405ebc:	f1a3 0208 	sub.w	r2, r3, #8
  405ec0:	685c      	ldr	r4, [r3, #4]
  405ec2:	4294      	cmp	r4, r2
  405ec4:	f000 813d 	beq.w	406142 <_malloc_r+0x3e6>
  405ec8:	6863      	ldr	r3, [r4, #4]
  405eca:	68e1      	ldr	r1, [r4, #12]
  405ecc:	68a6      	ldr	r6, [r4, #8]
  405ece:	f023 0303 	bic.w	r3, r3, #3
  405ed2:	4423      	add	r3, r4
  405ed4:	4628      	mov	r0, r5
  405ed6:	685a      	ldr	r2, [r3, #4]
  405ed8:	60f1      	str	r1, [r6, #12]
  405eda:	f042 0201 	orr.w	r2, r2, #1
  405ede:	608e      	str	r6, [r1, #8]
  405ee0:	605a      	str	r2, [r3, #4]
  405ee2:	f000 fabf 	bl	406464 <__malloc_unlock>
  405ee6:	3408      	adds	r4, #8
  405ee8:	4620      	mov	r0, r4
  405eea:	b003      	add	sp, #12
  405eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ef0:	2400      	movs	r4, #0
  405ef2:	230c      	movs	r3, #12
  405ef4:	4620      	mov	r0, r4
  405ef6:	602b      	str	r3, [r5, #0]
  405ef8:	b003      	add	sp, #12
  405efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405efe:	2040      	movs	r0, #64	; 0x40
  405f00:	f44f 7300 	mov.w	r3, #512	; 0x200
  405f04:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405f08:	e74a      	b.n	405da0 <_malloc_r+0x44>
  405f0a:	4423      	add	r3, r4
  405f0c:	68e1      	ldr	r1, [r4, #12]
  405f0e:	685a      	ldr	r2, [r3, #4]
  405f10:	68a6      	ldr	r6, [r4, #8]
  405f12:	f042 0201 	orr.w	r2, r2, #1
  405f16:	60f1      	str	r1, [r6, #12]
  405f18:	4628      	mov	r0, r5
  405f1a:	608e      	str	r6, [r1, #8]
  405f1c:	605a      	str	r2, [r3, #4]
  405f1e:	f000 faa1 	bl	406464 <__malloc_unlock>
  405f22:	3408      	adds	r4, #8
  405f24:	4620      	mov	r0, r4
  405f26:	b003      	add	sp, #12
  405f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f2c:	4423      	add	r3, r4
  405f2e:	4628      	mov	r0, r5
  405f30:	685a      	ldr	r2, [r3, #4]
  405f32:	f042 0201 	orr.w	r2, r2, #1
  405f36:	605a      	str	r2, [r3, #4]
  405f38:	f000 fa94 	bl	406464 <__malloc_unlock>
  405f3c:	3408      	adds	r4, #8
  405f3e:	4620      	mov	r0, r4
  405f40:	b003      	add	sp, #12
  405f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f46:	68bc      	ldr	r4, [r7, #8]
  405f48:	6863      	ldr	r3, [r4, #4]
  405f4a:	f023 0803 	bic.w	r8, r3, #3
  405f4e:	45b0      	cmp	r8, r6
  405f50:	d304      	bcc.n	405f5c <_malloc_r+0x200>
  405f52:	eba8 0306 	sub.w	r3, r8, r6
  405f56:	2b0f      	cmp	r3, #15
  405f58:	f300 8085 	bgt.w	406066 <_malloc_r+0x30a>
  405f5c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4060b8 <_malloc_r+0x35c>
  405f60:	4b50      	ldr	r3, [pc, #320]	; (4060a4 <_malloc_r+0x348>)
  405f62:	f8d9 2000 	ldr.w	r2, [r9]
  405f66:	681b      	ldr	r3, [r3, #0]
  405f68:	3201      	adds	r2, #1
  405f6a:	4433      	add	r3, r6
  405f6c:	eb04 0a08 	add.w	sl, r4, r8
  405f70:	f000 8155 	beq.w	40621e <_malloc_r+0x4c2>
  405f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405f78:	330f      	adds	r3, #15
  405f7a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405f7e:	f02b 0b0f 	bic.w	fp, fp, #15
  405f82:	4659      	mov	r1, fp
  405f84:	4628      	mov	r0, r5
  405f86:	f000 fc19 	bl	4067bc <_sbrk_r>
  405f8a:	1c41      	adds	r1, r0, #1
  405f8c:	4602      	mov	r2, r0
  405f8e:	f000 80fc 	beq.w	40618a <_malloc_r+0x42e>
  405f92:	4582      	cmp	sl, r0
  405f94:	f200 80f7 	bhi.w	406186 <_malloc_r+0x42a>
  405f98:	4b43      	ldr	r3, [pc, #268]	; (4060a8 <_malloc_r+0x34c>)
  405f9a:	6819      	ldr	r1, [r3, #0]
  405f9c:	4459      	add	r1, fp
  405f9e:	6019      	str	r1, [r3, #0]
  405fa0:	f000 814d 	beq.w	40623e <_malloc_r+0x4e2>
  405fa4:	f8d9 0000 	ldr.w	r0, [r9]
  405fa8:	3001      	adds	r0, #1
  405faa:	bf1b      	ittet	ne
  405fac:	eba2 0a0a 	subne.w	sl, r2, sl
  405fb0:	4451      	addne	r1, sl
  405fb2:	f8c9 2000 	streq.w	r2, [r9]
  405fb6:	6019      	strne	r1, [r3, #0]
  405fb8:	f012 0107 	ands.w	r1, r2, #7
  405fbc:	f000 8115 	beq.w	4061ea <_malloc_r+0x48e>
  405fc0:	f1c1 0008 	rsb	r0, r1, #8
  405fc4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405fc8:	4402      	add	r2, r0
  405fca:	3108      	adds	r1, #8
  405fcc:	eb02 090b 	add.w	r9, r2, fp
  405fd0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405fd4:	eba1 0909 	sub.w	r9, r1, r9
  405fd8:	4649      	mov	r1, r9
  405fda:	4628      	mov	r0, r5
  405fdc:	9301      	str	r3, [sp, #4]
  405fde:	9200      	str	r2, [sp, #0]
  405fe0:	f000 fbec 	bl	4067bc <_sbrk_r>
  405fe4:	1c43      	adds	r3, r0, #1
  405fe6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405fea:	f000 8143 	beq.w	406274 <_malloc_r+0x518>
  405fee:	1a80      	subs	r0, r0, r2
  405ff0:	4448      	add	r0, r9
  405ff2:	f040 0001 	orr.w	r0, r0, #1
  405ff6:	6819      	ldr	r1, [r3, #0]
  405ff8:	60ba      	str	r2, [r7, #8]
  405ffa:	4449      	add	r1, r9
  405ffc:	42bc      	cmp	r4, r7
  405ffe:	6050      	str	r0, [r2, #4]
  406000:	6019      	str	r1, [r3, #0]
  406002:	d017      	beq.n	406034 <_malloc_r+0x2d8>
  406004:	f1b8 0f0f 	cmp.w	r8, #15
  406008:	f240 80fb 	bls.w	406202 <_malloc_r+0x4a6>
  40600c:	6860      	ldr	r0, [r4, #4]
  40600e:	f1a8 020c 	sub.w	r2, r8, #12
  406012:	f022 0207 	bic.w	r2, r2, #7
  406016:	eb04 0e02 	add.w	lr, r4, r2
  40601a:	f000 0001 	and.w	r0, r0, #1
  40601e:	f04f 0c05 	mov.w	ip, #5
  406022:	4310      	orrs	r0, r2
  406024:	2a0f      	cmp	r2, #15
  406026:	6060      	str	r0, [r4, #4]
  406028:	f8ce c004 	str.w	ip, [lr, #4]
  40602c:	f8ce c008 	str.w	ip, [lr, #8]
  406030:	f200 8117 	bhi.w	406262 <_malloc_r+0x506>
  406034:	4b1d      	ldr	r3, [pc, #116]	; (4060ac <_malloc_r+0x350>)
  406036:	68bc      	ldr	r4, [r7, #8]
  406038:	681a      	ldr	r2, [r3, #0]
  40603a:	4291      	cmp	r1, r2
  40603c:	bf88      	it	hi
  40603e:	6019      	strhi	r1, [r3, #0]
  406040:	4b1b      	ldr	r3, [pc, #108]	; (4060b0 <_malloc_r+0x354>)
  406042:	681a      	ldr	r2, [r3, #0]
  406044:	4291      	cmp	r1, r2
  406046:	6862      	ldr	r2, [r4, #4]
  406048:	bf88      	it	hi
  40604a:	6019      	strhi	r1, [r3, #0]
  40604c:	f022 0203 	bic.w	r2, r2, #3
  406050:	4296      	cmp	r6, r2
  406052:	eba2 0306 	sub.w	r3, r2, r6
  406056:	d801      	bhi.n	40605c <_malloc_r+0x300>
  406058:	2b0f      	cmp	r3, #15
  40605a:	dc04      	bgt.n	406066 <_malloc_r+0x30a>
  40605c:	4628      	mov	r0, r5
  40605e:	f000 fa01 	bl	406464 <__malloc_unlock>
  406062:	2400      	movs	r4, #0
  406064:	e740      	b.n	405ee8 <_malloc_r+0x18c>
  406066:	19a2      	adds	r2, r4, r6
  406068:	f043 0301 	orr.w	r3, r3, #1
  40606c:	f046 0601 	orr.w	r6, r6, #1
  406070:	6066      	str	r6, [r4, #4]
  406072:	4628      	mov	r0, r5
  406074:	60ba      	str	r2, [r7, #8]
  406076:	6053      	str	r3, [r2, #4]
  406078:	f000 f9f4 	bl	406464 <__malloc_unlock>
  40607c:	3408      	adds	r4, #8
  40607e:	4620      	mov	r0, r4
  406080:	b003      	add	sp, #12
  406082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406086:	2b14      	cmp	r3, #20
  406088:	d971      	bls.n	40616e <_malloc_r+0x412>
  40608a:	2b54      	cmp	r3, #84	; 0x54
  40608c:	f200 80a3 	bhi.w	4061d6 <_malloc_r+0x47a>
  406090:	0b33      	lsrs	r3, r6, #12
  406092:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406096:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40609a:	00c3      	lsls	r3, r0, #3
  40609c:	e680      	b.n	405da0 <_malloc_r+0x44>
  40609e:	bf00      	nop
  4060a0:	20000660 	.word	0x20000660
  4060a4:	20000b08 	.word	0x20000b08
  4060a8:	20000ad8 	.word	0x20000ad8
  4060ac:	20000b00 	.word	0x20000b00
  4060b0:	20000b04 	.word	0x20000b04
  4060b4:	20000668 	.word	0x20000668
  4060b8:	20000a68 	.word	0x20000a68
  4060bc:	0a5a      	lsrs	r2, r3, #9
  4060be:	2a04      	cmp	r2, #4
  4060c0:	d95b      	bls.n	40617a <_malloc_r+0x41e>
  4060c2:	2a14      	cmp	r2, #20
  4060c4:	f200 80ae 	bhi.w	406224 <_malloc_r+0x4c8>
  4060c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4060cc:	00c9      	lsls	r1, r1, #3
  4060ce:	325b      	adds	r2, #91	; 0x5b
  4060d0:	eb07 0c01 	add.w	ip, r7, r1
  4060d4:	5879      	ldr	r1, [r7, r1]
  4060d6:	f1ac 0c08 	sub.w	ip, ip, #8
  4060da:	458c      	cmp	ip, r1
  4060dc:	f000 8088 	beq.w	4061f0 <_malloc_r+0x494>
  4060e0:	684a      	ldr	r2, [r1, #4]
  4060e2:	f022 0203 	bic.w	r2, r2, #3
  4060e6:	4293      	cmp	r3, r2
  4060e8:	d273      	bcs.n	4061d2 <_malloc_r+0x476>
  4060ea:	6889      	ldr	r1, [r1, #8]
  4060ec:	458c      	cmp	ip, r1
  4060ee:	d1f7      	bne.n	4060e0 <_malloc_r+0x384>
  4060f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4060f4:	687b      	ldr	r3, [r7, #4]
  4060f6:	60e2      	str	r2, [r4, #12]
  4060f8:	f8c4 c008 	str.w	ip, [r4, #8]
  4060fc:	6094      	str	r4, [r2, #8]
  4060fe:	f8cc 400c 	str.w	r4, [ip, #12]
  406102:	e68f      	b.n	405e24 <_malloc_r+0xc8>
  406104:	19a1      	adds	r1, r4, r6
  406106:	f046 0c01 	orr.w	ip, r6, #1
  40610a:	f042 0601 	orr.w	r6, r2, #1
  40610e:	f8c4 c004 	str.w	ip, [r4, #4]
  406112:	4628      	mov	r0, r5
  406114:	6179      	str	r1, [r7, #20]
  406116:	6139      	str	r1, [r7, #16]
  406118:	f8c1 e00c 	str.w	lr, [r1, #12]
  40611c:	f8c1 e008 	str.w	lr, [r1, #8]
  406120:	604e      	str	r6, [r1, #4]
  406122:	50e2      	str	r2, [r4, r3]
  406124:	f000 f99e 	bl	406464 <__malloc_unlock>
  406128:	3408      	adds	r4, #8
  40612a:	e6dd      	b.n	405ee8 <_malloc_r+0x18c>
  40612c:	687b      	ldr	r3, [r7, #4]
  40612e:	e679      	b.n	405e24 <_malloc_r+0xc8>
  406130:	f108 0801 	add.w	r8, r8, #1
  406134:	f018 0f03 	tst.w	r8, #3
  406138:	f10c 0c08 	add.w	ip, ip, #8
  40613c:	f47f ae85 	bne.w	405e4a <_malloc_r+0xee>
  406140:	e02d      	b.n	40619e <_malloc_r+0x442>
  406142:	68dc      	ldr	r4, [r3, #12]
  406144:	42a3      	cmp	r3, r4
  406146:	bf08      	it	eq
  406148:	3002      	addeq	r0, #2
  40614a:	f43f ae3e 	beq.w	405dca <_malloc_r+0x6e>
  40614e:	e6bb      	b.n	405ec8 <_malloc_r+0x16c>
  406150:	4419      	add	r1, r3
  406152:	461c      	mov	r4, r3
  406154:	684a      	ldr	r2, [r1, #4]
  406156:	68db      	ldr	r3, [r3, #12]
  406158:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40615c:	f042 0201 	orr.w	r2, r2, #1
  406160:	604a      	str	r2, [r1, #4]
  406162:	4628      	mov	r0, r5
  406164:	60f3      	str	r3, [r6, #12]
  406166:	609e      	str	r6, [r3, #8]
  406168:	f000 f97c 	bl	406464 <__malloc_unlock>
  40616c:	e6bc      	b.n	405ee8 <_malloc_r+0x18c>
  40616e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406172:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406176:	00c3      	lsls	r3, r0, #3
  406178:	e612      	b.n	405da0 <_malloc_r+0x44>
  40617a:	099a      	lsrs	r2, r3, #6
  40617c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406180:	00c9      	lsls	r1, r1, #3
  406182:	3238      	adds	r2, #56	; 0x38
  406184:	e7a4      	b.n	4060d0 <_malloc_r+0x374>
  406186:	42bc      	cmp	r4, r7
  406188:	d054      	beq.n	406234 <_malloc_r+0x4d8>
  40618a:	68bc      	ldr	r4, [r7, #8]
  40618c:	6862      	ldr	r2, [r4, #4]
  40618e:	f022 0203 	bic.w	r2, r2, #3
  406192:	e75d      	b.n	406050 <_malloc_r+0x2f4>
  406194:	f859 3908 	ldr.w	r3, [r9], #-8
  406198:	4599      	cmp	r9, r3
  40619a:	f040 8086 	bne.w	4062aa <_malloc_r+0x54e>
  40619e:	f010 0f03 	tst.w	r0, #3
  4061a2:	f100 30ff 	add.w	r0, r0, #4294967295
  4061a6:	d1f5      	bne.n	406194 <_malloc_r+0x438>
  4061a8:	687b      	ldr	r3, [r7, #4]
  4061aa:	ea23 0304 	bic.w	r3, r3, r4
  4061ae:	607b      	str	r3, [r7, #4]
  4061b0:	0064      	lsls	r4, r4, #1
  4061b2:	429c      	cmp	r4, r3
  4061b4:	f63f aec7 	bhi.w	405f46 <_malloc_r+0x1ea>
  4061b8:	2c00      	cmp	r4, #0
  4061ba:	f43f aec4 	beq.w	405f46 <_malloc_r+0x1ea>
  4061be:	421c      	tst	r4, r3
  4061c0:	4640      	mov	r0, r8
  4061c2:	f47f ae3e 	bne.w	405e42 <_malloc_r+0xe6>
  4061c6:	0064      	lsls	r4, r4, #1
  4061c8:	421c      	tst	r4, r3
  4061ca:	f100 0004 	add.w	r0, r0, #4
  4061ce:	d0fa      	beq.n	4061c6 <_malloc_r+0x46a>
  4061d0:	e637      	b.n	405e42 <_malloc_r+0xe6>
  4061d2:	468c      	mov	ip, r1
  4061d4:	e78c      	b.n	4060f0 <_malloc_r+0x394>
  4061d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4061da:	d815      	bhi.n	406208 <_malloc_r+0x4ac>
  4061dc:	0bf3      	lsrs	r3, r6, #15
  4061de:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4061e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4061e6:	00c3      	lsls	r3, r0, #3
  4061e8:	e5da      	b.n	405da0 <_malloc_r+0x44>
  4061ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4061ee:	e6ed      	b.n	405fcc <_malloc_r+0x270>
  4061f0:	687b      	ldr	r3, [r7, #4]
  4061f2:	1092      	asrs	r2, r2, #2
  4061f4:	2101      	movs	r1, #1
  4061f6:	fa01 f202 	lsl.w	r2, r1, r2
  4061fa:	4313      	orrs	r3, r2
  4061fc:	607b      	str	r3, [r7, #4]
  4061fe:	4662      	mov	r2, ip
  406200:	e779      	b.n	4060f6 <_malloc_r+0x39a>
  406202:	2301      	movs	r3, #1
  406204:	6053      	str	r3, [r2, #4]
  406206:	e729      	b.n	40605c <_malloc_r+0x300>
  406208:	f240 5254 	movw	r2, #1364	; 0x554
  40620c:	4293      	cmp	r3, r2
  40620e:	d822      	bhi.n	406256 <_malloc_r+0x4fa>
  406210:	0cb3      	lsrs	r3, r6, #18
  406212:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406216:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40621a:	00c3      	lsls	r3, r0, #3
  40621c:	e5c0      	b.n	405da0 <_malloc_r+0x44>
  40621e:	f103 0b10 	add.w	fp, r3, #16
  406222:	e6ae      	b.n	405f82 <_malloc_r+0x226>
  406224:	2a54      	cmp	r2, #84	; 0x54
  406226:	d829      	bhi.n	40627c <_malloc_r+0x520>
  406228:	0b1a      	lsrs	r2, r3, #12
  40622a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40622e:	00c9      	lsls	r1, r1, #3
  406230:	326e      	adds	r2, #110	; 0x6e
  406232:	e74d      	b.n	4060d0 <_malloc_r+0x374>
  406234:	4b20      	ldr	r3, [pc, #128]	; (4062b8 <_malloc_r+0x55c>)
  406236:	6819      	ldr	r1, [r3, #0]
  406238:	4459      	add	r1, fp
  40623a:	6019      	str	r1, [r3, #0]
  40623c:	e6b2      	b.n	405fa4 <_malloc_r+0x248>
  40623e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406242:	2800      	cmp	r0, #0
  406244:	f47f aeae 	bne.w	405fa4 <_malloc_r+0x248>
  406248:	eb08 030b 	add.w	r3, r8, fp
  40624c:	68ba      	ldr	r2, [r7, #8]
  40624e:	f043 0301 	orr.w	r3, r3, #1
  406252:	6053      	str	r3, [r2, #4]
  406254:	e6ee      	b.n	406034 <_malloc_r+0x2d8>
  406256:	207f      	movs	r0, #127	; 0x7f
  406258:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40625c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406260:	e59e      	b.n	405da0 <_malloc_r+0x44>
  406262:	f104 0108 	add.w	r1, r4, #8
  406266:	4628      	mov	r0, r5
  406268:	9300      	str	r3, [sp, #0]
  40626a:	f7ff fa59 	bl	405720 <_free_r>
  40626e:	9b00      	ldr	r3, [sp, #0]
  406270:	6819      	ldr	r1, [r3, #0]
  406272:	e6df      	b.n	406034 <_malloc_r+0x2d8>
  406274:	2001      	movs	r0, #1
  406276:	f04f 0900 	mov.w	r9, #0
  40627a:	e6bc      	b.n	405ff6 <_malloc_r+0x29a>
  40627c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406280:	d805      	bhi.n	40628e <_malloc_r+0x532>
  406282:	0bda      	lsrs	r2, r3, #15
  406284:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406288:	00c9      	lsls	r1, r1, #3
  40628a:	3277      	adds	r2, #119	; 0x77
  40628c:	e720      	b.n	4060d0 <_malloc_r+0x374>
  40628e:	f240 5154 	movw	r1, #1364	; 0x554
  406292:	428a      	cmp	r2, r1
  406294:	d805      	bhi.n	4062a2 <_malloc_r+0x546>
  406296:	0c9a      	lsrs	r2, r3, #18
  406298:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40629c:	00c9      	lsls	r1, r1, #3
  40629e:	327c      	adds	r2, #124	; 0x7c
  4062a0:	e716      	b.n	4060d0 <_malloc_r+0x374>
  4062a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4062a6:	227e      	movs	r2, #126	; 0x7e
  4062a8:	e712      	b.n	4060d0 <_malloc_r+0x374>
  4062aa:	687b      	ldr	r3, [r7, #4]
  4062ac:	e780      	b.n	4061b0 <_malloc_r+0x454>
  4062ae:	08f0      	lsrs	r0, r6, #3
  4062b0:	f106 0308 	add.w	r3, r6, #8
  4062b4:	e600      	b.n	405eb8 <_malloc_r+0x15c>
  4062b6:	bf00      	nop
  4062b8:	20000ad8 	.word	0x20000ad8

004062bc <__ascii_mbtowc>:
  4062bc:	b082      	sub	sp, #8
  4062be:	b149      	cbz	r1, 4062d4 <__ascii_mbtowc+0x18>
  4062c0:	b15a      	cbz	r2, 4062da <__ascii_mbtowc+0x1e>
  4062c2:	b16b      	cbz	r3, 4062e0 <__ascii_mbtowc+0x24>
  4062c4:	7813      	ldrb	r3, [r2, #0]
  4062c6:	600b      	str	r3, [r1, #0]
  4062c8:	7812      	ldrb	r2, [r2, #0]
  4062ca:	1c10      	adds	r0, r2, #0
  4062cc:	bf18      	it	ne
  4062ce:	2001      	movne	r0, #1
  4062d0:	b002      	add	sp, #8
  4062d2:	4770      	bx	lr
  4062d4:	a901      	add	r1, sp, #4
  4062d6:	2a00      	cmp	r2, #0
  4062d8:	d1f3      	bne.n	4062c2 <__ascii_mbtowc+0x6>
  4062da:	4610      	mov	r0, r2
  4062dc:	b002      	add	sp, #8
  4062de:	4770      	bx	lr
  4062e0:	f06f 0001 	mvn.w	r0, #1
  4062e4:	e7f4      	b.n	4062d0 <__ascii_mbtowc+0x14>
  4062e6:	bf00      	nop
	...

004062f0 <memchr>:
  4062f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4062f4:	2a10      	cmp	r2, #16
  4062f6:	db2b      	blt.n	406350 <memchr+0x60>
  4062f8:	f010 0f07 	tst.w	r0, #7
  4062fc:	d008      	beq.n	406310 <memchr+0x20>
  4062fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406302:	3a01      	subs	r2, #1
  406304:	428b      	cmp	r3, r1
  406306:	d02d      	beq.n	406364 <memchr+0x74>
  406308:	f010 0f07 	tst.w	r0, #7
  40630c:	b342      	cbz	r2, 406360 <memchr+0x70>
  40630e:	d1f6      	bne.n	4062fe <memchr+0xe>
  406310:	b4f0      	push	{r4, r5, r6, r7}
  406312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40631a:	f022 0407 	bic.w	r4, r2, #7
  40631e:	f07f 0700 	mvns.w	r7, #0
  406322:	2300      	movs	r3, #0
  406324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406328:	3c08      	subs	r4, #8
  40632a:	ea85 0501 	eor.w	r5, r5, r1
  40632e:	ea86 0601 	eor.w	r6, r6, r1
  406332:	fa85 f547 	uadd8	r5, r5, r7
  406336:	faa3 f587 	sel	r5, r3, r7
  40633a:	fa86 f647 	uadd8	r6, r6, r7
  40633e:	faa5 f687 	sel	r6, r5, r7
  406342:	b98e      	cbnz	r6, 406368 <memchr+0x78>
  406344:	d1ee      	bne.n	406324 <memchr+0x34>
  406346:	bcf0      	pop	{r4, r5, r6, r7}
  406348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40634c:	f002 0207 	and.w	r2, r2, #7
  406350:	b132      	cbz	r2, 406360 <memchr+0x70>
  406352:	f810 3b01 	ldrb.w	r3, [r0], #1
  406356:	3a01      	subs	r2, #1
  406358:	ea83 0301 	eor.w	r3, r3, r1
  40635c:	b113      	cbz	r3, 406364 <memchr+0x74>
  40635e:	d1f8      	bne.n	406352 <memchr+0x62>
  406360:	2000      	movs	r0, #0
  406362:	4770      	bx	lr
  406364:	3801      	subs	r0, #1
  406366:	4770      	bx	lr
  406368:	2d00      	cmp	r5, #0
  40636a:	bf06      	itte	eq
  40636c:	4635      	moveq	r5, r6
  40636e:	3803      	subeq	r0, #3
  406370:	3807      	subne	r0, #7
  406372:	f015 0f01 	tst.w	r5, #1
  406376:	d107      	bne.n	406388 <memchr+0x98>
  406378:	3001      	adds	r0, #1
  40637a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40637e:	bf02      	ittt	eq
  406380:	3001      	addeq	r0, #1
  406382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406386:	3001      	addeq	r0, #1
  406388:	bcf0      	pop	{r4, r5, r6, r7}
  40638a:	3801      	subs	r0, #1
  40638c:	4770      	bx	lr
  40638e:	bf00      	nop

00406390 <memmove>:
  406390:	4288      	cmp	r0, r1
  406392:	b5f0      	push	{r4, r5, r6, r7, lr}
  406394:	d90d      	bls.n	4063b2 <memmove+0x22>
  406396:	188b      	adds	r3, r1, r2
  406398:	4298      	cmp	r0, r3
  40639a:	d20a      	bcs.n	4063b2 <memmove+0x22>
  40639c:	1884      	adds	r4, r0, r2
  40639e:	2a00      	cmp	r2, #0
  4063a0:	d051      	beq.n	406446 <memmove+0xb6>
  4063a2:	4622      	mov	r2, r4
  4063a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4063a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4063ac:	4299      	cmp	r1, r3
  4063ae:	d1f9      	bne.n	4063a4 <memmove+0x14>
  4063b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063b2:	2a0f      	cmp	r2, #15
  4063b4:	d948      	bls.n	406448 <memmove+0xb8>
  4063b6:	ea41 0300 	orr.w	r3, r1, r0
  4063ba:	079b      	lsls	r3, r3, #30
  4063bc:	d146      	bne.n	40644c <memmove+0xbc>
  4063be:	f100 0410 	add.w	r4, r0, #16
  4063c2:	f101 0310 	add.w	r3, r1, #16
  4063c6:	4615      	mov	r5, r2
  4063c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4063cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4063d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4063d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4063d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4063dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4063e0:	3d10      	subs	r5, #16
  4063e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4063e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4063ea:	2d0f      	cmp	r5, #15
  4063ec:	f103 0310 	add.w	r3, r3, #16
  4063f0:	f104 0410 	add.w	r4, r4, #16
  4063f4:	d8e8      	bhi.n	4063c8 <memmove+0x38>
  4063f6:	f1a2 0310 	sub.w	r3, r2, #16
  4063fa:	f023 030f 	bic.w	r3, r3, #15
  4063fe:	f002 0e0f 	and.w	lr, r2, #15
  406402:	3310      	adds	r3, #16
  406404:	f1be 0f03 	cmp.w	lr, #3
  406408:	4419      	add	r1, r3
  40640a:	4403      	add	r3, r0
  40640c:	d921      	bls.n	406452 <memmove+0xc2>
  40640e:	1f1e      	subs	r6, r3, #4
  406410:	460d      	mov	r5, r1
  406412:	4674      	mov	r4, lr
  406414:	3c04      	subs	r4, #4
  406416:	f855 7b04 	ldr.w	r7, [r5], #4
  40641a:	f846 7f04 	str.w	r7, [r6, #4]!
  40641e:	2c03      	cmp	r4, #3
  406420:	d8f8      	bhi.n	406414 <memmove+0x84>
  406422:	f1ae 0404 	sub.w	r4, lr, #4
  406426:	f024 0403 	bic.w	r4, r4, #3
  40642a:	3404      	adds	r4, #4
  40642c:	4421      	add	r1, r4
  40642e:	4423      	add	r3, r4
  406430:	f002 0203 	and.w	r2, r2, #3
  406434:	b162      	cbz	r2, 406450 <memmove+0xc0>
  406436:	3b01      	subs	r3, #1
  406438:	440a      	add	r2, r1
  40643a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40643e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406442:	428a      	cmp	r2, r1
  406444:	d1f9      	bne.n	40643a <memmove+0xaa>
  406446:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406448:	4603      	mov	r3, r0
  40644a:	e7f3      	b.n	406434 <memmove+0xa4>
  40644c:	4603      	mov	r3, r0
  40644e:	e7f2      	b.n	406436 <memmove+0xa6>
  406450:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406452:	4672      	mov	r2, lr
  406454:	e7ee      	b.n	406434 <memmove+0xa4>
  406456:	bf00      	nop

00406458 <__malloc_lock>:
  406458:	4801      	ldr	r0, [pc, #4]	; (406460 <__malloc_lock+0x8>)
  40645a:	f7ff bbfb 	b.w	405c54 <__retarget_lock_acquire_recursive>
  40645e:	bf00      	nop
  406460:	20000b30 	.word	0x20000b30

00406464 <__malloc_unlock>:
  406464:	4801      	ldr	r0, [pc, #4]	; (40646c <__malloc_unlock+0x8>)
  406466:	f7ff bbf7 	b.w	405c58 <__retarget_lock_release_recursive>
  40646a:	bf00      	nop
  40646c:	20000b30 	.word	0x20000b30

00406470 <_realloc_r>:
  406470:	2900      	cmp	r1, #0
  406472:	f000 8095 	beq.w	4065a0 <_realloc_r+0x130>
  406476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40647a:	460d      	mov	r5, r1
  40647c:	4616      	mov	r6, r2
  40647e:	b083      	sub	sp, #12
  406480:	4680      	mov	r8, r0
  406482:	f106 070b 	add.w	r7, r6, #11
  406486:	f7ff ffe7 	bl	406458 <__malloc_lock>
  40648a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40648e:	2f16      	cmp	r7, #22
  406490:	f02e 0403 	bic.w	r4, lr, #3
  406494:	f1a5 0908 	sub.w	r9, r5, #8
  406498:	d83c      	bhi.n	406514 <_realloc_r+0xa4>
  40649a:	2210      	movs	r2, #16
  40649c:	4617      	mov	r7, r2
  40649e:	42be      	cmp	r6, r7
  4064a0:	d83d      	bhi.n	40651e <_realloc_r+0xae>
  4064a2:	4294      	cmp	r4, r2
  4064a4:	da43      	bge.n	40652e <_realloc_r+0xbe>
  4064a6:	4bc4      	ldr	r3, [pc, #784]	; (4067b8 <_realloc_r+0x348>)
  4064a8:	6899      	ldr	r1, [r3, #8]
  4064aa:	eb09 0004 	add.w	r0, r9, r4
  4064ae:	4288      	cmp	r0, r1
  4064b0:	f000 80b4 	beq.w	40661c <_realloc_r+0x1ac>
  4064b4:	6843      	ldr	r3, [r0, #4]
  4064b6:	f023 0101 	bic.w	r1, r3, #1
  4064ba:	4401      	add	r1, r0
  4064bc:	6849      	ldr	r1, [r1, #4]
  4064be:	07c9      	lsls	r1, r1, #31
  4064c0:	d54c      	bpl.n	40655c <_realloc_r+0xec>
  4064c2:	f01e 0f01 	tst.w	lr, #1
  4064c6:	f000 809b 	beq.w	406600 <_realloc_r+0x190>
  4064ca:	4631      	mov	r1, r6
  4064cc:	4640      	mov	r0, r8
  4064ce:	f7ff fc45 	bl	405d5c <_malloc_r>
  4064d2:	4606      	mov	r6, r0
  4064d4:	2800      	cmp	r0, #0
  4064d6:	d03a      	beq.n	40654e <_realloc_r+0xde>
  4064d8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4064dc:	f023 0301 	bic.w	r3, r3, #1
  4064e0:	444b      	add	r3, r9
  4064e2:	f1a0 0208 	sub.w	r2, r0, #8
  4064e6:	429a      	cmp	r2, r3
  4064e8:	f000 8121 	beq.w	40672e <_realloc_r+0x2be>
  4064ec:	1f22      	subs	r2, r4, #4
  4064ee:	2a24      	cmp	r2, #36	; 0x24
  4064f0:	f200 8107 	bhi.w	406702 <_realloc_r+0x292>
  4064f4:	2a13      	cmp	r2, #19
  4064f6:	f200 80db 	bhi.w	4066b0 <_realloc_r+0x240>
  4064fa:	4603      	mov	r3, r0
  4064fc:	462a      	mov	r2, r5
  4064fe:	6811      	ldr	r1, [r2, #0]
  406500:	6019      	str	r1, [r3, #0]
  406502:	6851      	ldr	r1, [r2, #4]
  406504:	6059      	str	r1, [r3, #4]
  406506:	6892      	ldr	r2, [r2, #8]
  406508:	609a      	str	r2, [r3, #8]
  40650a:	4629      	mov	r1, r5
  40650c:	4640      	mov	r0, r8
  40650e:	f7ff f907 	bl	405720 <_free_r>
  406512:	e01c      	b.n	40654e <_realloc_r+0xde>
  406514:	f027 0707 	bic.w	r7, r7, #7
  406518:	2f00      	cmp	r7, #0
  40651a:	463a      	mov	r2, r7
  40651c:	dabf      	bge.n	40649e <_realloc_r+0x2e>
  40651e:	2600      	movs	r6, #0
  406520:	230c      	movs	r3, #12
  406522:	4630      	mov	r0, r6
  406524:	f8c8 3000 	str.w	r3, [r8]
  406528:	b003      	add	sp, #12
  40652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40652e:	462e      	mov	r6, r5
  406530:	1be3      	subs	r3, r4, r7
  406532:	2b0f      	cmp	r3, #15
  406534:	d81e      	bhi.n	406574 <_realloc_r+0x104>
  406536:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40653a:	f003 0301 	and.w	r3, r3, #1
  40653e:	4323      	orrs	r3, r4
  406540:	444c      	add	r4, r9
  406542:	f8c9 3004 	str.w	r3, [r9, #4]
  406546:	6863      	ldr	r3, [r4, #4]
  406548:	f043 0301 	orr.w	r3, r3, #1
  40654c:	6063      	str	r3, [r4, #4]
  40654e:	4640      	mov	r0, r8
  406550:	f7ff ff88 	bl	406464 <__malloc_unlock>
  406554:	4630      	mov	r0, r6
  406556:	b003      	add	sp, #12
  406558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40655c:	f023 0303 	bic.w	r3, r3, #3
  406560:	18e1      	adds	r1, r4, r3
  406562:	4291      	cmp	r1, r2
  406564:	db1f      	blt.n	4065a6 <_realloc_r+0x136>
  406566:	68c3      	ldr	r3, [r0, #12]
  406568:	6882      	ldr	r2, [r0, #8]
  40656a:	462e      	mov	r6, r5
  40656c:	60d3      	str	r3, [r2, #12]
  40656e:	460c      	mov	r4, r1
  406570:	609a      	str	r2, [r3, #8]
  406572:	e7dd      	b.n	406530 <_realloc_r+0xc0>
  406574:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406578:	eb09 0107 	add.w	r1, r9, r7
  40657c:	f002 0201 	and.w	r2, r2, #1
  406580:	444c      	add	r4, r9
  406582:	f043 0301 	orr.w	r3, r3, #1
  406586:	4317      	orrs	r7, r2
  406588:	f8c9 7004 	str.w	r7, [r9, #4]
  40658c:	604b      	str	r3, [r1, #4]
  40658e:	6863      	ldr	r3, [r4, #4]
  406590:	f043 0301 	orr.w	r3, r3, #1
  406594:	3108      	adds	r1, #8
  406596:	6063      	str	r3, [r4, #4]
  406598:	4640      	mov	r0, r8
  40659a:	f7ff f8c1 	bl	405720 <_free_r>
  40659e:	e7d6      	b.n	40654e <_realloc_r+0xde>
  4065a0:	4611      	mov	r1, r2
  4065a2:	f7ff bbdb 	b.w	405d5c <_malloc_r>
  4065a6:	f01e 0f01 	tst.w	lr, #1
  4065aa:	d18e      	bne.n	4064ca <_realloc_r+0x5a>
  4065ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4065b0:	eba9 0a01 	sub.w	sl, r9, r1
  4065b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4065b8:	f021 0103 	bic.w	r1, r1, #3
  4065bc:	440b      	add	r3, r1
  4065be:	4423      	add	r3, r4
  4065c0:	4293      	cmp	r3, r2
  4065c2:	db25      	blt.n	406610 <_realloc_r+0x1a0>
  4065c4:	68c2      	ldr	r2, [r0, #12]
  4065c6:	6881      	ldr	r1, [r0, #8]
  4065c8:	4656      	mov	r6, sl
  4065ca:	60ca      	str	r2, [r1, #12]
  4065cc:	6091      	str	r1, [r2, #8]
  4065ce:	f8da 100c 	ldr.w	r1, [sl, #12]
  4065d2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4065d6:	1f22      	subs	r2, r4, #4
  4065d8:	2a24      	cmp	r2, #36	; 0x24
  4065da:	60c1      	str	r1, [r0, #12]
  4065dc:	6088      	str	r0, [r1, #8]
  4065de:	f200 8094 	bhi.w	40670a <_realloc_r+0x29a>
  4065e2:	2a13      	cmp	r2, #19
  4065e4:	d96f      	bls.n	4066c6 <_realloc_r+0x256>
  4065e6:	6829      	ldr	r1, [r5, #0]
  4065e8:	f8ca 1008 	str.w	r1, [sl, #8]
  4065ec:	6869      	ldr	r1, [r5, #4]
  4065ee:	f8ca 100c 	str.w	r1, [sl, #12]
  4065f2:	2a1b      	cmp	r2, #27
  4065f4:	f200 80a2 	bhi.w	40673c <_realloc_r+0x2cc>
  4065f8:	3508      	adds	r5, #8
  4065fa:	f10a 0210 	add.w	r2, sl, #16
  4065fe:	e063      	b.n	4066c8 <_realloc_r+0x258>
  406600:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406604:	eba9 0a03 	sub.w	sl, r9, r3
  406608:	f8da 1004 	ldr.w	r1, [sl, #4]
  40660c:	f021 0103 	bic.w	r1, r1, #3
  406610:	1863      	adds	r3, r4, r1
  406612:	4293      	cmp	r3, r2
  406614:	f6ff af59 	blt.w	4064ca <_realloc_r+0x5a>
  406618:	4656      	mov	r6, sl
  40661a:	e7d8      	b.n	4065ce <_realloc_r+0x15e>
  40661c:	6841      	ldr	r1, [r0, #4]
  40661e:	f021 0b03 	bic.w	fp, r1, #3
  406622:	44a3      	add	fp, r4
  406624:	f107 0010 	add.w	r0, r7, #16
  406628:	4583      	cmp	fp, r0
  40662a:	da56      	bge.n	4066da <_realloc_r+0x26a>
  40662c:	f01e 0f01 	tst.w	lr, #1
  406630:	f47f af4b 	bne.w	4064ca <_realloc_r+0x5a>
  406634:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406638:	eba9 0a01 	sub.w	sl, r9, r1
  40663c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406640:	f021 0103 	bic.w	r1, r1, #3
  406644:	448b      	add	fp, r1
  406646:	4558      	cmp	r0, fp
  406648:	dce2      	bgt.n	406610 <_realloc_r+0x1a0>
  40664a:	4656      	mov	r6, sl
  40664c:	f8da 100c 	ldr.w	r1, [sl, #12]
  406650:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406654:	1f22      	subs	r2, r4, #4
  406656:	2a24      	cmp	r2, #36	; 0x24
  406658:	60c1      	str	r1, [r0, #12]
  40665a:	6088      	str	r0, [r1, #8]
  40665c:	f200 808f 	bhi.w	40677e <_realloc_r+0x30e>
  406660:	2a13      	cmp	r2, #19
  406662:	f240 808a 	bls.w	40677a <_realloc_r+0x30a>
  406666:	6829      	ldr	r1, [r5, #0]
  406668:	f8ca 1008 	str.w	r1, [sl, #8]
  40666c:	6869      	ldr	r1, [r5, #4]
  40666e:	f8ca 100c 	str.w	r1, [sl, #12]
  406672:	2a1b      	cmp	r2, #27
  406674:	f200 808a 	bhi.w	40678c <_realloc_r+0x31c>
  406678:	3508      	adds	r5, #8
  40667a:	f10a 0210 	add.w	r2, sl, #16
  40667e:	6829      	ldr	r1, [r5, #0]
  406680:	6011      	str	r1, [r2, #0]
  406682:	6869      	ldr	r1, [r5, #4]
  406684:	6051      	str	r1, [r2, #4]
  406686:	68a9      	ldr	r1, [r5, #8]
  406688:	6091      	str	r1, [r2, #8]
  40668a:	eb0a 0107 	add.w	r1, sl, r7
  40668e:	ebab 0207 	sub.w	r2, fp, r7
  406692:	f042 0201 	orr.w	r2, r2, #1
  406696:	6099      	str	r1, [r3, #8]
  406698:	604a      	str	r2, [r1, #4]
  40669a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40669e:	f003 0301 	and.w	r3, r3, #1
  4066a2:	431f      	orrs	r7, r3
  4066a4:	4640      	mov	r0, r8
  4066a6:	f8ca 7004 	str.w	r7, [sl, #4]
  4066aa:	f7ff fedb 	bl	406464 <__malloc_unlock>
  4066ae:	e751      	b.n	406554 <_realloc_r+0xe4>
  4066b0:	682b      	ldr	r3, [r5, #0]
  4066b2:	6003      	str	r3, [r0, #0]
  4066b4:	686b      	ldr	r3, [r5, #4]
  4066b6:	6043      	str	r3, [r0, #4]
  4066b8:	2a1b      	cmp	r2, #27
  4066ba:	d82d      	bhi.n	406718 <_realloc_r+0x2a8>
  4066bc:	f100 0308 	add.w	r3, r0, #8
  4066c0:	f105 0208 	add.w	r2, r5, #8
  4066c4:	e71b      	b.n	4064fe <_realloc_r+0x8e>
  4066c6:	4632      	mov	r2, r6
  4066c8:	6829      	ldr	r1, [r5, #0]
  4066ca:	6011      	str	r1, [r2, #0]
  4066cc:	6869      	ldr	r1, [r5, #4]
  4066ce:	6051      	str	r1, [r2, #4]
  4066d0:	68a9      	ldr	r1, [r5, #8]
  4066d2:	6091      	str	r1, [r2, #8]
  4066d4:	461c      	mov	r4, r3
  4066d6:	46d1      	mov	r9, sl
  4066d8:	e72a      	b.n	406530 <_realloc_r+0xc0>
  4066da:	eb09 0107 	add.w	r1, r9, r7
  4066de:	ebab 0b07 	sub.w	fp, fp, r7
  4066e2:	f04b 0201 	orr.w	r2, fp, #1
  4066e6:	6099      	str	r1, [r3, #8]
  4066e8:	604a      	str	r2, [r1, #4]
  4066ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4066ee:	f003 0301 	and.w	r3, r3, #1
  4066f2:	431f      	orrs	r7, r3
  4066f4:	4640      	mov	r0, r8
  4066f6:	f845 7c04 	str.w	r7, [r5, #-4]
  4066fa:	f7ff feb3 	bl	406464 <__malloc_unlock>
  4066fe:	462e      	mov	r6, r5
  406700:	e728      	b.n	406554 <_realloc_r+0xe4>
  406702:	4629      	mov	r1, r5
  406704:	f7ff fe44 	bl	406390 <memmove>
  406708:	e6ff      	b.n	40650a <_realloc_r+0x9a>
  40670a:	4629      	mov	r1, r5
  40670c:	4630      	mov	r0, r6
  40670e:	461c      	mov	r4, r3
  406710:	46d1      	mov	r9, sl
  406712:	f7ff fe3d 	bl	406390 <memmove>
  406716:	e70b      	b.n	406530 <_realloc_r+0xc0>
  406718:	68ab      	ldr	r3, [r5, #8]
  40671a:	6083      	str	r3, [r0, #8]
  40671c:	68eb      	ldr	r3, [r5, #12]
  40671e:	60c3      	str	r3, [r0, #12]
  406720:	2a24      	cmp	r2, #36	; 0x24
  406722:	d017      	beq.n	406754 <_realloc_r+0x2e4>
  406724:	f100 0310 	add.w	r3, r0, #16
  406728:	f105 0210 	add.w	r2, r5, #16
  40672c:	e6e7      	b.n	4064fe <_realloc_r+0x8e>
  40672e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406732:	f023 0303 	bic.w	r3, r3, #3
  406736:	441c      	add	r4, r3
  406738:	462e      	mov	r6, r5
  40673a:	e6f9      	b.n	406530 <_realloc_r+0xc0>
  40673c:	68a9      	ldr	r1, [r5, #8]
  40673e:	f8ca 1010 	str.w	r1, [sl, #16]
  406742:	68e9      	ldr	r1, [r5, #12]
  406744:	f8ca 1014 	str.w	r1, [sl, #20]
  406748:	2a24      	cmp	r2, #36	; 0x24
  40674a:	d00c      	beq.n	406766 <_realloc_r+0x2f6>
  40674c:	3510      	adds	r5, #16
  40674e:	f10a 0218 	add.w	r2, sl, #24
  406752:	e7b9      	b.n	4066c8 <_realloc_r+0x258>
  406754:	692b      	ldr	r3, [r5, #16]
  406756:	6103      	str	r3, [r0, #16]
  406758:	696b      	ldr	r3, [r5, #20]
  40675a:	6143      	str	r3, [r0, #20]
  40675c:	f105 0218 	add.w	r2, r5, #24
  406760:	f100 0318 	add.w	r3, r0, #24
  406764:	e6cb      	b.n	4064fe <_realloc_r+0x8e>
  406766:	692a      	ldr	r2, [r5, #16]
  406768:	f8ca 2018 	str.w	r2, [sl, #24]
  40676c:	696a      	ldr	r2, [r5, #20]
  40676e:	f8ca 201c 	str.w	r2, [sl, #28]
  406772:	3518      	adds	r5, #24
  406774:	f10a 0220 	add.w	r2, sl, #32
  406778:	e7a6      	b.n	4066c8 <_realloc_r+0x258>
  40677a:	4632      	mov	r2, r6
  40677c:	e77f      	b.n	40667e <_realloc_r+0x20e>
  40677e:	4629      	mov	r1, r5
  406780:	4630      	mov	r0, r6
  406782:	9301      	str	r3, [sp, #4]
  406784:	f7ff fe04 	bl	406390 <memmove>
  406788:	9b01      	ldr	r3, [sp, #4]
  40678a:	e77e      	b.n	40668a <_realloc_r+0x21a>
  40678c:	68a9      	ldr	r1, [r5, #8]
  40678e:	f8ca 1010 	str.w	r1, [sl, #16]
  406792:	68e9      	ldr	r1, [r5, #12]
  406794:	f8ca 1014 	str.w	r1, [sl, #20]
  406798:	2a24      	cmp	r2, #36	; 0x24
  40679a:	d003      	beq.n	4067a4 <_realloc_r+0x334>
  40679c:	3510      	adds	r5, #16
  40679e:	f10a 0218 	add.w	r2, sl, #24
  4067a2:	e76c      	b.n	40667e <_realloc_r+0x20e>
  4067a4:	692a      	ldr	r2, [r5, #16]
  4067a6:	f8ca 2018 	str.w	r2, [sl, #24]
  4067aa:	696a      	ldr	r2, [r5, #20]
  4067ac:	f8ca 201c 	str.w	r2, [sl, #28]
  4067b0:	3518      	adds	r5, #24
  4067b2:	f10a 0220 	add.w	r2, sl, #32
  4067b6:	e762      	b.n	40667e <_realloc_r+0x20e>
  4067b8:	20000660 	.word	0x20000660

004067bc <_sbrk_r>:
  4067bc:	b538      	push	{r3, r4, r5, lr}
  4067be:	4c07      	ldr	r4, [pc, #28]	; (4067dc <_sbrk_r+0x20>)
  4067c0:	2300      	movs	r3, #0
  4067c2:	4605      	mov	r5, r0
  4067c4:	4608      	mov	r0, r1
  4067c6:	6023      	str	r3, [r4, #0]
  4067c8:	f7fb fbfe 	bl	401fc8 <_sbrk>
  4067cc:	1c43      	adds	r3, r0, #1
  4067ce:	d000      	beq.n	4067d2 <_sbrk_r+0x16>
  4067d0:	bd38      	pop	{r3, r4, r5, pc}
  4067d2:	6823      	ldr	r3, [r4, #0]
  4067d4:	2b00      	cmp	r3, #0
  4067d6:	d0fb      	beq.n	4067d0 <_sbrk_r+0x14>
  4067d8:	602b      	str	r3, [r5, #0]
  4067da:	bd38      	pop	{r3, r4, r5, pc}
  4067dc:	20000b44 	.word	0x20000b44

004067e0 <__sread>:
  4067e0:	b510      	push	{r4, lr}
  4067e2:	460c      	mov	r4, r1
  4067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4067e8:	f000 fa70 	bl	406ccc <_read_r>
  4067ec:	2800      	cmp	r0, #0
  4067ee:	db03      	blt.n	4067f8 <__sread+0x18>
  4067f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4067f2:	4403      	add	r3, r0
  4067f4:	6523      	str	r3, [r4, #80]	; 0x50
  4067f6:	bd10      	pop	{r4, pc}
  4067f8:	89a3      	ldrh	r3, [r4, #12]
  4067fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4067fe:	81a3      	strh	r3, [r4, #12]
  406800:	bd10      	pop	{r4, pc}
  406802:	bf00      	nop

00406804 <__swrite>:
  406804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406808:	4616      	mov	r6, r2
  40680a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40680e:	461f      	mov	r7, r3
  406810:	05d3      	lsls	r3, r2, #23
  406812:	460c      	mov	r4, r1
  406814:	4605      	mov	r5, r0
  406816:	d507      	bpl.n	406828 <__swrite+0x24>
  406818:	2200      	movs	r2, #0
  40681a:	2302      	movs	r3, #2
  40681c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406820:	f000 fa3e 	bl	406ca0 <_lseek_r>
  406824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40682c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406830:	81a2      	strh	r2, [r4, #12]
  406832:	463b      	mov	r3, r7
  406834:	4632      	mov	r2, r6
  406836:	4628      	mov	r0, r5
  406838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40683c:	f000 b91e 	b.w	406a7c <_write_r>

00406840 <__sseek>:
  406840:	b510      	push	{r4, lr}
  406842:	460c      	mov	r4, r1
  406844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406848:	f000 fa2a 	bl	406ca0 <_lseek_r>
  40684c:	89a3      	ldrh	r3, [r4, #12]
  40684e:	1c42      	adds	r2, r0, #1
  406850:	bf0e      	itee	eq
  406852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40685a:	6520      	strne	r0, [r4, #80]	; 0x50
  40685c:	81a3      	strh	r3, [r4, #12]
  40685e:	bd10      	pop	{r4, pc}

00406860 <__sclose>:
  406860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406864:	f000 b982 	b.w	406b6c <_close_r>
	...

00406880 <strlen>:
  406880:	f890 f000 	pld	[r0]
  406884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406888:	f020 0107 	bic.w	r1, r0, #7
  40688c:	f06f 0c00 	mvn.w	ip, #0
  406890:	f010 0407 	ands.w	r4, r0, #7
  406894:	f891 f020 	pld	[r1, #32]
  406898:	f040 8049 	bne.w	40692e <strlen+0xae>
  40689c:	f04f 0400 	mov.w	r4, #0
  4068a0:	f06f 0007 	mvn.w	r0, #7
  4068a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4068a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4068ac:	f100 0008 	add.w	r0, r0, #8
  4068b0:	fa82 f24c 	uadd8	r2, r2, ip
  4068b4:	faa4 f28c 	sel	r2, r4, ip
  4068b8:	fa83 f34c 	uadd8	r3, r3, ip
  4068bc:	faa2 f38c 	sel	r3, r2, ip
  4068c0:	bb4b      	cbnz	r3, 406916 <strlen+0x96>
  4068c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4068c6:	fa82 f24c 	uadd8	r2, r2, ip
  4068ca:	f100 0008 	add.w	r0, r0, #8
  4068ce:	faa4 f28c 	sel	r2, r4, ip
  4068d2:	fa83 f34c 	uadd8	r3, r3, ip
  4068d6:	faa2 f38c 	sel	r3, r2, ip
  4068da:	b9e3      	cbnz	r3, 406916 <strlen+0x96>
  4068dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4068e0:	fa82 f24c 	uadd8	r2, r2, ip
  4068e4:	f100 0008 	add.w	r0, r0, #8
  4068e8:	faa4 f28c 	sel	r2, r4, ip
  4068ec:	fa83 f34c 	uadd8	r3, r3, ip
  4068f0:	faa2 f38c 	sel	r3, r2, ip
  4068f4:	b97b      	cbnz	r3, 406916 <strlen+0x96>
  4068f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4068fa:	f101 0120 	add.w	r1, r1, #32
  4068fe:	fa82 f24c 	uadd8	r2, r2, ip
  406902:	f100 0008 	add.w	r0, r0, #8
  406906:	faa4 f28c 	sel	r2, r4, ip
  40690a:	fa83 f34c 	uadd8	r3, r3, ip
  40690e:	faa2 f38c 	sel	r3, r2, ip
  406912:	2b00      	cmp	r3, #0
  406914:	d0c6      	beq.n	4068a4 <strlen+0x24>
  406916:	2a00      	cmp	r2, #0
  406918:	bf04      	itt	eq
  40691a:	3004      	addeq	r0, #4
  40691c:	461a      	moveq	r2, r3
  40691e:	ba12      	rev	r2, r2
  406920:	fab2 f282 	clz	r2, r2
  406924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40692c:	4770      	bx	lr
  40692e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406932:	f004 0503 	and.w	r5, r4, #3
  406936:	f1c4 0000 	rsb	r0, r4, #0
  40693a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40693e:	f014 0f04 	tst.w	r4, #4
  406942:	f891 f040 	pld	[r1, #64]	; 0x40
  406946:	fa0c f505 	lsl.w	r5, ip, r5
  40694a:	ea62 0205 	orn	r2, r2, r5
  40694e:	bf1c      	itt	ne
  406950:	ea63 0305 	ornne	r3, r3, r5
  406954:	4662      	movne	r2, ip
  406956:	f04f 0400 	mov.w	r4, #0
  40695a:	e7a9      	b.n	4068b0 <strlen+0x30>

0040695c <__swbuf_r>:
  40695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40695e:	460d      	mov	r5, r1
  406960:	4614      	mov	r4, r2
  406962:	4606      	mov	r6, r0
  406964:	b110      	cbz	r0, 40696c <__swbuf_r+0x10>
  406966:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406968:	2b00      	cmp	r3, #0
  40696a:	d04b      	beq.n	406a04 <__swbuf_r+0xa8>
  40696c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406970:	69a3      	ldr	r3, [r4, #24]
  406972:	60a3      	str	r3, [r4, #8]
  406974:	b291      	uxth	r1, r2
  406976:	0708      	lsls	r0, r1, #28
  406978:	d539      	bpl.n	4069ee <__swbuf_r+0x92>
  40697a:	6923      	ldr	r3, [r4, #16]
  40697c:	2b00      	cmp	r3, #0
  40697e:	d036      	beq.n	4069ee <__swbuf_r+0x92>
  406980:	b2ed      	uxtb	r5, r5
  406982:	0489      	lsls	r1, r1, #18
  406984:	462f      	mov	r7, r5
  406986:	d515      	bpl.n	4069b4 <__swbuf_r+0x58>
  406988:	6822      	ldr	r2, [r4, #0]
  40698a:	6961      	ldr	r1, [r4, #20]
  40698c:	1ad3      	subs	r3, r2, r3
  40698e:	428b      	cmp	r3, r1
  406990:	da1c      	bge.n	4069cc <__swbuf_r+0x70>
  406992:	3301      	adds	r3, #1
  406994:	68a1      	ldr	r1, [r4, #8]
  406996:	1c50      	adds	r0, r2, #1
  406998:	3901      	subs	r1, #1
  40699a:	60a1      	str	r1, [r4, #8]
  40699c:	6020      	str	r0, [r4, #0]
  40699e:	7015      	strb	r5, [r2, #0]
  4069a0:	6962      	ldr	r2, [r4, #20]
  4069a2:	429a      	cmp	r2, r3
  4069a4:	d01a      	beq.n	4069dc <__swbuf_r+0x80>
  4069a6:	89a3      	ldrh	r3, [r4, #12]
  4069a8:	07db      	lsls	r3, r3, #31
  4069aa:	d501      	bpl.n	4069b0 <__swbuf_r+0x54>
  4069ac:	2d0a      	cmp	r5, #10
  4069ae:	d015      	beq.n	4069dc <__swbuf_r+0x80>
  4069b0:	4638      	mov	r0, r7
  4069b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4069b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4069b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4069ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4069be:	81a2      	strh	r2, [r4, #12]
  4069c0:	6822      	ldr	r2, [r4, #0]
  4069c2:	6661      	str	r1, [r4, #100]	; 0x64
  4069c4:	6961      	ldr	r1, [r4, #20]
  4069c6:	1ad3      	subs	r3, r2, r3
  4069c8:	428b      	cmp	r3, r1
  4069ca:	dbe2      	blt.n	406992 <__swbuf_r+0x36>
  4069cc:	4621      	mov	r1, r4
  4069ce:	4630      	mov	r0, r6
  4069d0:	f7fe fd28 	bl	405424 <_fflush_r>
  4069d4:	b940      	cbnz	r0, 4069e8 <__swbuf_r+0x8c>
  4069d6:	6822      	ldr	r2, [r4, #0]
  4069d8:	2301      	movs	r3, #1
  4069da:	e7db      	b.n	406994 <__swbuf_r+0x38>
  4069dc:	4621      	mov	r1, r4
  4069de:	4630      	mov	r0, r6
  4069e0:	f7fe fd20 	bl	405424 <_fflush_r>
  4069e4:	2800      	cmp	r0, #0
  4069e6:	d0e3      	beq.n	4069b0 <__swbuf_r+0x54>
  4069e8:	f04f 37ff 	mov.w	r7, #4294967295
  4069ec:	e7e0      	b.n	4069b0 <__swbuf_r+0x54>
  4069ee:	4621      	mov	r1, r4
  4069f0:	4630      	mov	r0, r6
  4069f2:	f7fe fc03 	bl	4051fc <__swsetup_r>
  4069f6:	2800      	cmp	r0, #0
  4069f8:	d1f6      	bne.n	4069e8 <__swbuf_r+0x8c>
  4069fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4069fe:	6923      	ldr	r3, [r4, #16]
  406a00:	b291      	uxth	r1, r2
  406a02:	e7bd      	b.n	406980 <__swbuf_r+0x24>
  406a04:	f7fe fd66 	bl	4054d4 <__sinit>
  406a08:	e7b0      	b.n	40696c <__swbuf_r+0x10>
  406a0a:	bf00      	nop

00406a0c <_wcrtomb_r>:
  406a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a0e:	4606      	mov	r6, r0
  406a10:	b085      	sub	sp, #20
  406a12:	461f      	mov	r7, r3
  406a14:	b189      	cbz	r1, 406a3a <_wcrtomb_r+0x2e>
  406a16:	4c10      	ldr	r4, [pc, #64]	; (406a58 <_wcrtomb_r+0x4c>)
  406a18:	4d10      	ldr	r5, [pc, #64]	; (406a5c <_wcrtomb_r+0x50>)
  406a1a:	6824      	ldr	r4, [r4, #0]
  406a1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406a1e:	2c00      	cmp	r4, #0
  406a20:	bf08      	it	eq
  406a22:	462c      	moveq	r4, r5
  406a24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406a28:	47a0      	blx	r4
  406a2a:	1c43      	adds	r3, r0, #1
  406a2c:	d103      	bne.n	406a36 <_wcrtomb_r+0x2a>
  406a2e:	2200      	movs	r2, #0
  406a30:	238a      	movs	r3, #138	; 0x8a
  406a32:	603a      	str	r2, [r7, #0]
  406a34:	6033      	str	r3, [r6, #0]
  406a36:	b005      	add	sp, #20
  406a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a3a:	460c      	mov	r4, r1
  406a3c:	4906      	ldr	r1, [pc, #24]	; (406a58 <_wcrtomb_r+0x4c>)
  406a3e:	4a07      	ldr	r2, [pc, #28]	; (406a5c <_wcrtomb_r+0x50>)
  406a40:	6809      	ldr	r1, [r1, #0]
  406a42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406a44:	2900      	cmp	r1, #0
  406a46:	bf08      	it	eq
  406a48:	4611      	moveq	r1, r2
  406a4a:	4622      	mov	r2, r4
  406a4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406a50:	a901      	add	r1, sp, #4
  406a52:	47a0      	blx	r4
  406a54:	e7e9      	b.n	406a2a <_wcrtomb_r+0x1e>
  406a56:	bf00      	nop
  406a58:	200000c0 	.word	0x200000c0
  406a5c:	200004f4 	.word	0x200004f4

00406a60 <__ascii_wctomb>:
  406a60:	b121      	cbz	r1, 406a6c <__ascii_wctomb+0xc>
  406a62:	2aff      	cmp	r2, #255	; 0xff
  406a64:	d804      	bhi.n	406a70 <__ascii_wctomb+0x10>
  406a66:	700a      	strb	r2, [r1, #0]
  406a68:	2001      	movs	r0, #1
  406a6a:	4770      	bx	lr
  406a6c:	4608      	mov	r0, r1
  406a6e:	4770      	bx	lr
  406a70:	238a      	movs	r3, #138	; 0x8a
  406a72:	6003      	str	r3, [r0, #0]
  406a74:	f04f 30ff 	mov.w	r0, #4294967295
  406a78:	4770      	bx	lr
  406a7a:	bf00      	nop

00406a7c <_write_r>:
  406a7c:	b570      	push	{r4, r5, r6, lr}
  406a7e:	460d      	mov	r5, r1
  406a80:	4c08      	ldr	r4, [pc, #32]	; (406aa4 <_write_r+0x28>)
  406a82:	4611      	mov	r1, r2
  406a84:	4606      	mov	r6, r0
  406a86:	461a      	mov	r2, r3
  406a88:	4628      	mov	r0, r5
  406a8a:	2300      	movs	r3, #0
  406a8c:	6023      	str	r3, [r4, #0]
  406a8e:	f7fa fd9f 	bl	4015d0 <_write>
  406a92:	1c43      	adds	r3, r0, #1
  406a94:	d000      	beq.n	406a98 <_write_r+0x1c>
  406a96:	bd70      	pop	{r4, r5, r6, pc}
  406a98:	6823      	ldr	r3, [r4, #0]
  406a9a:	2b00      	cmp	r3, #0
  406a9c:	d0fb      	beq.n	406a96 <_write_r+0x1a>
  406a9e:	6033      	str	r3, [r6, #0]
  406aa0:	bd70      	pop	{r4, r5, r6, pc}
  406aa2:	bf00      	nop
  406aa4:	20000b44 	.word	0x20000b44

00406aa8 <__register_exitproc>:
  406aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406aac:	4d2c      	ldr	r5, [pc, #176]	; (406b60 <__register_exitproc+0xb8>)
  406aae:	4606      	mov	r6, r0
  406ab0:	6828      	ldr	r0, [r5, #0]
  406ab2:	4698      	mov	r8, r3
  406ab4:	460f      	mov	r7, r1
  406ab6:	4691      	mov	r9, r2
  406ab8:	f7ff f8cc 	bl	405c54 <__retarget_lock_acquire_recursive>
  406abc:	4b29      	ldr	r3, [pc, #164]	; (406b64 <__register_exitproc+0xbc>)
  406abe:	681c      	ldr	r4, [r3, #0]
  406ac0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406ac4:	2b00      	cmp	r3, #0
  406ac6:	d03e      	beq.n	406b46 <__register_exitproc+0x9e>
  406ac8:	685a      	ldr	r2, [r3, #4]
  406aca:	2a1f      	cmp	r2, #31
  406acc:	dc1c      	bgt.n	406b08 <__register_exitproc+0x60>
  406ace:	f102 0e01 	add.w	lr, r2, #1
  406ad2:	b176      	cbz	r6, 406af2 <__register_exitproc+0x4a>
  406ad4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406ad8:	2401      	movs	r4, #1
  406ada:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406ade:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406ae2:	4094      	lsls	r4, r2
  406ae4:	4320      	orrs	r0, r4
  406ae6:	2e02      	cmp	r6, #2
  406ae8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406aec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406af0:	d023      	beq.n	406b3a <__register_exitproc+0x92>
  406af2:	3202      	adds	r2, #2
  406af4:	f8c3 e004 	str.w	lr, [r3, #4]
  406af8:	6828      	ldr	r0, [r5, #0]
  406afa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406afe:	f7ff f8ab 	bl	405c58 <__retarget_lock_release_recursive>
  406b02:	2000      	movs	r0, #0
  406b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b08:	4b17      	ldr	r3, [pc, #92]	; (406b68 <__register_exitproc+0xc0>)
  406b0a:	b30b      	cbz	r3, 406b50 <__register_exitproc+0xa8>
  406b0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406b10:	f7ff f91c 	bl	405d4c <malloc>
  406b14:	4603      	mov	r3, r0
  406b16:	b1d8      	cbz	r0, 406b50 <__register_exitproc+0xa8>
  406b18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406b1c:	6002      	str	r2, [r0, #0]
  406b1e:	2100      	movs	r1, #0
  406b20:	6041      	str	r1, [r0, #4]
  406b22:	460a      	mov	r2, r1
  406b24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406b28:	f04f 0e01 	mov.w	lr, #1
  406b2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406b30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406b34:	2e00      	cmp	r6, #0
  406b36:	d0dc      	beq.n	406af2 <__register_exitproc+0x4a>
  406b38:	e7cc      	b.n	406ad4 <__register_exitproc+0x2c>
  406b3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406b3e:	430c      	orrs	r4, r1
  406b40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406b44:	e7d5      	b.n	406af2 <__register_exitproc+0x4a>
  406b46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406b4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406b4e:	e7bb      	b.n	406ac8 <__register_exitproc+0x20>
  406b50:	6828      	ldr	r0, [r5, #0]
  406b52:	f7ff f881 	bl	405c58 <__retarget_lock_release_recursive>
  406b56:	f04f 30ff 	mov.w	r0, #4294967295
  406b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b5e:	bf00      	nop
  406b60:	200004f0 	.word	0x200004f0
  406b64:	00408c28 	.word	0x00408c28
  406b68:	00405d4d 	.word	0x00405d4d

00406b6c <_close_r>:
  406b6c:	b538      	push	{r3, r4, r5, lr}
  406b6e:	4c07      	ldr	r4, [pc, #28]	; (406b8c <_close_r+0x20>)
  406b70:	2300      	movs	r3, #0
  406b72:	4605      	mov	r5, r0
  406b74:	4608      	mov	r0, r1
  406b76:	6023      	str	r3, [r4, #0]
  406b78:	f7fb fa42 	bl	402000 <_close>
  406b7c:	1c43      	adds	r3, r0, #1
  406b7e:	d000      	beq.n	406b82 <_close_r+0x16>
  406b80:	bd38      	pop	{r3, r4, r5, pc}
  406b82:	6823      	ldr	r3, [r4, #0]
  406b84:	2b00      	cmp	r3, #0
  406b86:	d0fb      	beq.n	406b80 <_close_r+0x14>
  406b88:	602b      	str	r3, [r5, #0]
  406b8a:	bd38      	pop	{r3, r4, r5, pc}
  406b8c:	20000b44 	.word	0x20000b44

00406b90 <_fclose_r>:
  406b90:	b570      	push	{r4, r5, r6, lr}
  406b92:	b159      	cbz	r1, 406bac <_fclose_r+0x1c>
  406b94:	4605      	mov	r5, r0
  406b96:	460c      	mov	r4, r1
  406b98:	b110      	cbz	r0, 406ba0 <_fclose_r+0x10>
  406b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406b9c:	2b00      	cmp	r3, #0
  406b9e:	d03c      	beq.n	406c1a <_fclose_r+0x8a>
  406ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406ba2:	07d8      	lsls	r0, r3, #31
  406ba4:	d505      	bpl.n	406bb2 <_fclose_r+0x22>
  406ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406baa:	b92b      	cbnz	r3, 406bb8 <_fclose_r+0x28>
  406bac:	2600      	movs	r6, #0
  406bae:	4630      	mov	r0, r6
  406bb0:	bd70      	pop	{r4, r5, r6, pc}
  406bb2:	89a3      	ldrh	r3, [r4, #12]
  406bb4:	0599      	lsls	r1, r3, #22
  406bb6:	d53c      	bpl.n	406c32 <_fclose_r+0xa2>
  406bb8:	4621      	mov	r1, r4
  406bba:	4628      	mov	r0, r5
  406bbc:	f7fe fb92 	bl	4052e4 <__sflush_r>
  406bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406bc2:	4606      	mov	r6, r0
  406bc4:	b133      	cbz	r3, 406bd4 <_fclose_r+0x44>
  406bc6:	69e1      	ldr	r1, [r4, #28]
  406bc8:	4628      	mov	r0, r5
  406bca:	4798      	blx	r3
  406bcc:	2800      	cmp	r0, #0
  406bce:	bfb8      	it	lt
  406bd0:	f04f 36ff 	movlt.w	r6, #4294967295
  406bd4:	89a3      	ldrh	r3, [r4, #12]
  406bd6:	061a      	lsls	r2, r3, #24
  406bd8:	d422      	bmi.n	406c20 <_fclose_r+0x90>
  406bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406bdc:	b141      	cbz	r1, 406bf0 <_fclose_r+0x60>
  406bde:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406be2:	4299      	cmp	r1, r3
  406be4:	d002      	beq.n	406bec <_fclose_r+0x5c>
  406be6:	4628      	mov	r0, r5
  406be8:	f7fe fd9a 	bl	405720 <_free_r>
  406bec:	2300      	movs	r3, #0
  406bee:	6323      	str	r3, [r4, #48]	; 0x30
  406bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406bf2:	b121      	cbz	r1, 406bfe <_fclose_r+0x6e>
  406bf4:	4628      	mov	r0, r5
  406bf6:	f7fe fd93 	bl	405720 <_free_r>
  406bfa:	2300      	movs	r3, #0
  406bfc:	6463      	str	r3, [r4, #68]	; 0x44
  406bfe:	f7fe fc95 	bl	40552c <__sfp_lock_acquire>
  406c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c04:	2200      	movs	r2, #0
  406c06:	07db      	lsls	r3, r3, #31
  406c08:	81a2      	strh	r2, [r4, #12]
  406c0a:	d50e      	bpl.n	406c2a <_fclose_r+0x9a>
  406c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c0e:	f7ff f81f 	bl	405c50 <__retarget_lock_close_recursive>
  406c12:	f7fe fc91 	bl	405538 <__sfp_lock_release>
  406c16:	4630      	mov	r0, r6
  406c18:	bd70      	pop	{r4, r5, r6, pc}
  406c1a:	f7fe fc5b 	bl	4054d4 <__sinit>
  406c1e:	e7bf      	b.n	406ba0 <_fclose_r+0x10>
  406c20:	6921      	ldr	r1, [r4, #16]
  406c22:	4628      	mov	r0, r5
  406c24:	f7fe fd7c 	bl	405720 <_free_r>
  406c28:	e7d7      	b.n	406bda <_fclose_r+0x4a>
  406c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c2c:	f7ff f814 	bl	405c58 <__retarget_lock_release_recursive>
  406c30:	e7ec      	b.n	406c0c <_fclose_r+0x7c>
  406c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c34:	f7ff f80e 	bl	405c54 <__retarget_lock_acquire_recursive>
  406c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c3c:	2b00      	cmp	r3, #0
  406c3e:	d1bb      	bne.n	406bb8 <_fclose_r+0x28>
  406c40:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406c42:	f016 0601 	ands.w	r6, r6, #1
  406c46:	d1b1      	bne.n	406bac <_fclose_r+0x1c>
  406c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c4a:	f7ff f805 	bl	405c58 <__retarget_lock_release_recursive>
  406c4e:	4630      	mov	r0, r6
  406c50:	bd70      	pop	{r4, r5, r6, pc}
  406c52:	bf00      	nop

00406c54 <_fstat_r>:
  406c54:	b538      	push	{r3, r4, r5, lr}
  406c56:	460b      	mov	r3, r1
  406c58:	4c07      	ldr	r4, [pc, #28]	; (406c78 <_fstat_r+0x24>)
  406c5a:	4605      	mov	r5, r0
  406c5c:	4611      	mov	r1, r2
  406c5e:	4618      	mov	r0, r3
  406c60:	2300      	movs	r3, #0
  406c62:	6023      	str	r3, [r4, #0]
  406c64:	f7fb f9cf 	bl	402006 <_fstat>
  406c68:	1c43      	adds	r3, r0, #1
  406c6a:	d000      	beq.n	406c6e <_fstat_r+0x1a>
  406c6c:	bd38      	pop	{r3, r4, r5, pc}
  406c6e:	6823      	ldr	r3, [r4, #0]
  406c70:	2b00      	cmp	r3, #0
  406c72:	d0fb      	beq.n	406c6c <_fstat_r+0x18>
  406c74:	602b      	str	r3, [r5, #0]
  406c76:	bd38      	pop	{r3, r4, r5, pc}
  406c78:	20000b44 	.word	0x20000b44

00406c7c <_isatty_r>:
  406c7c:	b538      	push	{r3, r4, r5, lr}
  406c7e:	4c07      	ldr	r4, [pc, #28]	; (406c9c <_isatty_r+0x20>)
  406c80:	2300      	movs	r3, #0
  406c82:	4605      	mov	r5, r0
  406c84:	4608      	mov	r0, r1
  406c86:	6023      	str	r3, [r4, #0]
  406c88:	f7fb f9c2 	bl	402010 <_isatty>
  406c8c:	1c43      	adds	r3, r0, #1
  406c8e:	d000      	beq.n	406c92 <_isatty_r+0x16>
  406c90:	bd38      	pop	{r3, r4, r5, pc}
  406c92:	6823      	ldr	r3, [r4, #0]
  406c94:	2b00      	cmp	r3, #0
  406c96:	d0fb      	beq.n	406c90 <_isatty_r+0x14>
  406c98:	602b      	str	r3, [r5, #0]
  406c9a:	bd38      	pop	{r3, r4, r5, pc}
  406c9c:	20000b44 	.word	0x20000b44

00406ca0 <_lseek_r>:
  406ca0:	b570      	push	{r4, r5, r6, lr}
  406ca2:	460d      	mov	r5, r1
  406ca4:	4c08      	ldr	r4, [pc, #32]	; (406cc8 <_lseek_r+0x28>)
  406ca6:	4611      	mov	r1, r2
  406ca8:	4606      	mov	r6, r0
  406caa:	461a      	mov	r2, r3
  406cac:	4628      	mov	r0, r5
  406cae:	2300      	movs	r3, #0
  406cb0:	6023      	str	r3, [r4, #0]
  406cb2:	f7fb f9af 	bl	402014 <_lseek>
  406cb6:	1c43      	adds	r3, r0, #1
  406cb8:	d000      	beq.n	406cbc <_lseek_r+0x1c>
  406cba:	bd70      	pop	{r4, r5, r6, pc}
  406cbc:	6823      	ldr	r3, [r4, #0]
  406cbe:	2b00      	cmp	r3, #0
  406cc0:	d0fb      	beq.n	406cba <_lseek_r+0x1a>
  406cc2:	6033      	str	r3, [r6, #0]
  406cc4:	bd70      	pop	{r4, r5, r6, pc}
  406cc6:	bf00      	nop
  406cc8:	20000b44 	.word	0x20000b44

00406ccc <_read_r>:
  406ccc:	b570      	push	{r4, r5, r6, lr}
  406cce:	460d      	mov	r5, r1
  406cd0:	4c08      	ldr	r4, [pc, #32]	; (406cf4 <_read_r+0x28>)
  406cd2:	4611      	mov	r1, r2
  406cd4:	4606      	mov	r6, r0
  406cd6:	461a      	mov	r2, r3
  406cd8:	4628      	mov	r0, r5
  406cda:	2300      	movs	r3, #0
  406cdc:	6023      	str	r3, [r4, #0]
  406cde:	f7fa fc59 	bl	401594 <_read>
  406ce2:	1c43      	adds	r3, r0, #1
  406ce4:	d000      	beq.n	406ce8 <_read_r+0x1c>
  406ce6:	bd70      	pop	{r4, r5, r6, pc}
  406ce8:	6823      	ldr	r3, [r4, #0]
  406cea:	2b00      	cmp	r3, #0
  406cec:	d0fb      	beq.n	406ce6 <_read_r+0x1a>
  406cee:	6033      	str	r3, [r6, #0]
  406cf0:	bd70      	pop	{r4, r5, r6, pc}
  406cf2:	bf00      	nop
  406cf4:	20000b44 	.word	0x20000b44

00406cf8 <__aeabi_uldivmod>:
  406cf8:	b953      	cbnz	r3, 406d10 <__aeabi_uldivmod+0x18>
  406cfa:	b94a      	cbnz	r2, 406d10 <__aeabi_uldivmod+0x18>
  406cfc:	2900      	cmp	r1, #0
  406cfe:	bf08      	it	eq
  406d00:	2800      	cmpeq	r0, #0
  406d02:	bf1c      	itt	ne
  406d04:	f04f 31ff 	movne.w	r1, #4294967295
  406d08:	f04f 30ff 	movne.w	r0, #4294967295
  406d0c:	f000 b97a 	b.w	407004 <__aeabi_idiv0>
  406d10:	f1ad 0c08 	sub.w	ip, sp, #8
  406d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406d18:	f000 f806 	bl	406d28 <__udivmoddi4>
  406d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406d24:	b004      	add	sp, #16
  406d26:	4770      	bx	lr

00406d28 <__udivmoddi4>:
  406d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406d2c:	468c      	mov	ip, r1
  406d2e:	460d      	mov	r5, r1
  406d30:	4604      	mov	r4, r0
  406d32:	9e08      	ldr	r6, [sp, #32]
  406d34:	2b00      	cmp	r3, #0
  406d36:	d151      	bne.n	406ddc <__udivmoddi4+0xb4>
  406d38:	428a      	cmp	r2, r1
  406d3a:	4617      	mov	r7, r2
  406d3c:	d96d      	bls.n	406e1a <__udivmoddi4+0xf2>
  406d3e:	fab2 fe82 	clz	lr, r2
  406d42:	f1be 0f00 	cmp.w	lr, #0
  406d46:	d00b      	beq.n	406d60 <__udivmoddi4+0x38>
  406d48:	f1ce 0c20 	rsb	ip, lr, #32
  406d4c:	fa01 f50e 	lsl.w	r5, r1, lr
  406d50:	fa20 fc0c 	lsr.w	ip, r0, ip
  406d54:	fa02 f70e 	lsl.w	r7, r2, lr
  406d58:	ea4c 0c05 	orr.w	ip, ip, r5
  406d5c:	fa00 f40e 	lsl.w	r4, r0, lr
  406d60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406d64:	0c25      	lsrs	r5, r4, #16
  406d66:	fbbc f8fa 	udiv	r8, ip, sl
  406d6a:	fa1f f987 	uxth.w	r9, r7
  406d6e:	fb0a cc18 	mls	ip, sl, r8, ip
  406d72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406d76:	fb08 f309 	mul.w	r3, r8, r9
  406d7a:	42ab      	cmp	r3, r5
  406d7c:	d90a      	bls.n	406d94 <__udivmoddi4+0x6c>
  406d7e:	19ed      	adds	r5, r5, r7
  406d80:	f108 32ff 	add.w	r2, r8, #4294967295
  406d84:	f080 8123 	bcs.w	406fce <__udivmoddi4+0x2a6>
  406d88:	42ab      	cmp	r3, r5
  406d8a:	f240 8120 	bls.w	406fce <__udivmoddi4+0x2a6>
  406d8e:	f1a8 0802 	sub.w	r8, r8, #2
  406d92:	443d      	add	r5, r7
  406d94:	1aed      	subs	r5, r5, r3
  406d96:	b2a4      	uxth	r4, r4
  406d98:	fbb5 f0fa 	udiv	r0, r5, sl
  406d9c:	fb0a 5510 	mls	r5, sl, r0, r5
  406da0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406da4:	fb00 f909 	mul.w	r9, r0, r9
  406da8:	45a1      	cmp	r9, r4
  406daa:	d909      	bls.n	406dc0 <__udivmoddi4+0x98>
  406dac:	19e4      	adds	r4, r4, r7
  406dae:	f100 33ff 	add.w	r3, r0, #4294967295
  406db2:	f080 810a 	bcs.w	406fca <__udivmoddi4+0x2a2>
  406db6:	45a1      	cmp	r9, r4
  406db8:	f240 8107 	bls.w	406fca <__udivmoddi4+0x2a2>
  406dbc:	3802      	subs	r0, #2
  406dbe:	443c      	add	r4, r7
  406dc0:	eba4 0409 	sub.w	r4, r4, r9
  406dc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406dc8:	2100      	movs	r1, #0
  406dca:	2e00      	cmp	r6, #0
  406dcc:	d061      	beq.n	406e92 <__udivmoddi4+0x16a>
  406dce:	fa24 f40e 	lsr.w	r4, r4, lr
  406dd2:	2300      	movs	r3, #0
  406dd4:	6034      	str	r4, [r6, #0]
  406dd6:	6073      	str	r3, [r6, #4]
  406dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ddc:	428b      	cmp	r3, r1
  406dde:	d907      	bls.n	406df0 <__udivmoddi4+0xc8>
  406de0:	2e00      	cmp	r6, #0
  406de2:	d054      	beq.n	406e8e <__udivmoddi4+0x166>
  406de4:	2100      	movs	r1, #0
  406de6:	e886 0021 	stmia.w	r6, {r0, r5}
  406dea:	4608      	mov	r0, r1
  406dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406df0:	fab3 f183 	clz	r1, r3
  406df4:	2900      	cmp	r1, #0
  406df6:	f040 808e 	bne.w	406f16 <__udivmoddi4+0x1ee>
  406dfa:	42ab      	cmp	r3, r5
  406dfc:	d302      	bcc.n	406e04 <__udivmoddi4+0xdc>
  406dfe:	4282      	cmp	r2, r0
  406e00:	f200 80fa 	bhi.w	406ff8 <__udivmoddi4+0x2d0>
  406e04:	1a84      	subs	r4, r0, r2
  406e06:	eb65 0503 	sbc.w	r5, r5, r3
  406e0a:	2001      	movs	r0, #1
  406e0c:	46ac      	mov	ip, r5
  406e0e:	2e00      	cmp	r6, #0
  406e10:	d03f      	beq.n	406e92 <__udivmoddi4+0x16a>
  406e12:	e886 1010 	stmia.w	r6, {r4, ip}
  406e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e1a:	b912      	cbnz	r2, 406e22 <__udivmoddi4+0xfa>
  406e1c:	2701      	movs	r7, #1
  406e1e:	fbb7 f7f2 	udiv	r7, r7, r2
  406e22:	fab7 fe87 	clz	lr, r7
  406e26:	f1be 0f00 	cmp.w	lr, #0
  406e2a:	d134      	bne.n	406e96 <__udivmoddi4+0x16e>
  406e2c:	1beb      	subs	r3, r5, r7
  406e2e:	0c3a      	lsrs	r2, r7, #16
  406e30:	fa1f fc87 	uxth.w	ip, r7
  406e34:	2101      	movs	r1, #1
  406e36:	fbb3 f8f2 	udiv	r8, r3, r2
  406e3a:	0c25      	lsrs	r5, r4, #16
  406e3c:	fb02 3318 	mls	r3, r2, r8, r3
  406e40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406e44:	fb0c f308 	mul.w	r3, ip, r8
  406e48:	42ab      	cmp	r3, r5
  406e4a:	d907      	bls.n	406e5c <__udivmoddi4+0x134>
  406e4c:	19ed      	adds	r5, r5, r7
  406e4e:	f108 30ff 	add.w	r0, r8, #4294967295
  406e52:	d202      	bcs.n	406e5a <__udivmoddi4+0x132>
  406e54:	42ab      	cmp	r3, r5
  406e56:	f200 80d1 	bhi.w	406ffc <__udivmoddi4+0x2d4>
  406e5a:	4680      	mov	r8, r0
  406e5c:	1aed      	subs	r5, r5, r3
  406e5e:	b2a3      	uxth	r3, r4
  406e60:	fbb5 f0f2 	udiv	r0, r5, r2
  406e64:	fb02 5510 	mls	r5, r2, r0, r5
  406e68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406e6c:	fb0c fc00 	mul.w	ip, ip, r0
  406e70:	45a4      	cmp	ip, r4
  406e72:	d907      	bls.n	406e84 <__udivmoddi4+0x15c>
  406e74:	19e4      	adds	r4, r4, r7
  406e76:	f100 33ff 	add.w	r3, r0, #4294967295
  406e7a:	d202      	bcs.n	406e82 <__udivmoddi4+0x15a>
  406e7c:	45a4      	cmp	ip, r4
  406e7e:	f200 80b8 	bhi.w	406ff2 <__udivmoddi4+0x2ca>
  406e82:	4618      	mov	r0, r3
  406e84:	eba4 040c 	sub.w	r4, r4, ip
  406e88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406e8c:	e79d      	b.n	406dca <__udivmoddi4+0xa2>
  406e8e:	4631      	mov	r1, r6
  406e90:	4630      	mov	r0, r6
  406e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e96:	f1ce 0420 	rsb	r4, lr, #32
  406e9a:	fa05 f30e 	lsl.w	r3, r5, lr
  406e9e:	fa07 f70e 	lsl.w	r7, r7, lr
  406ea2:	fa20 f804 	lsr.w	r8, r0, r4
  406ea6:	0c3a      	lsrs	r2, r7, #16
  406ea8:	fa25 f404 	lsr.w	r4, r5, r4
  406eac:	ea48 0803 	orr.w	r8, r8, r3
  406eb0:	fbb4 f1f2 	udiv	r1, r4, r2
  406eb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406eb8:	fb02 4411 	mls	r4, r2, r1, r4
  406ebc:	fa1f fc87 	uxth.w	ip, r7
  406ec0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406ec4:	fb01 f30c 	mul.w	r3, r1, ip
  406ec8:	42ab      	cmp	r3, r5
  406eca:	fa00 f40e 	lsl.w	r4, r0, lr
  406ece:	d909      	bls.n	406ee4 <__udivmoddi4+0x1bc>
  406ed0:	19ed      	adds	r5, r5, r7
  406ed2:	f101 30ff 	add.w	r0, r1, #4294967295
  406ed6:	f080 808a 	bcs.w	406fee <__udivmoddi4+0x2c6>
  406eda:	42ab      	cmp	r3, r5
  406edc:	f240 8087 	bls.w	406fee <__udivmoddi4+0x2c6>
  406ee0:	3902      	subs	r1, #2
  406ee2:	443d      	add	r5, r7
  406ee4:	1aeb      	subs	r3, r5, r3
  406ee6:	fa1f f588 	uxth.w	r5, r8
  406eea:	fbb3 f0f2 	udiv	r0, r3, r2
  406eee:	fb02 3310 	mls	r3, r2, r0, r3
  406ef2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406ef6:	fb00 f30c 	mul.w	r3, r0, ip
  406efa:	42ab      	cmp	r3, r5
  406efc:	d907      	bls.n	406f0e <__udivmoddi4+0x1e6>
  406efe:	19ed      	adds	r5, r5, r7
  406f00:	f100 38ff 	add.w	r8, r0, #4294967295
  406f04:	d26f      	bcs.n	406fe6 <__udivmoddi4+0x2be>
  406f06:	42ab      	cmp	r3, r5
  406f08:	d96d      	bls.n	406fe6 <__udivmoddi4+0x2be>
  406f0a:	3802      	subs	r0, #2
  406f0c:	443d      	add	r5, r7
  406f0e:	1aeb      	subs	r3, r5, r3
  406f10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406f14:	e78f      	b.n	406e36 <__udivmoddi4+0x10e>
  406f16:	f1c1 0720 	rsb	r7, r1, #32
  406f1a:	fa22 f807 	lsr.w	r8, r2, r7
  406f1e:	408b      	lsls	r3, r1
  406f20:	fa05 f401 	lsl.w	r4, r5, r1
  406f24:	ea48 0303 	orr.w	r3, r8, r3
  406f28:	fa20 fe07 	lsr.w	lr, r0, r7
  406f2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406f30:	40fd      	lsrs	r5, r7
  406f32:	ea4e 0e04 	orr.w	lr, lr, r4
  406f36:	fbb5 f9fc 	udiv	r9, r5, ip
  406f3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406f3e:	fb0c 5519 	mls	r5, ip, r9, r5
  406f42:	fa1f f883 	uxth.w	r8, r3
  406f46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406f4a:	fb09 f408 	mul.w	r4, r9, r8
  406f4e:	42ac      	cmp	r4, r5
  406f50:	fa02 f201 	lsl.w	r2, r2, r1
  406f54:	fa00 fa01 	lsl.w	sl, r0, r1
  406f58:	d908      	bls.n	406f6c <__udivmoddi4+0x244>
  406f5a:	18ed      	adds	r5, r5, r3
  406f5c:	f109 30ff 	add.w	r0, r9, #4294967295
  406f60:	d243      	bcs.n	406fea <__udivmoddi4+0x2c2>
  406f62:	42ac      	cmp	r4, r5
  406f64:	d941      	bls.n	406fea <__udivmoddi4+0x2c2>
  406f66:	f1a9 0902 	sub.w	r9, r9, #2
  406f6a:	441d      	add	r5, r3
  406f6c:	1b2d      	subs	r5, r5, r4
  406f6e:	fa1f fe8e 	uxth.w	lr, lr
  406f72:	fbb5 f0fc 	udiv	r0, r5, ip
  406f76:	fb0c 5510 	mls	r5, ip, r0, r5
  406f7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406f7e:	fb00 f808 	mul.w	r8, r0, r8
  406f82:	45a0      	cmp	r8, r4
  406f84:	d907      	bls.n	406f96 <__udivmoddi4+0x26e>
  406f86:	18e4      	adds	r4, r4, r3
  406f88:	f100 35ff 	add.w	r5, r0, #4294967295
  406f8c:	d229      	bcs.n	406fe2 <__udivmoddi4+0x2ba>
  406f8e:	45a0      	cmp	r8, r4
  406f90:	d927      	bls.n	406fe2 <__udivmoddi4+0x2ba>
  406f92:	3802      	subs	r0, #2
  406f94:	441c      	add	r4, r3
  406f96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406f9a:	eba4 0408 	sub.w	r4, r4, r8
  406f9e:	fba0 8902 	umull	r8, r9, r0, r2
  406fa2:	454c      	cmp	r4, r9
  406fa4:	46c6      	mov	lr, r8
  406fa6:	464d      	mov	r5, r9
  406fa8:	d315      	bcc.n	406fd6 <__udivmoddi4+0x2ae>
  406faa:	d012      	beq.n	406fd2 <__udivmoddi4+0x2aa>
  406fac:	b156      	cbz	r6, 406fc4 <__udivmoddi4+0x29c>
  406fae:	ebba 030e 	subs.w	r3, sl, lr
  406fb2:	eb64 0405 	sbc.w	r4, r4, r5
  406fb6:	fa04 f707 	lsl.w	r7, r4, r7
  406fba:	40cb      	lsrs	r3, r1
  406fbc:	431f      	orrs	r7, r3
  406fbe:	40cc      	lsrs	r4, r1
  406fc0:	6037      	str	r7, [r6, #0]
  406fc2:	6074      	str	r4, [r6, #4]
  406fc4:	2100      	movs	r1, #0
  406fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fca:	4618      	mov	r0, r3
  406fcc:	e6f8      	b.n	406dc0 <__udivmoddi4+0x98>
  406fce:	4690      	mov	r8, r2
  406fd0:	e6e0      	b.n	406d94 <__udivmoddi4+0x6c>
  406fd2:	45c2      	cmp	sl, r8
  406fd4:	d2ea      	bcs.n	406fac <__udivmoddi4+0x284>
  406fd6:	ebb8 0e02 	subs.w	lr, r8, r2
  406fda:	eb69 0503 	sbc.w	r5, r9, r3
  406fde:	3801      	subs	r0, #1
  406fe0:	e7e4      	b.n	406fac <__udivmoddi4+0x284>
  406fe2:	4628      	mov	r0, r5
  406fe4:	e7d7      	b.n	406f96 <__udivmoddi4+0x26e>
  406fe6:	4640      	mov	r0, r8
  406fe8:	e791      	b.n	406f0e <__udivmoddi4+0x1e6>
  406fea:	4681      	mov	r9, r0
  406fec:	e7be      	b.n	406f6c <__udivmoddi4+0x244>
  406fee:	4601      	mov	r1, r0
  406ff0:	e778      	b.n	406ee4 <__udivmoddi4+0x1bc>
  406ff2:	3802      	subs	r0, #2
  406ff4:	443c      	add	r4, r7
  406ff6:	e745      	b.n	406e84 <__udivmoddi4+0x15c>
  406ff8:	4608      	mov	r0, r1
  406ffa:	e708      	b.n	406e0e <__udivmoddi4+0xe6>
  406ffc:	f1a8 0802 	sub.w	r8, r8, #2
  407000:	443d      	add	r5, r7
  407002:	e72b      	b.n	406e5c <__udivmoddi4+0x134>

00407004 <__aeabi_idiv0>:
  407004:	4770      	bx	lr
  407006:	bf00      	nop

00407008 <mmc_trans_multipliers>:
  407008:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  407018:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  407028:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  407038:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00407048 <sd_mmc_trans_units>:
  407048:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00407064 <sd_trans_multipliers>:
  407064:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  407074:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  407084:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  407094:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004070a4 <LfnOfs>:
  4070a4:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

004070b4 <excvt.5681>:
  4070b4:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  4070c4:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  4070d4:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  4070e4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  4070f4:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  407104:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  407114:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  407124:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  407134:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  407144:	5d5b 0000                                   []..

00407148 <Tbl>:
  407148:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  407158:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  407168:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  407178:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  407188:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  407198:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  4071a8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  4071b8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  4071c8:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  4071d8:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  4071e8:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  4071f8:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  407208:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  407218:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  407228:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  407238:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00407248 <tbl_lower.5431>:
  407248:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  407258:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  407268:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  407278:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  407288:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  407298:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  4072a8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  4072b8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  4072c8:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  4072d8:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  4072e8:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  4072f8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  407308:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  407318:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  407328:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  407338:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  407348:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  407358:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  407368:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  407378:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  407388:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  407398:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  4073a8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  4073b8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  4073c8:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  4073d8:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  4073e8:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  4073f8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  407408:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  407418:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00407428 <tbl_upper.5432>:
  407428:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  407438:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  407448:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  407458:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  407468:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  407478:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  407488:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  407498:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  4074a8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  4074b8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  4074c8:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  4074d8:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  4074e8:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  4074f8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  407508:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  407518:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  407528:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  407538:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  407548:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  407558:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  407568:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  407578:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  407588:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  407598:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  4075a8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  4075b8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  4075c8:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  4075d8:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  4075e8:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  4075f8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  407608:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  407618:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  407628:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  407638:	3031 353a 3a36 3532 0000 0000 614d 2079     10:56:25....May 
  407648:	3832 3220 3130 0038 2d2d 4320 6d6f 6970     28 2018.-- Compi
  407658:	656c 3a64 2520 2073 7325 2d20 0a2d 000d     led: %s %s --...
  407668:	6c50 6165 6573 7020 756c 2067 6e61 5320     Please plug an S
  407678:	2c44 4d20 434d 6f20 2072 4453 4f49 6320     D, MMC or SDIO c
  407688:	7261 2064 6e69 7320 6f6c 2e74 0d0a 0000     ard in slot.....
  407698:	6143 6472 6920 736e 6174 6c6c 4620 4941     Card install FAI
  4076a8:	0a4c 000d 6c50 6165 6573 7520 706e 756c     L...Please unplu
  4076b8:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
  4076c8:	2065 6163 6472 0a2e 000d 0000 6f4d 6e75     e card......Moun
  4076d8:	2074 6964 6b73 2820 5f66 6f6d 6e75 2974     t disk (f_mount)
  4076e8:	2e2e 0d2e 000a 0000 465b 4941 5d4c 7220     ........[FAIL] r
  4076f8:	7365 2520 0d64 000a 4f5b 5d4b 0a0d 0000     es %d...[OK]....
  407708:	7243 6165 6574 6120 6620 6c69 2065 6628     Create a file (f
  407718:	6f5f 6570 296e 2e2e 0d2e 000a 3a30 5f66     _open)......0:f_
  407728:	7570 7374 742e 7478 0000 0000 7257 7469     puts.txt....Writ
  407738:	2065 6f74 7420 7365 2074 6966 656c 2820     e to test file (
  407748:	5f66 7570 7374 2e29 2e2e 0a0d 0000 0000     f_puts).........
  407758:	465b 4941 5d4c 0a0d 0000 0000 4f5b 5d4b     [FAIL]......[OK]
  407768:	4920 7720 6f72 6574 2520 0d64 000a 0000      I wrote %d.....
  407778:	6554 7473 6920 2073 7573 6363 7365 6673     Test is successf
  407788:	6c75 0a2e 000d 0000 3a30 5f66 7277 7469     ul......0:f_writ
  407798:	5f65 3135 2e32 7874 0074 0000 7257 7469     e_512.txt...Writ
  4077a8:	2065 6f74 7420 7365 2074 6966 656c 2820     e to test file (
  4077b8:	5f66 7277 7469 2065 3135 2932 2e2e 0d2e     f_write 512)....
  4077c8:	000a 0000 3a30 5f66 7277 7469 5f65 3031     ....0:f_write_10
  4077d8:	3432 742e 7478 0000 7257 7469 2065 6f74     24.txt..Write to
  4077e8:	7420 7365 2074 6966 656c 2820 5f66 7277      test file (f_wr
  4077f8:	7469 2065 3031 3432 2e29 2e2e 0a0d 0000     ite 1024).......
  407808:	3a30 5f66 7277 7469 5f65 3032 3834 742e     0:f_write_2048.t
  407818:	7478 0000 7257 7469 2065 6f74 7420 7365     xt..Write to tes
  407828:	2074 6966 656c 2820 5f66 7277 7469 2065     t file (f_write 
  407838:	3032 3834 2e29 2e2e 0a0d 0000 3a30 5f66     2048).......0:f_
  407848:	7277 7469 5f65 3034 3639 742e 7478 0000     write_4096.txt..
  407858:	7257 7469 2065 6f74 7420 7365 2074 6966     Write to test fi
  407868:	656c 2820 5f66 7277 7469 2065 3034 3639     le (f_write 4096
  407878:	2e29 2e2e 0a0d 0000 6c50 6165 6573 7520     ).......Please u
  407888:	706e 756c 2067 6874 2065 6163 6472 0a2e     nplug the card..
  407898:	000d 0000 6261 6463 6665 6867 6a69 3130     ....abcdefghij01
  4078a8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4078b8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4078c8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4078d8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4078e8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4078f8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407908:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407918:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407928:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407938:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407948:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407958:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407968:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407978:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407988:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407998:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4079a8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4079b8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4079c8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4079d8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4079e8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4079f8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407a08:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407a18:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407a28:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407a38:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407a48:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407a58:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407a68:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407a78:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407a88:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407a98:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407aa8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407ab8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407ac8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407ad8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407ae8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407af8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407b08:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407b18:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407b28:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407b38:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407b48:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407b58:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407b68:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407b78:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407b88:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407b98:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407ba8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407bb8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407bc8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407bd8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407be8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407bf8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407c08:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407c18:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407c28:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407c38:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407c48:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407c58:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407c68:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407c78:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407c88:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407c98:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407ca8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407cb8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407cc8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407cd8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407ce8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407cf8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407d08:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407d18:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407d28:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407d38:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407d48:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407d58:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407d68:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407d78:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407d88:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407d98:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407da8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407db8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407dc8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407dd8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407de8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407df8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407e08:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407e18:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407e28:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407e38:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407e48:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407e58:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407e68:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407e78:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407e88:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407e98:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407ea8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407eb8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407ec8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407ed8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407ee8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407ef8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407f08:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407f18:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407f28:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407f38:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407f48:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407f58:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407f68:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407f78:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407f88:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407f98:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407fa8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  407fb8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  407fc8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  407fd8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  407fe8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  407ff8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408008:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408018:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408028:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408038:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408048:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408058:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408068:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408078:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408088:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408098:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4080a8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4080b8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4080c8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4080d8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4080e8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4080f8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408108:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408118:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408128:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408138:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408148:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408158:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408168:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408178:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408188:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408198:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4081a8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4081b8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4081c8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4081d8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4081e8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4081f8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408208:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408218:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408228:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408238:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408248:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408258:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408268:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408278:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408288:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408298:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4082a8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4082b8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4082c8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4082d8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4082e8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4082f8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408308:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408318:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408328:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408338:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408348:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408358:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408368:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408378:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408388:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408398:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4083a8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4083b8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4083c8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4083d8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4083e8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4083f8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408408:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408418:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408428:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408438:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408448:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408458:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408468:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408478:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408488:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408498:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4084a8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4084b8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4084c8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4084d8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4084e8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4084f8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408508:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408518:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408528:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408538:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408548:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408558:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408568:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408578:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408588:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408598:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4085a8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4085b8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4085c8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4085d8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4085e8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4085f8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408608:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408618:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408628:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408638:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408648:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408658:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408668:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408678:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408688:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408698:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4086a8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4086b8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4086c8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4086d8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4086e8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4086f8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408708:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408718:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408728:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408738:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408748:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408758:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408768:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408778:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408788:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408798:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4087a8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4087b8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4087c8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4087d8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4087e8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4087f8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408808:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408818:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408828:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408838:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408848:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408858:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408868:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408878:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408888:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408898:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4088a8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4088b8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4088c8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4088d8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4088e8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4088f8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408908:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408918:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408928:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408938:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408948:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408958:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408968:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408978:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408988:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408998:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4089a8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  4089b8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  4089c8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  4089d8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  4089e8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  4089f8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408a08:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408a18:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408a28:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408a38:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408a48:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408a58:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408a68:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408a78:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408a88:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408a98:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408aa8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408ab8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408ac8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408ad8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408ae8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408af8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408b08:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408b18:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408b28:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408b38:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408b48:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408b58:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408b68:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408b78:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408b88:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408b98:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408ba8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408bb8:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408bc8:	6a69 3130 3332 3534 3736 3938 6261 6463     ij0123456789abcd
  408bd8:	6665 6867 6a69 3130 3332 3534 3736 3938     efghij0123456789
  408be8:	6261 6463 6665 6867 6a69 3130 3332 3534     abcdefghij012345
  408bf8:	3736 3938 6261 6463 6665 6867 6a69 3130     6789abcdefghij01
  408c08:	3332 3534 3736 3938 6261 6463 6665 6867     23456789abcdefgh
  408c18:	6a69 3130 3332 3534 3736 3938 0000 0000     ij0123456789....

00408c28 <_global_impure_ptr>:
  408c28:	00c8 2000 3130 3332 3534 3736 3938 4241     ... 0123456789AB
  408c38:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408c48:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408c58:	296c 0000                                   l)..

00408c5c <blanks.7217>:
  408c5c:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408c6c <zeroes.7218>:
  408c6c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408c7c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00408c8c <_ctype_>:
  408c8c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  408c9c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  408cac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  408cbc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408ccc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408cdc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408cec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408cfc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408d0c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408d90 <_init>:
  408d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d92:	bf00      	nop
  408d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408d96:	bc08      	pop	{r3}
  408d98:	469e      	mov	lr, r3
  408d9a:	4770      	bx	lr

00408d9c <__init_array_start>:
  408d9c:	004052c5 	.word	0x004052c5

00408da0 <__frame_dummy_init_array_entry>:
  408da0:	0040016d                                m.@.

00408da4 <_fini>:
  408da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408da6:	bf00      	nop
  408da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408daa:	bc08      	pop	{r3}
  408dac:	469e      	mov	lr, r3
  408dae:	4770      	bx	lr

00408db0 <__fini_array_start>:
  408db0:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000c:	b430      	push	{r4, r5}
2000000e:	b082      	sub	sp, #8
20000010:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000012:	b35b      	cbz	r3, 2000006c <efc_perform_read_sequence+0x60>
20000014:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000016:	6803      	ldr	r3, [r0, #0]
20000018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000001c:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001e:	b2c9      	uxtb	r1, r1
20000020:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000024:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000026:	6883      	ldr	r3, [r0, #8]
20000028:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000002a:	9b01      	ldr	r3, [sp, #4]
2000002c:	f013 0f01 	tst.w	r3, #1
20000030:	d1f9      	bne.n	20000026 <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000032:	b14d      	cbz	r5, 20000048 <efc_perform_read_sequence+0x3c>
20000034:	4621      	mov	r1, r4
20000036:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000003a:	4c0d      	ldr	r4, [pc, #52]	; (20000070 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000003c:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000040:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	4299      	cmp	r1, r3
20000046:	d1f9      	bne.n	2000003c <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000050:	6883      	ldr	r3, [r0, #8]
20000052:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000054:	9b01      	ldr	r3, [sp, #4]
20000056:	f013 0f01 	tst.w	r3, #1
2000005a:	d0f9      	beq.n	20000050 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005c:	6803      	ldr	r3, [r0, #0]
2000005e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000062:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000064:	2000      	movs	r0, #0
}
20000066:	b002      	add	sp, #8
20000068:	bc30      	pop	{r4, r5}
2000006a:	4770      	bx	lr
		return EFC_RC_INVALID;
2000006c:	2002      	movs	r0, #2
2000006e:	e7fa      	b.n	20000066 <efc_perform_read_sequence+0x5a>
20000070:	003ffffc 	.word	0x003ffffc

20000074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000074:	6001      	str	r1, [r0, #0]
20000076:	4770      	bx	lr

20000078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2000007c:	6883      	ldr	r3, [r0, #8]
2000007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	9b01      	ldr	r3, [sp, #4]
20000082:	f013 0f01 	tst.w	r3, #1
20000086:	d0f9      	beq.n	2000007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000088:	9801      	ldr	r0, [sp, #4]
}
2000008a:	f000 000e 	and.w	r0, r0, #14
2000008e:	b002      	add	sp, #8
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <sd_mmc_cards>:
	...
2000009c:	001d 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000b8 <g_interrupt_enabled>:
200000b8:	0001 0000                                   ....

200000bc <SystemCoreClock>:
200000bc:	1200 007a                                   ..z.

200000c0 <_impure_ptr>:
200000c0:	00c8 2000 0000 0000                         ... ....

200000c8 <impure_data>:
200000c8:	0000 0000 03b4 2000 041c 2000 0484 2000     ....... ... ... 
	...
20000170:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000180:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004f0 <__atexit_recursive_mutex>:
200004f0:	0b20 2000                                    .. 

200004f4 <__global_locale>:
200004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000534:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000554:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000574:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000594:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005d4:	6a61 0040 62bd 0040 0000 0000 8c8c 0040     aj@..b@.......@.
200005e4:	8c88 0040 7754 0040 7754 0040 7754 0040     ..@.Tw@.Tw@.Tw@.
200005f4:	7754 0040 7754 0040 7754 0040 7754 0040     Tw@.Tw@.Tw@.Tw@.
20000604:	7754 0040 7754 0040 ffff ffff ffff ffff     Tw@.Tw@.........
20000614:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000063c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000660 <__malloc_av_>:
	...
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 
200009c8:	09c0 2000 09c0 2000 09c8 2000 09c8 2000     ... ... ... ... 
200009d8:	09d0 2000 09d0 2000 09d8 2000 09d8 2000     ... ... ... ... 
200009e8:	09e0 2000 09e0 2000 09e8 2000 09e8 2000     ... ... ... ... 
200009f8:	09f0 2000 09f0 2000 09f8 2000 09f8 2000     ... ... ... ... 
20000a08:	0a00 2000 0a00 2000 0a08 2000 0a08 2000     ... ... ... ... 
20000a18:	0a10 2000 0a10 2000 0a18 2000 0a18 2000     ... ... ... ... 
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 

20000a68 <__malloc_sbrk_base>:
20000a68:	ffff ffff                                   ....

20000a6c <__malloc_trim_threshold>:
20000a6c:	0000 0002                                   ....
